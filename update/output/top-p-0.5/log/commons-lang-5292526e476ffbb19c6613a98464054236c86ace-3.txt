--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.0
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.0
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
public static String toString(final Annotation a) {
        ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);
        for (Method m : a.annotationType().getDeclaredMethods()) {
            if (m.getParameterTypes().length > 0) {
                continue; //wtf?
            }
            try {
                builder.append(m.getName(), m.invoke(a));
            } catch (RuntimeException ex) {
                throw ex;
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        }
        return builder.build();
    }
----------------------------------------------------------------
old test
@Test
    public void testToString() {
        StrBuilder sb = new StrBuilder("abc");
        assertEquals("abc", sb.toString());
    }
----------------------------------------------------------------
new product
public static String toString(final Annotation a) {
        final ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);
        for (final Method m : a.annotationType().getDeclaredMethods()) {
            if (m.getParameterTypes().length > 0) {
                continue; //wtf?
            }
            try {
                builder.append(m.getName(), m.invoke(a));
            } catch (final RuntimeException ex) {
                throw ex;
            } catch (final Exception ex) {
                throw new RuntimeException(ex);
            }
        }
        return builder.build();
    }
----------------------------------------------------------------
new test
@Test
    public void testToString() {
        final StrBuilder sb = new StrBuilder("abc");
        assertEquals("abc", sb.toString());
    }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 672f3e3..8ce79af 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,14 +1,14 @@
 public static String toString(final Annotation a) {
-        ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);
-        for (Method m : a.annotationType().getDeclaredMethods()) {
+        final ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);
+        for (final Method m : a.annotationType().getDeclaredMethods()) {
             if (m.getParameterTypes().length > 0) {
                 continue; //wtf?
             }
             try {
                 builder.append(m.getName(), m.invoke(a));
-            } catch (RuntimeException ex) {
+            } catch (final RuntimeException ex) {
                 throw ex;
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new RuntimeException(ex);
             }
         }

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index e3961b6..803398b 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test
     public void testToString() {
-        StrBuilder sb = new StrBuilder("abc");
+        final StrBuilder sb = new StrBuilder("abc");
         assertEquals("abc", sb.toString());
     }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index b25a1b1..12c4cee 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,17 +1,17 @@
 public static int hashCode(final Annotation a) {
         int result = 0;
-        Class<? extends Annotation> type = a.annotationType();
-        for (Method m : type.getDeclaredMethods()) {
+        final Class<? extends Annotation> type = a.annotationType();
+        for (final Method m : type.getDeclaredMethods()) {
             try {
-                Object value = m.invoke(a);
+                final Object value = m.invoke(a);
                 if (value == null) {
                     throw new IllegalStateException(
                             String.format("Annotation method %s returned null", m));
                 }
                 result += hashMember(m.getName(), value);
-            } catch (RuntimeException ex) {
+            } catch (final RuntimeException ex) {
                 throw ex;
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new RuntimeException(ex);
             }
         }

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 8c0c1d7..27d3605 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,14 +1,14 @@
 @Test
     public void testHashCode() {
-        StrBuilder sb = new StrBuilder();
-        int hc1a = sb.hashCode();
-        int hc1b = sb.hashCode();
+        final StrBuilder sb = new StrBuilder();
+        final int hc1a = sb.hashCode();
+        final int hc1b = sb.hashCode();
         assertEquals(0, hc1a);
         assertEquals(hc1a, hc1b);
         
         sb.append("abc");
-        int hc2a = sb.hashCode();
-        int hc2b = sb.hashCode();
+        final int hc2a = sb.hashCode();
+        final int hc2b = sb.hashCode();
         assertTrue(hc2a != 0);
         assertEquals(hc2a, hc2b);
     }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.0
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
    public void testToString() {
        final StrBuilder sb = new StrBuilder("abc");
        assertEquals("abc", sb.toString());
    }
</new_test>
----------------------------------------------------------------
测试代码

@Test
    public void testToString() {
        final StrBuilder sb = new StrBuilder("abc");
        assertEquals("abc", sb.toString());
    }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,5 +1,7 @@

+
 @Test
     public void testToString() {
-        StrBuilder sb = new StrBuilder("abc");
+        final StrBuilder sb = new StrBuilder("abc");
         assertEquals("abc", sb.toString());
     }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.0
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
    public void testToString() {
        final StrBuilder sb = new StrBuilder("abc");
        assertEquals("abc", sb.toString());
    }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,5 +1,7 @@

+
 @Test
     public void testToString() {
-        StrBuilder sb = new StrBuilder("abc");
+        final StrBuilder sb = new StrBuilder("abc");
         assertEquals("abc", sb.toString());
     }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,7 +1,5 @@

-
 @Test
     public void testToString() {
         final StrBuilder sb = new StrBuilder("abc");
         assertEquals("abc", sb.toString());
     }
-

--------------------------------------------------------------------------------------------------------------------------------
