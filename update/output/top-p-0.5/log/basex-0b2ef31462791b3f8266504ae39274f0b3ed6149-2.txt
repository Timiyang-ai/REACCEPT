--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.9532163742690059
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 3
----------------------------------------------------------------
old description: 测试通过，覆盖率：0.9532163742690059
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
private Item add(final QueryContext ctx) throws QueryException {
    final Data data = checkData(ctx);
    final byte[] path = expr.length < 3 ? Token.EMPTY : token(path(2, ctx));
    final NewInput input = checkInput(checkItem(expr[1], ctx), path);
    ctx.updates.add(new DBAdd(data, input, ctx, info), ctx);
    return null;
  }
----------------------------------------------------------------
old test
@Test
  public void add() {
    query(COUNT.args(COLLECTION.args(NAME)), "1");
    query(_DB_ADD.args(NAME, FILE));
    query(COUNT.args(COLLECTION.args(NAME)), "2");

    query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");

    query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");

    query(_DB_ADD.args(NAME, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);

    query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
        " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
    query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);

    query("for $i in 1 to 3 return " +
        _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
    query(COUNT.args(" for $i in 1 to 3 return " +
        COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
  }
----------------------------------------------------------------
new product
private Item add(final QueryContext ctx) throws QueryException {
    final Data data = checkData(ctx);
    final byte[] path = expr.length < 3 ? Token.EMPTY : token(path(2, ctx));
    final NewInput input = checkInput(checkItem(expr[1], ctx), path);
    final Options opts = checkOptions(3, Q_OPTIONS, new Options(), ctx);
    ctx.updates.add(new DBAdd(data, input, opts, ctx, info), ctx);
    return null;
  }
----------------------------------------------------------------
new test
@Test
  public void add() {
    query(COUNT.args(COLLECTION.args(NAME)), "1");
    query(_DB_ADD.args(NAME, FILE));
    query(COUNT.args(COLLECTION.args(NAME)), "2");

    query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");

    query(_DB_ADD.args(NAME, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");

    query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");

    query(_DB_ADD.args(NAME, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);

    query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
        " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
    query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);

    query("for $i in 1 to 3 return " +
        _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
    query(COUNT.args(" for $i in 1 to 3 return " +
        COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);

    // specify parsing options
    query(_DB_ADD.args(NAME, " '<a> </a>'", "chop.xml", " map { 'chop':true() }"));
    query(_DB_OPEN.args(NAME, "chop.xml"), "<a/>");
    query(_DB_ADD.args(NAME, " '<a> </a>'", "nochop.xml", " map { 'chop':false() }"));
    query(_DB_OPEN.args(NAME, "nochop.xml"), "<a> </a>");
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 94c86ce..fce3e5c 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,6 +2,7 @@ private Item add(final QueryContext ctx) throws QueryException {
     final Data data = checkData(ctx);
     final byte[] path = expr.length < 3 ? Token.EMPTY : token(path(2, ctx));
     final NewInput input = checkInput(checkItem(expr[1], ctx), path);
-    ctx.updates.add(new DBAdd(data, input, ctx, info), ctx);
+    final Options opts = checkOptions(3, Q_OPTIONS, new Options(), ctx);
+    ctx.updates.add(new DBAdd(data, input, opts, ctx, info), ctx);
     return null;
   }
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 10789ce..d8fd38f 100644
--- a/old_test.java
+++ b/new_test.java
@@ -30,4 +30,10 @@
         _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
     query(COUNT.args(" for $i in 1 to 3 return " +
         COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
+
+    // specify parsing options
+    query(_DB_ADD.args(NAME, " '<a> </a>'", "chop.xml", " map { 'chop':true() }"));
+    query(_DB_OPEN.args(NAME, "chop.xml"), "<a/>");
+    query(_DB_ADD.args(NAME, " '<a> </a>'", "nochop.xml", " map { 'chop':false() }"));
+    query(_DB_OPEN.args(NAME, "nochop.xml"), "<a> </a>");
   }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 27a31ec..5957ae6 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,17 +2,13 @@ private Item add(final QueryContext ctx) throws QueryException {
     checkWrite(ctx);
 
     final Data data = data(0, ctx);
-    final String name = expr.length < 3 ? null : name(checkStr(expr[2], ctx));
-    final String path = expr.length < 4 ? null : path(3, ctx);
-
-    // get all items representing document(s):
-    final ObjList<Item> docs = new ObjList<Item>(
-        (int) Math.max(expr[1].size(), 1));
-    final Iter iter = ctx.iter(expr[1]);
-    for(Item i; (i = iter.next()) != null;) docs.add(i);
-
-    if(docs.size() > 0) ctx.updates.add(
-        new DBAdd(data, input, docs, name, path, ctx.context), ctx);
-
+    final Item it = checkItem(expr[1], ctx);
+    String path = "";
+    if(expr.length == 3) {
+      path = path(2, ctx);
+      if(endsWith(checkStr(expr[2], ctx), '/')) path += '/';
+    }
+
+    ctx.updates.add(new DBAdd(data, input, it, path, ctx.context), ctx);
     return null;
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 0bddd77..09bd55f 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,8 +1,8 @@
 @Test
   public final void add() throws IOException {
     session.execute("create db " + DB);
-    session.add(DB, "", new ArrayInput("<X/>"));
+    session.add(DB, new ArrayInput("<X/>"));
     check("1", session.query("count(" + DBOPEN.args(DB) + ")").execute());
-    for(int i = 0; i < 9; i++) session.add(DB, "", new ArrayInput("<X/>"));
+    for(int i = 0; i < 9; i++) session.add(DB, new ArrayInput("<X/>"));
     check("10", session.query("count(" + DBOPEN.args(DB) + ")").execute());
   }
\ No newline at end of file

----------------------------------------------------------------
coverage: 0.9532163742690059
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
Based on the changes in the production method as indicated by the `<diff_product>` tag, where an `Options` parameter has been added to the `DBAdd` constructor, and referring to the adjustments made in similar test methods as shown in the `<sample_diff_test>`, the new test method for the `add` function should reflect these changes. The test needs to account for the new way of handling options when adding documents to the database.

Here's how the updated test method could look, incorporating the new options handling:

```java
<new_test>
@Test
public void add() {
  query(COUNT.args(COLLECTION.args(NAME)), "1");
  query(_DB_ADD.args(NAME, FILE));
  query(COUNT.args(COLLECTION.args(NAME)), "2");

  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, FILE, "in/"));
  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);

  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);

  query("for $i in 1 to 3 return " +
      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
  query(COUNT.args(" for $i in 1 to 3 return " +
      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
}
</new_test>
```

This updated test method does not explicitly show the handling of the new `Options` parameter in the `DBAdd` constructor because the test cases provided do not directly interact with this parameter. However, if there were specific options to be tested, additional lines would be required to set these options and pass them to the `_DB_ADD` function accordingly.

The essence of the update is to ensure that the test method remains compatible with the changes in the production code, particularly the addition of the `Options` parameter. If the production code changes require specific options to be set for certain test cases, those options would need to be included in the test queries as well.
----------------------------------------------------------------
generated test
@Test
public void add() {
  query(COUNT.args(COLLECTION.args(NAME)), "1");
  query(_DB_ADD.args(NAME, FILE));
  query(COUNT.args(COLLECTION.args(NAME)), "2");

  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, FILE, "in/"));
  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);

  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);

  query("for $i in 1 to 3 return " +
      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
  query(COUNT.args(" for $i in 1 to 3 return " +
      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,33 +1,33 @@

 @Test
-  public void add() {
-    query(COUNT.args(COLLECTION.args(NAME)), "1");
-    query(_DB_ADD.args(NAME, FILE));
-    query(COUNT.args(COLLECTION.args(NAME)), "2");
+public void add() {
+  query(COUNT.args(COLLECTION.args(NAME)), "1");
+  query(_DB_ADD.args(NAME, FILE));
+  query(COUNT.args(COLLECTION.args(NAME)), "2");
 
-    query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, FILE, "in/"));
-    query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
+  query(_DB_ADD.args(NAME, FILE, "in/"));
+  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
 
-    query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
+  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
 
-    query(_DB_ADD.args(NAME, FLDR, "test/dir"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
+  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
 
-    query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
-        " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
-    query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
+  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
+      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
+  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
 
-    query("for $i in 1 to 3 return " +
-        _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
-    query(COUNT.args(" for $i in 1 to 3 return " +
-        COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
-  }
+  query("for $i in 1 to 3 return " +
+      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
+  query(COUNT.args(" for $i in 1 to 3 return " +
+      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.9532163742690059
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test
public void add() {
  query(COUNT.args(COLLECTION.args(NAME)), "1");
  query(_DB_ADD.args(NAME, FILE));
  query(COUNT.args(COLLECTION.args(NAME)), "2");

  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");

  query(_DB_ADD.args(NAME, FILE, "in/"));
  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");

  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);

  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);

  query("for $i in 1 to 3 return " +
      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
  query(COUNT.args(" for $i in 1 to 3 return " +
      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,33 +1,33 @@

 @Test
-  public void add() {
-    query(COUNT.args(COLLECTION.args(NAME)), "1");
-    query(_DB_ADD.args(NAME, FILE));
-    query(COUNT.args(COLLECTION.args(NAME)), "2");
+public void add() {
+  query(COUNT.args(COLLECTION.args(NAME)), "1");
+  query(_DB_ADD.args(NAME, FILE));
+  query(COUNT.args(COLLECTION.args(NAME)), "2");
 
-    query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
+  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
 
-    query(_DB_ADD.args(NAME, FILE, "in/"));
-    query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
+  query(_DB_ADD.args(NAME, FILE, "in/"));
+  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
 
-    query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
+  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
 
-    query(_DB_ADD.args(NAME, FLDR, "test/dir"));
-    query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
+  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
+  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
 
-    query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
-        " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
-    query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
+  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
+      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
+  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
 
-    query("for $i in 1 to 3 return " +
-        _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
-    query(COUNT.args(" for $i in 1 to 3 return " +
-        COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
-  }
+  query("for $i in 1 to 3 return " +
+      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
+  query(COUNT.args(" for $i in 1 to 3 return " +
+      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,33 +1,39 @@

 @Test
-public void add() {
-  query(COUNT.args(COLLECTION.args(NAME)), "1");
-  query(_DB_ADD.args(NAME, FILE));
-  query(COUNT.args(COLLECTION.args(NAME)), "2");
+  public void add() {
+    query(COUNT.args(COLLECTION.args(NAME)), "1");
+    query(_DB_ADD.args(NAME, FILE));
+    query(COUNT.args(COLLECTION.args(NAME)), "2");
 
-  query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
-  query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
+    query(_DB_ADD.args(NAME, "\"<root/>\"", "t1.xml"));
+    query(COUNT.args(COLLECTION.args(NAME + "/t1.xml") + "/root"), "1");
 
-  query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
-  query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
+    query(_DB_ADD.args(NAME, " document { <root/> }", "t2.xml"));
+    query(COUNT.args(COLLECTION.args(NAME + "/t2.xml") + "/root"), "1");
 
-  query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
-  query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
+    query(_DB_ADD.args(NAME, " <root/>", "test/t3.xml"));
+    query(COUNT.args(COLLECTION.args(NAME + "/test/t3.xml") + "/root"), "1");
 
-  query(_DB_ADD.args(NAME, FILE, "in/"));
-  query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
+    query(_DB_ADD.args(NAME, FILE, "in/"));
+    query(COUNT.args(COLLECTION.args(NAME + "/in/input.xml") + "/html"), "1");
 
-  query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
-  query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
+    query(_DB_ADD.args(NAME, FILE, "test/t4.xml"));
+    query(COUNT.args(COLLECTION.args(NAME + "/test/t4.xml") + "/html"), "1");
 
-  query(_DB_ADD.args(NAME, FLDR, "test/dir"));
-  query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
+    query(_DB_ADD.args(NAME, FLDR, "test/dir"));
+    query(COUNT.args(COLLECTION.args(NAME + "/test/dir")), NFLDR);
 
-  query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
-      " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
-  query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
+    query("for $f in " + _FILE_LIST.args(FLDR, "true()", "*.xml") +
+        " return " + _DB_ADD.args(NAME, " '" + FLDR + "' || $f", "dir"));
+    query(COUNT.args(COLLECTION.args(NAME + "/dir")), NFLDR);
 
-  query("for $i in 1 to 3 return " +
-      _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
-  query(COUNT.args(" for $i in 1 to 3 return " +
-      COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
-}
+    query("for $i in 1 to 3 return " +
+        _DB_ADD.args(NAME, "\"<root/>\"", "\"doc\" || $i"));
+    query(COUNT.args(" for $i in 1 to 3 return " +
+        COLLECTION.args('"' + NAME + "/doc\" || $i")), 3);
+
+    // specify parsing options
+    query(_DB_ADD.args(NAME, " '<a> </a>'", "chop.xml", " map { 'chop':true() }"));
+    query(_DB_OPEN.args(NAME, "chop.xml"), "<a/>");
+    query(_DB_ADD.args(NAME, " '<a> </a>'", "nochop.xml", " map { 'chop':false() }"));
+    query(_DB_OPEN.args(NAME, "nochop.xml"), "<a> </a>");
+  }

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.9532163742690059
--------------------------------------------------------------------------------------------------------------------------------
