--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.9395973154362416
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 3
----------------------------------------------------------------
old description: 测试通过，覆盖率：0.9395973154362416
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
@Override
	public Encounter saveEncounter(Encounter encounter) throws APIException {
		
		// if authenticated user is not supposed to edit encounter of certain type
		failIfDeniedToEdit(encounter);
		
		//If new encounter, try to assign a visit using the registered visit assignment handler.
		createVisitForNewEncounter(encounter);
		
		// check permissions
		boolean isNewEncounter = requirePrivilege(encounter);
		
		// This must be done after setting dateCreated etc on the obs because
		// of the way the ORM tools flush things and check for nullity
		// This also must be done before the save encounter so we can use the
		// orig date
		// after the save
		Patient p = encounter.getPatient();
		Date originalDate;
		Location originalLocation = null;
		
		if (!isNewEncounter) {
			// fetch the datetime from the database prior to saving for this
			// encounter
			// to see if it has changed and change all obs after saving if so
			originalDate = dao.getSavedEncounterDatetime(encounter);
			if (encounter.getLocation() != null) {
				originalLocation = dao.getSavedEncounterLocation(encounter);
			}
			// Our data model duplicates the patient column to allow for
			// observations to
			// not have to look up the parent Encounter to find the patient
			// Therefore, encounter.patient must always equal
			// encounter.observations[0-n].patient
			
			// If we are changing encounter.encounterDatetime, then we need to
			// also apply that
			// to Obs that inherited their obsDatetime from the encounter in the
			// first place
			
			Date newDate = encounter.getEncounterDatetime();
			Location newLocation = encounter.getLocation();
			for (Obs obs : encounter.getAllObs(true)) {
				// if the date was changed
				if (OpenmrsUtil.compare(originalDate, newDate) != 0
				        && OpenmrsUtil.compare(obs.getObsDatetime(), originalDate) == 0) {
					
					// if the obs datetime is the same as the
					// original encounter datetime, fix it
					obs.setObsDatetime(newDate);
					
				}
				
				if (!OpenmrsUtil.nullSafeEquals(newLocation, originalLocation) && obs.getLocation().equals(originalLocation)) {
					obs.setLocation(newLocation);
				}
				
				// if the Person in the obs doesn't match the Patient in the
				// encounter, fix it
				if (!obs.getPerson().getPersonId().equals(p.getPatientId())) {
					obs.setPerson(p);
				}
			}
		}
		// same goes for Orders
		for (Order o : encounter.getOrders()) {
			if (!p.equals(o.getPatient())) {
				o.setPatient(p);
			}
		}

		// do the actual saving to the database
		dao.saveEncounter(encounter);

		// save the new orderGroups
		for (OrderGroup orderGroup : encounter.getOrderGroups()) {
			Context.getOrderService().saveOrderGroup(orderGroup);
		}
		//save the new orders which do not have order groups
		for (Order o : encounter.getOrdersWithoutOrderGroups()) {
			if (o.getOrderId() == null) {
				Context.getOrderService().saveOrder(o, null);
			}
		}
		
		// save the Obs
		String changeMessage = Context.getMessageSourceService().getMessage("Obs.void.reason.default");
		ObsService os = Context.getObsService();
		List<Obs> obsToRemove = new ArrayList<>();
		List<Obs> obsToAdd = new ArrayList<>();
		for (Obs o : encounter.getObsAtTopLevel(true)) {
			if (o.getId() == null) {
				os.saveObs(o, null);
			} else {
				Obs newObs = os.saveObs(o, changeMessage);
				//The logic in saveObs evicts the old obs instance, so we need to update the collection
				//with the newly loaded and voided instance, apparently reloading the encounter
				//didn't do the tick
				obsToRemove.add(o);
				obsToAdd.add(os.getObs(o.getId()));
				obsToAdd.add(newObs);
			}
		}

		removeGivenObsAndTheirGroupMembersFromEncounter(obsToRemove, encounter);
		addGivenObsAndTheirGroupMembersToEncounter(obsToAdd, encounter);
		return encounter;
	}
----------------------------------------------------------------
old test
@Test
	public void saveEncounter_shouldCascadeSaveToContainedObs() {
		EncounterService es = Context.getEncounterService();
		// First, create a new Encounter
		Encounter enc = buildEncounter();
		
		//add an obs to the encounter
		Obs groupObs = new Obs();
		Concept c = Context.getConceptService().getConcept(1);
		groupObs.setConcept(c);
		
		// add an obs to the group
		Obs childObs = new Obs();
		childObs.setConcept(c);
		childObs.setValueNumeric(50d);
		groupObs.addGroupMember(childObs);
		enc.addObs(groupObs);
		
		//confirm that save and new enc id are cascaded to obs groupMembers
		//even though childObs aren't directly associated to enc
		assertNotNull("save succeeds without error", es.saveEncounter(enc));
		assertTrue("enc save succeeds", enc.getId() > 0);
		
		assertNotNull("obs save succeeds", groupObs.getObsId());
		assertEquals("encounter id propogated", groupObs.getEncounter().getId(), enc.getId());
		assertEquals("encounter time propogated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
		assertNotNull("obs save succeeds", childObs.getObsId());
		assertEquals("encounter id propogated", childObs.getEncounter().getId(), enc.getId());
		assertEquals("encounter time propogated", childObs.getObsDatetime(), enc.getEncounterDatetime());
		
	}
----------------------------------------------------------------
new product
@Override
	public Encounter saveEncounter(Encounter encounter) throws APIException {
		
		// if authenticated user is not supposed to edit encounter of certain type
		failIfDeniedToEdit(encounter);
		
		//If new encounter, try to assign a visit using the registered visit assignment handler.
		createVisitForNewEncounter(encounter);
		
		// check permissions
		boolean isNewEncounter = requirePrivilege(encounter);
		
		// This must be done after setting dateCreated etc on the obs because
		// of the way the ORM tools flush things and check for nullity
		// This also must be done before the save encounter so we can use the
		// orig date
		// after the save
		Patient p = encounter.getPatient();
		Date originalDate;
		Location originalLocation = null;
		
		if (!isNewEncounter) {
			// fetch the datetime from the database prior to saving for this
			// encounter
			// to see if it has changed and change all obs after saving if so
			originalDate = dao.getSavedEncounterDatetime(encounter);
			if (encounter.getLocation() != null) {
				originalLocation = dao.getSavedEncounterLocation(encounter);
			}
			// Our data model duplicates the patient column to allow for
			// observations to
			// not have to look up the parent Encounter to find the patient
			// Therefore, encounter.patient must always equal
			// encounter.observations[0-n].patient
			
			// If we are changing encounter.encounterDatetime, then we need to
			// also apply that
			// to Obs that inherited their obsDatetime from the encounter in the
			// first place
			
			Date newDate = encounter.getEncounterDatetime();
			Location newLocation = encounter.getLocation();
			for (Obs obs : encounter.getAllFlattenObs(true)) {
				// if the date was changed
				if (OpenmrsUtil.compare(originalDate, newDate) != 0
				        && OpenmrsUtil.compare(obs.getObsDatetime(), originalDate) == 0) {
					
					// if the obs datetime is the same as the
					// original encounter datetime, fix it
					obs.setObsDatetime(newDate);
					
				}
				
				if (!OpenmrsUtil.nullSafeEquals(newLocation, originalLocation) && obs.getLocation().equals(originalLocation)) {
					obs.setLocation(newLocation);
				}
				
				// if the Person in the obs doesn't match the Patient in the
				// encounter, fix it
				if (!obs.getPerson().getPersonId().equals(p.getPatientId())) {
					obs.setPerson(p);
				}
			}
		}
		// same goes for Orders
		for (Order o : encounter.getOrders()) {
			if (!p.equals(o.getPatient())) {
				o.setPatient(p);
			}
		}

		// do the actual saving to the database
		dao.saveEncounter(encounter);

		// save the new orderGroups
		for (OrderGroup orderGroup : encounter.getOrderGroups()) {
			Context.getOrderService().saveOrderGroup(orderGroup);
		}
		//save the new orders which do not have order groups
		for (Order o : encounter.getOrdersWithoutOrderGroups()) {
			if (o.getOrderId() == null) {
				Context.getOrderService().saveOrder(o, null);
			}
		}
		
		// save the Obs
		String changeMessage = Context.getMessageSourceService().getMessage("Obs.void.reason.default");
		ObsService os = Context.getObsService();
		List<Obs> obsToRemove = new ArrayList<>();
		List<Obs> obsToAdd = new ArrayList<>();
		for (Obs o : encounter.getObsAtTopLevel(true)) {
			if (o.getId() == null) {
				os.saveObs(o, null);
			} else {
				Obs newObs = os.saveObs(o, changeMessage);
				//The logic in saveObs evicts the old obs instance, so we need to update the collection
				//with the newly loaded and voided instance, apparently reloading the encounter
				//didn't do the tick
				obsToRemove.add(o);
				obsToAdd.add(os.getObs(o.getId()));
				obsToAdd.add(newObs);
			}
		}

		removeGivenObsAndTheirGroupMembersFromEncounter(obsToRemove, encounter);
		addGivenObsAndTheirGroupMembersToEncounter(obsToAdd, encounter);
		return encounter;
	}
----------------------------------------------------------------
new test
@Test
	public void saveEncounter_shouldCascadeSaveToContainedObs() {
		EncounterService es = Context.getEncounterService();
		// First, create a new Encounter
		Encounter enc = buildEncounter();
		
		//add an obs to the encounter
		Obs groupObs = new Obs();
		Concept c = Context.getConceptService().getConcept(1);
		groupObs.setConcept(c);
		
		// add an obs to the group
		Obs childObs = new Obs();
		childObs.setConcept(c);
		childObs.setValueNumeric(50d);
		groupObs.addGroupMember(childObs);
		enc.addObs(groupObs);
		
		//confirm that save and new enc id are cascaded to obs groupMembers
		//even though childObs aren't directly associated to enc
		assertNotNull("save succeeds without error", es.saveEncounter(enc));
		assertTrue("enc save succeeds", enc.getId() > 0);
		
		assertNotNull("obs save succeeds", groupObs.getObsId());
		assertEquals("encounter id propogated", groupObs.getEncounter().getId(), enc.getId());
		assertEquals("encounter time propogated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
		assertNotNull("obs save succeeds", childObs.getObsId());
		assertEquals("encounter id propogated", childObs.getEncounter().getId(), enc.getId());
		assertEquals("encounter time propogated", childObs.getObsDatetime(), enc.getEncounterDatetime());
		
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 0c11e87..8bc2553 100644
--- a/old_product.java
+++ b/new_product.java
@@ -40,7 +40,7 @@
 			
 			Date newDate = encounter.getEncounterDatetime();
 			Location newLocation = encounter.getLocation();
-			for (Obs obs : encounter.getAllObs(true)) {
+			for (Obs obs : encounter.getAllFlattenObs(true)) {
 				// if the date was changed
 				if (OpenmrsUtil.compare(originalDate, newDate) != 0
 				        && OpenmrsUtil.compare(obs.getObsDatetime(), originalDate) == 0) {

----------------------------------------------------------------
diff test

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 8bc2553..c146397 100644
--- a/old_product.java
+++ b/new_product.java
@@ -40,7 +40,7 @@
 			
 			Date newDate = encounter.getEncounterDatetime();
 			Location newLocation = encounter.getLocation();
-			for (Obs obs : encounter.getAllFlattenObs(true)) {
+			for (Obs obs : encounter.getAllFlattenedObs(true)) {
 				// if the date was changed
 				if (OpenmrsUtil.compare(originalDate, newDate) != 0
 				        && OpenmrsUtil.compare(obs.getObsDatetime(), originalDate) == 0) {

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index e4c8566..4bf523e 100644
--- a/old_test.java
+++ b/new_test.java
@@ -32,7 +32,7 @@
 		assertNotNull("save succeeds without error", es.saveEncounter(enc));
 		Date encounterDatetime = DateUtil.truncateToSeconds(enc.getEncounterDatetime());
 
-		for (Obs o : enc.getAllFlattenObs(false)) {
+		for (Obs o : enc.getAllFlattenedObs(false)) {
 			assertEquals("encounter datetime propagated", DateUtil.truncateToSeconds(o.getObsDatetime()), encounterDatetime);
 		}
 		

----------------------------------------------------------------
coverage: 0.9395973154362416
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
<new_test>
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllFlattenedObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
</new_test>
----------------------------------------------------------------
generated test
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllFlattenedObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,31 +1,36 @@

 @Test
-	public void saveEncounter_shouldCascadeSaveToContainedObs() {
-		EncounterService es = Context.getEncounterService();
-		// First, create a new Encounter
-		Encounter enc = buildEncounter();
-		
-		//add an obs to the encounter
-		Obs groupObs = new Obs();
-		Concept c = Context.getConceptService().getConcept(1);
-		groupObs.setConcept(c);
-		
-		// add an obs to the group
-		Obs childObs = new Obs();
-		childObs.setConcept(c);
-		childObs.setValueNumeric(50d);
-		groupObs.addGroupMember(childObs);
-		enc.addObs(groupObs);
-		
-		//confirm that save and new enc id are cascaded to obs groupMembers
-		//even though childObs aren't directly associated to enc
-		assertNotNull("save succeeds without error", es.saveEncounter(enc));
-		assertTrue("enc save succeeds", enc.getId() > 0);
-		
-		assertNotNull("obs save succeeds", groupObs.getObsId());
-		assertEquals("encounter id propogated", groupObs.getEncounter().getId(), enc.getId());
-		assertEquals("encounter time propogated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
-		assertNotNull("obs save succeeds", childObs.getObsId());
-		assertEquals("encounter id propogated", childObs.getEncounter().getId(), enc.getId());
-		assertEquals("encounter time propogated", childObs.getObsDatetime(), enc.getEncounterDatetime());
-		
-	}
+public void saveEncounter_shouldCascadeSaveToContainedObs() {
+    EncounterService es = Context.getEncounterService();
+    // First, create a new Encounter
+    Encounter enc = buildEncounter();
+    
+    //add an obs to the encounter
+    Obs groupObs = new Obs();
+    Concept c = Context.getConceptService().getConcept(1);
+    groupObs.setConcept(c);
+    
+    // add an obs to the group
+    Obs childObs = new Obs();
+    childObs.setConcept(c);
+    childObs.setValueNumeric(50d);
+    groupObs.addGroupMember(childObs);
+    enc.addObs(groupObs);
+    
+    //confirm that save and new enc id are cascaded to obs groupMembers
+    //even though childObs aren't directly associated to enc
+    assertNotNull("save succeeds without error", es.saveEncounter(enc));
+    assertTrue("enc save succeeds", enc.getId() > 0);
+    
+    assertNotNull("obs save succeeds", groupObs.getObsId());
+    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
+    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
+    assertNotNull("obs save succeeds", childObs.getObsId());
+    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
+    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
+    
+    // Verify the new method is used and works correctly
+    for (Obs o : enc.getAllFlattenedObs(true)) {
+        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
+        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
+    }
+}

----------------------------------------------------------------
state: 0
----------------------------------------------------------------
description: 编译报错
----------------------------------------------------------------
message
COMPILATION ERROR : 
\1\openmrs-core\api\src\test\java\org\openmrs\api\EncounterServiceTest.java:[337,20] 错误: 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:testCompile (default-testCompile) on project openmrs-api: Compilation failure
\1\openmrs-core\api\src\test\java\org\openmrs\api\EncounterServiceTest.java:[337,20] 错误: 找不到符号
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
now time: 2
----------------------------------------------------------------
llm output
<new_test>
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllFlattenedObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
</new_test>
----------------------------------------------------------------
generated test
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllFlattenedObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
----------------------------------------------------------------
last generated diff test


----------------------------------------------------------------
state: 0
----------------------------------------------------------------
description: 编译报错
----------------------------------------------------------------
message
COMPILATION ERROR : 
\1\openmrs-core\api\src\test\java\org\openmrs\api\EncounterServiceTest.java:[337,20] 错误: 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:testCompile (default-testCompile) on project openmrs-api: Compilation failure
\1\openmrs-core\api\src\test\java\org\openmrs\api\EncounterServiceTest.java:[337,20] 错误: 找不到符号
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
now time: 3
----------------------------------------------------------------
llm output
<new_test>
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
</new_test>
----------------------------------------------------------------
generated test
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -29,7 +29,7 @@

     assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
     
     // Verify the new method is used and works correctly
-    for (Obs o : enc.getAllFlattenedObs(true)) {
+    for (Obs o : enc.getAllObs(true)) {
         assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
         assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
     }

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.9395973154362416
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 3
----------------------------------------------------------------
generated test
@Test
public void saveEncounter_shouldCascadeSaveToContainedObs() {
    EncounterService es = Context.getEncounterService();
    // First, create a new Encounter
    Encounter enc = buildEncounter();
    
    //add an obs to the encounter
    Obs groupObs = new Obs();
    Concept c = Context.getConceptService().getConcept(1);
    groupObs.setConcept(c);
    
    // add an obs to the group
    Obs childObs = new Obs();
    childObs.setConcept(c);
    childObs.setValueNumeric(50d);
    groupObs.addGroupMember(childObs);
    enc.addObs(groupObs);
    
    //confirm that save and new enc id are cascaded to obs groupMembers
    //even though childObs aren't directly associated to enc
    assertNotNull("save succeeds without error", es.saveEncounter(enc));
    assertTrue("enc save succeeds", enc.getId() > 0);
    
    assertNotNull("obs save succeeds", groupObs.getObsId());
    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
    assertNotNull("obs save succeeds", childObs.getObsId());
    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
    
    // Verify the new method is used and works correctly
    for (Obs o : enc.getAllObs(true)) {
        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
    }
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,31 +1,36 @@

 @Test
-	public void saveEncounter_shouldCascadeSaveToContainedObs() {
-		EncounterService es = Context.getEncounterService();
-		// First, create a new Encounter
-		Encounter enc = buildEncounter();
-		
-		//add an obs to the encounter
-		Obs groupObs = new Obs();
-		Concept c = Context.getConceptService().getConcept(1);
-		groupObs.setConcept(c);
-		
-		// add an obs to the group
-		Obs childObs = new Obs();
-		childObs.setConcept(c);
-		childObs.setValueNumeric(50d);
-		groupObs.addGroupMember(childObs);
-		enc.addObs(groupObs);
-		
-		//confirm that save and new enc id are cascaded to obs groupMembers
-		//even though childObs aren't directly associated to enc
-		assertNotNull("save succeeds without error", es.saveEncounter(enc));
-		assertTrue("enc save succeeds", enc.getId() > 0);
-		
-		assertNotNull("obs save succeeds", groupObs.getObsId());
-		assertEquals("encounter id propogated", groupObs.getEncounter().getId(), enc.getId());
-		assertEquals("encounter time propogated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
-		assertNotNull("obs save succeeds", childObs.getObsId());
-		assertEquals("encounter id propogated", childObs.getEncounter().getId(), enc.getId());
-		assertEquals("encounter time propogated", childObs.getObsDatetime(), enc.getEncounterDatetime());
-		
-	}
+public void saveEncounter_shouldCascadeSaveToContainedObs() {
+    EncounterService es = Context.getEncounterService();
+    // First, create a new Encounter
+    Encounter enc = buildEncounter();
+    
+    //add an obs to the encounter
+    Obs groupObs = new Obs();
+    Concept c = Context.getConceptService().getConcept(1);
+    groupObs.setConcept(c);
+    
+    // add an obs to the group
+    Obs childObs = new Obs();
+    childObs.setConcept(c);
+    childObs.setValueNumeric(50d);
+    groupObs.addGroupMember(childObs);
+    enc.addObs(groupObs);
+    
+    //confirm that save and new enc id are cascaded to obs groupMembers
+    //even though childObs aren't directly associated to enc
+    assertNotNull("save succeeds without error", es.saveEncounter(enc));
+    assertTrue("enc save succeeds", enc.getId() > 0);
+    
+    assertNotNull("obs save succeeds", groupObs.getObsId());
+    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
+    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
+    assertNotNull("obs save succeeds", childObs.getObsId());
+    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
+    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
+    
+    // Verify the new method is used and works correctly
+    for (Obs o : enc.getAllObs(true)) {
+        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
+        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
+    }
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,36 +1,31 @@

 @Test
-public void saveEncounter_shouldCascadeSaveToContainedObs() {
-    EncounterService es = Context.getEncounterService();
-    // First, create a new Encounter
-    Encounter enc = buildEncounter();
-    
-    //add an obs to the encounter
-    Obs groupObs = new Obs();
-    Concept c = Context.getConceptService().getConcept(1);
-    groupObs.setConcept(c);
-    
-    // add an obs to the group
-    Obs childObs = new Obs();
-    childObs.setConcept(c);
-    childObs.setValueNumeric(50d);
-    groupObs.addGroupMember(childObs);
-    enc.addObs(groupObs);
-    
-    //confirm that save and new enc id are cascaded to obs groupMembers
-    //even though childObs aren't directly associated to enc
-    assertNotNull("save succeeds without error", es.saveEncounter(enc));
-    assertTrue("enc save succeeds", enc.getId() > 0);
-    
-    assertNotNull("obs save succeeds", groupObs.getObsId());
-    assertEquals("encounter id propagated", groupObs.getEncounter().getId(), enc.getId());
-    assertEquals("encounter time propagated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
-    assertNotNull("obs save succeeds", childObs.getObsId());
-    assertEquals("encounter id propagated", childObs.getEncounter().getId(), enc.getId());
-    assertEquals("encounter time propagated", childObs.getObsDatetime(), enc.getEncounterDatetime());
-    
-    // Verify the new method is used and works correctly
-    for (Obs o : enc.getAllObs(true)) {
-        assertEquals("encounter id propagated", o.getEncounter().getId(), enc.getId());
-        assertEquals("encounter time propagated", o.getObsDatetime(), enc.getEncounterDatetime());
-    }
-}
+	public void saveEncounter_shouldCascadeSaveToContainedObs() {
+		EncounterService es = Context.getEncounterService();
+		// First, create a new Encounter
+		Encounter enc = buildEncounter();
+		
+		//add an obs to the encounter
+		Obs groupObs = new Obs();
+		Concept c = Context.getConceptService().getConcept(1);
+		groupObs.setConcept(c);
+		
+		// add an obs to the group
+		Obs childObs = new Obs();
+		childObs.setConcept(c);
+		childObs.setValueNumeric(50d);
+		groupObs.addGroupMember(childObs);
+		enc.addObs(groupObs);
+		
+		//confirm that save and new enc id are cascaded to obs groupMembers
+		//even though childObs aren't directly associated to enc
+		assertNotNull("save succeeds without error", es.saveEncounter(enc));
+		assertTrue("enc save succeeds", enc.getId() > 0);
+		
+		assertNotNull("obs save succeeds", groupObs.getObsId());
+		assertEquals("encounter id propogated", groupObs.getEncounter().getId(), enc.getId());
+		assertEquals("encounter time propogated", groupObs.getObsDatetime(), enc.getEncounterDatetime());
+		assertNotNull("obs save succeeds", childObs.getObsId());
+		assertEquals("encounter id propogated", childObs.getEncounter().getId(), enc.getId());
+		assertEquals("encounter time propogated", childObs.getObsDatetime(), enc.getEncounterDatetime());
+		
+	}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.9395973154362416
--------------------------------------------------------------------------------------------------------------------------------
