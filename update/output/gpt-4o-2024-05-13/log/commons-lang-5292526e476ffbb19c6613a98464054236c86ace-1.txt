--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.9901477832512315
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.9901477832512315
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
        StrLookup<?> resolver = getVariableResolver();
        if (resolver == null) {
            return null;
        }
        return resolver.lookup(variableName);
    }
----------------------------------------------------------------
old test
@Test
    public void testResolveVariable() {
        final StrBuilder builder = new StrBuilder("Hi ${name}!");
        Map<String, String> map = new HashMap<String, String>();
        map.put("name", "commons");
        StrSubstitutor sub = new StrSubstitutor(map) {
            @Override
            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
                assertEquals("name", variableName);
                assertSame(builder, buf);
                assertEquals(3, startPos);
                assertEquals(10, endPos);
                return "jakarta";
            }
        };
        sub.replaceIn(builder);
        assertEquals("Hi jakarta!", builder.toString());
    }
----------------------------------------------------------------
new product
protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
        final StrLookup<?> resolver = getVariableResolver();
        if (resolver == null) {
            return null;
        }
        return resolver.lookup(variableName);
    }
----------------------------------------------------------------
new test
@Test
    public void testResolveVariable() {
        final StrBuilder builder = new StrBuilder("Hi ${name}!");
        final Map<String, String> map = new HashMap<String, String>();
        map.put("name", "commons");
        final StrSubstitutor sub = new StrSubstitutor(map) {
            @Override
            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
                assertEquals("name", variableName);
                assertSame(builder, buf);
                assertEquals(3, startPos);
                assertEquals(10, endPos);
                return "jakarta";
            }
        };
        sub.replaceIn(builder);
        assertEquals("Hi jakarta!", builder.toString());
    }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 564238d..cc9a62f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
 protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
-        StrLookup<?> resolver = getVariableResolver();
+        final StrLookup<?> resolver = getVariableResolver();
         if (resolver == null) {
             return null;
         }

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index cca6412..b2d50ec 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,9 +1,9 @@
 @Test
     public void testResolveVariable() {
         final StrBuilder builder = new StrBuilder("Hi ${name}!");
-        Map<String, String> map = new HashMap<String, String>();
+        final Map<String, String> map = new HashMap<String, String>();
         map.put("name", "commons");
-        StrSubstitutor sub = new StrSubstitutor(map) {
+        final StrSubstitutor sub = new StrSubstitutor(map) {
             @Override
             protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
                 assertEquals("name", variableName);

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 8aca6ff..3db3c37 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,5 @@
-public final String toString() {
+@Override
+    public final String toString() {
         if (!initialized) {
             return null;
         }

----------------------------------------------------------------
sample diff test

----------------------------------------------------------------
coverage
0.9901477832512315
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
public void testResolveVariable() {
    final StrBuilder builder = new StrBuilder("Hi ${name}!");
    Map<String, String> map = new HashMap<String, String>();
    map.put("name", "commons");
    StrSubstitutor sub = new StrSubstitutor(map) {
        @Override
        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
            final StrLookup<?> resolver = getVariableResolver();
            assertEquals("name", variableName);
            assertSame(builder, buf);
            assertEquals(3, startPos);
            assertEquals(10, endPos);
            return "jakarta";
        }
    };
    sub.replaceIn(builder);
    assertEquals("Hi jakarta!", builder.toString());
}
</new_test>
----------------------------------------------------------------
测试代码

@Test
public void testResolveVariable() {
    final StrBuilder builder = new StrBuilder("Hi ${name}!");
    Map<String, String> map = new HashMap<String, String>();
    map.put("name", "commons");
    StrSubstitutor sub = new StrSubstitutor(map) {
        @Override
        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
            final StrLookup<?> resolver = getVariableResolver();
            assertEquals("name", variableName);
            assertSame(builder, buf);
            assertEquals(3, startPos);
            assertEquals(10, endPos);
            return "jakarta";
        }
    };
    sub.replaceIn(builder);
    assertEquals("Hi jakarta!", builder.toString());
}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,18 +1,21 @@

+
 @Test
-    public void testResolveVariable() {
-        final StrBuilder builder = new StrBuilder("Hi ${name}!");
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("name", "commons");
-        StrSubstitutor sub = new StrSubstitutor(map) {
-            @Override
-            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
-                assertEquals("name", variableName);
-                assertSame(builder, buf);
-                assertEquals(3, startPos);
-                assertEquals(10, endPos);
-                return "jakarta";
-            }
-        };
-        sub.replaceIn(builder);
-        assertEquals("Hi jakarta!", builder.toString());
-    }
+public void testResolveVariable() {
+    final StrBuilder builder = new StrBuilder("Hi ${name}!");
+    Map<String, String> map = new HashMap<String, String>();
+    map.put("name", "commons");
+    StrSubstitutor sub = new StrSubstitutor(map) {
+        @Override
+        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
+            final StrLookup<?> resolver = getVariableResolver();
+            assertEquals("name", variableName);
+            assertSame(builder, buf);
+            assertEquals(3, startPos);
+            assertEquals(10, endPos);
+            return "jakarta";
+        }
+    };
+    sub.replaceIn(builder);
+    assertEquals("Hi jakarta!", builder.toString());
+}
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.9901477832512315
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
public void testResolveVariable() {
    final StrBuilder builder = new StrBuilder("Hi ${name}!");
    Map<String, String> map = new HashMap<String, String>();
    map.put("name", "commons");
    StrSubstitutor sub = new StrSubstitutor(map) {
        @Override
        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
            final StrLookup<?> resolver = getVariableResolver();
            assertEquals("name", variableName);
            assertSame(builder, buf);
            assertEquals(3, startPos);
            assertEquals(10, endPos);
            return "jakarta";
        }
    };
    sub.replaceIn(builder);
    assertEquals("Hi jakarta!", builder.toString());
}

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,18 +1,21 @@

+
 @Test
-    public void testResolveVariable() {
-        final StrBuilder builder = new StrBuilder("Hi ${name}!");
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("name", "commons");
-        StrSubstitutor sub = new StrSubstitutor(map) {
-            @Override
-            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
-                assertEquals("name", variableName);
-                assertSame(builder, buf);
-                assertEquals(3, startPos);
-                assertEquals(10, endPos);
-                return "jakarta";
-            }
-        };
-        sub.replaceIn(builder);
-        assertEquals("Hi jakarta!", builder.toString());
-    }
+public void testResolveVariable() {
+    final StrBuilder builder = new StrBuilder("Hi ${name}!");
+    Map<String, String> map = new HashMap<String, String>();
+    map.put("name", "commons");
+    StrSubstitutor sub = new StrSubstitutor(map) {
+        @Override
+        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
+            final StrLookup<?> resolver = getVariableResolver();
+            assertEquals("name", variableName);
+            assertSame(builder, buf);
+            assertEquals(3, startPos);
+            assertEquals(10, endPos);
+            return "jakarta";
+        }
+    };
+    sub.replaceIn(builder);
+    assertEquals("Hi jakarta!", builder.toString());
+}
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,21 +1,18 @@

-
 @Test
-public void testResolveVariable() {
-    final StrBuilder builder = new StrBuilder("Hi ${name}!");
-    Map<String, String> map = new HashMap<String, String>();
-    map.put("name", "commons");
-    StrSubstitutor sub = new StrSubstitutor(map) {
-        @Override
-        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
-            final StrLookup<?> resolver = getVariableResolver();
-            assertEquals("name", variableName);
-            assertSame(builder, buf);
-            assertEquals(3, startPos);
-            assertEquals(10, endPos);
-            return "jakarta";
-        }
-    };
-    sub.replaceIn(builder);
-    assertEquals("Hi jakarta!", builder.toString());
-}
-
+    public void testResolveVariable() {
+        final StrBuilder builder = new StrBuilder("Hi ${name}!");
+        final Map<String, String> map = new HashMap<String, String>();
+        map.put("name", "commons");
+        final StrSubstitutor sub = new StrSubstitutor(map) {
+            @Override
+            protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {
+                assertEquals("name", variableName);
+                assertSame(builder, buf);
+                assertEquals(3, startPos);
+                assertEquals(10, endPos);
+                return "jakarta";
+            }
+        };
+        sub.replaceIn(builder);
+        assertEquals("Hi jakarta!", builder.toString());
+    }

--------------------------------------------------------------------------------------------------------------------------------
