--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：1.0
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：1.0
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords, String wrapOn) {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = System.lineSeparator();
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        if (StringUtils.isBlank(wrapOn)) {
            wrapOn = " ";
        }
        final Pattern patternToWrapOn = Pattern.compile(wrapOn);
        final int inputLineLength = str.length();
        int offset = 0;
        final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);

        while (offset < inputLineLength) {
            int spaceToWrapAt = -1;
            Matcher matcher = patternToWrapOn.matcher(str.substring(offset, Math.min(offset + wrapLength + 1, inputLineLength)));
            if (matcher.find()) {
                if (matcher.start() == 0) {
                    offset += matcher.end();
                    continue;
                }
                spaceToWrapAt = matcher.start() + offset;
            }

            // only last line without leading spaces is left
            if(inputLineLength - offset <= wrapLength) {
                break;
            }

            while(matcher.find()){
                spaceToWrapAt = matcher.start() + offset;
            }

            if (spaceToWrapAt >= offset) {
                // normal case
                wrappedLine.append(str, offset, spaceToWrapAt);
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;

            } else {
                // really long word or URL
                if (wrapLongWords) {
                    // wrap really long word one line at a time
                    wrappedLine.append(str, offset, wrapLength + offset);
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    // do not wrap really long word, just extend beyond limit
                    matcher = patternToWrapOn.matcher(str.substring(offset + wrapLength));
                    if (matcher.find()) {
                        spaceToWrapAt = matcher.start() + offset + wrapLength;
                    }

                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str, offset, spaceToWrapAt);
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str, offset, str.length());
                        offset = inputLineLength;
                    }
                }
            }
        }

        // Whatever is left in line is short enough to just pass through
        wrappedLine.append(str, offset, str.length());

        return wrappedLine.toString();
    }
----------------------------------------------------------------
old test
@Test
    public void testWrap_StringInt() {
        assertNull(WordUtils.wrap(null, 20));
        assertNull(WordUtils.wrap(null, -1));

        assertEquals("", WordUtils.wrap("", 20));
        assertEquals("", WordUtils.wrap("", -1));

        // normal
        final String systemNewLine = System.lineSeparator();
        String input = "Here is one line of text that is going to be wrapped after 20 columns.";
        String expected = "Here is one line of" + systemNewLine + "text that is going"
            + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // long word at end
        input = "Click here to jump to the commons website - http://commons.apache.org";
        expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
            + "website -" + systemNewLine + "http://commons.apache.org";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // long word in middle
        input = "Click here, http://commons.apache.org, to jump to the commons website";
        expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
            + "to jump to the" + systemNewLine + "commons website";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // leading spaces on a new line are stripped
        // trailing spaces are not stripped
        input = "word1             word2                        word3";
        expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
        assertEquals(expected, WordUtils.wrap(input, 7));
    }
----------------------------------------------------------------
new product
public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords, String wrapOn) {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = System.lineSeparator();
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        if (StringUtils.isBlank(wrapOn)) {
            wrapOn = " ";
        }
        final Pattern patternToWrapOn = Pattern.compile(wrapOn);
        final int inputLineLength = str.length();
        int offset = 0;
        final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);

        while (offset < inputLineLength) {
            int spaceToWrapAt = -1;
            Matcher matcher = patternToWrapOn.matcher(
                str.substring(offset, Math.min((int)Math.min(Integer.MAX_VALUE, offset + wrapLength + 1L), inputLineLength)));
            if (matcher.find()) {
                if (matcher.start() == 0) {
                    offset += matcher.end();
                    continue;
                }
                spaceToWrapAt = matcher.start() + offset;
            }

            // only last line without leading spaces is left
            if(inputLineLength - offset <= wrapLength) {
                break;
            }

            while(matcher.find()){
                spaceToWrapAt = matcher.start() + offset;
            }

            if (spaceToWrapAt >= offset) {
                // normal case
                wrappedLine.append(str, offset, spaceToWrapAt);
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;

            } else {
                // really long word or URL
                if (wrapLongWords) {
                    // wrap really long word one line at a time
                    wrappedLine.append(str, offset, wrapLength + offset);
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    // do not wrap really long word, just extend beyond limit
                    matcher = patternToWrapOn.matcher(str.substring(offset + wrapLength));
                    if (matcher.find()) {
                        spaceToWrapAt = matcher.start() + offset + wrapLength;
                    }

                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str, offset, spaceToWrapAt);
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str, offset, str.length());
                        offset = inputLineLength;
                    }
                }
            }
        }

        // Whatever is left in line is short enough to just pass through
        wrappedLine.append(str, offset, str.length());

        return wrappedLine.toString();
    }
----------------------------------------------------------------
new test
@Test
    public void testWrap_StringInt() {
        assertNull(WordUtils.wrap(null, 20));
        assertNull(WordUtils.wrap(null, -1));

        assertEquals("", WordUtils.wrap("", 20));
        assertEquals("", WordUtils.wrap("", -1));

        // normal
        final String systemNewLine = System.lineSeparator();
        String input = "Here is one line of text that is going to be wrapped after 20 columns.";
        String expected = "Here is one line of" + systemNewLine + "text that is going"
            + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // long word at end
        input = "Click here to jump to the commons website - https://commons.apache.org";
        expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
            + "website -" + systemNewLine + "https://commons.apache.org";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // long word in middle
        input = "Click here, https://commons.apache.org, to jump to the commons website";
        expected = "Click here," + systemNewLine + "https://commons.apache.org," + systemNewLine
            + "to jump to the" + systemNewLine + "commons website";
        assertEquals(expected, WordUtils.wrap(input, 20));

        // leading spaces on a new line are stripped
        // trailing spaces are not stripped
        input = "word1             word2                        word3";
        expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
        assertEquals(expected, WordUtils.wrap(input, 7));
    }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 66c5133..b50caa0 100644
--- a/old_product.java
+++ b/new_product.java
@@ -18,7 +18,8 @@ public static String wrap(final String str, int wrapLength, String newLineStr, f
 
         while (offset < inputLineLength) {
             int spaceToWrapAt = -1;
-            Matcher matcher = patternToWrapOn.matcher(str.substring(offset, Math.min(offset + wrapLength + 1, inputLineLength)));
+            Matcher matcher = patternToWrapOn.matcher(
+                str.substring(offset, Math.min((int)Math.min(Integer.MAX_VALUE, offset + wrapLength + 1L), inputLineLength)));
             if (matcher.find()) {
                 if (matcher.start() == 0) {
                     offset += matcher.end();

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 84bc30b..f74d828 100644
--- a/old_test.java
+++ b/new_test.java
@@ -14,14 +14,14 @@
         assertEquals(expected, WordUtils.wrap(input, 20));
 
         // long word at end
-        input = "Click here to jump to the commons website - http://commons.apache.org";
+        input = "Click here to jump to the commons website - https://commons.apache.org";
         expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
-            + "website -" + systemNewLine + "http://commons.apache.org";
+            + "website -" + systemNewLine + "https://commons.apache.org";
         assertEquals(expected, WordUtils.wrap(input, 20));
 
         // long word in middle
-        input = "Click here, http://commons.apache.org, to jump to the commons website";
-        expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
+        input = "Click here, https://commons.apache.org, to jump to the commons website";
+        expected = "Click here," + systemNewLine + "https://commons.apache.org," + systemNewLine
             + "to jump to the" + systemNewLine + "commons website";
         assertEquals(expected, WordUtils.wrap(input, 20));
 

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 25acd60..dc4032f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -24,7 +24,7 @@ public static String wrap(final String str, int wrapLength, String newLineStr, f
                     offset += matcher.end();
                     continue;
                 }else {
-                    spaceToWrapAt = matcher.start();
+                    spaceToWrapAt = matcher.start() + offset;
                 }
             }
 

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 241c937..3c82116 100644
--- a/old_test.java
+++ b/new_test.java
@@ -7,7 +7,7 @@
         assertEquals("", WordUtils.wrap("", -1));
         
         // normal
-        final String systemNewLine = SystemUtils.LINE_SEPARATOR;
+        final String systemNewLine = System.lineSeparator();
         String input = "Here is one line of text that is going to be wrapped after 20 columns.";
         String expected = "Here is one line of" + systemNewLine + "text that is going" 
             + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";

----------------------------------------------------------------
coverage
1.0
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
public void testWrap_StringInt() {
    assertNull(WordUtils.wrap(null, 20));
    assertNull(WordUtils.wrap(null, -1));

    assertEquals("", WordUtils.wrap("", 20));
    assertEquals("", WordUtils.wrap("", -1));

    // normal
    final String systemNewLine = System.lineSeparator();
    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
    String expected = "Here is one line of" + systemNewLine + "text that is going"
        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word at end
    input = "Click here to jump to the commons website - http://commons.apache.org";
    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
        + "website -" + systemNewLine + "http://commons.apache.org";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word in middle
    input = "Click here, http://commons.apache.org, to jump to the commons website";
    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
        + "to jump to the" + systemNewLine + "commons website";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // leading spaces on a new line are stripped
    // trailing spaces are not stripped
    input = "word1             word2                        word3";
    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
    assertEquals(expected, WordUtils.wrap(input, 7));
}
</new_test>
----------------------------------------------------------------
测试代码

@Test
public void testWrap_StringInt() {
    assertNull(WordUtils.wrap(null, 20));
    assertNull(WordUtils.wrap(null, -1));

    assertEquals("", WordUtils.wrap("", 20));
    assertEquals("", WordUtils.wrap("", -1));

    // normal
    final String systemNewLine = System.lineSeparator();
    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
    String expected = "Here is one line of" + systemNewLine + "text that is going"
        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word at end
    input = "Click here to jump to the commons website - http://commons.apache.org";
    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
        + "website -" + systemNewLine + "http://commons.apache.org";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word in middle
    input = "Click here, http://commons.apache.org, to jump to the commons website";
    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
        + "to jump to the" + systemNewLine + "commons website";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // leading spaces on a new line are stripped
    // trailing spaces are not stripped
    input = "word1             word2                        word3";
    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
    assertEquals(expected, WordUtils.wrap(input, 7));
}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,33 +1,35 @@

+
 @Test
-    public void testWrap_StringInt() {
-        assertNull(WordUtils.wrap(null, 20));
-        assertNull(WordUtils.wrap(null, -1));
+public void testWrap_StringInt() {
+    assertNull(WordUtils.wrap(null, 20));
+    assertNull(WordUtils.wrap(null, -1));
 
-        assertEquals("", WordUtils.wrap("", 20));
-        assertEquals("", WordUtils.wrap("", -1));
+    assertEquals("", WordUtils.wrap("", 20));
+    assertEquals("", WordUtils.wrap("", -1));
 
-        // normal
-        final String systemNewLine = System.lineSeparator();
-        String input = "Here is one line of text that is going to be wrapped after 20 columns.";
-        String expected = "Here is one line of" + systemNewLine + "text that is going"
-            + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // normal
+    final String systemNewLine = System.lineSeparator();
+    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
+    String expected = "Here is one line of" + systemNewLine + "text that is going"
+        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // long word at end
-        input = "Click here to jump to the commons website - http://commons.apache.org";
-        expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
-            + "website -" + systemNewLine + "http://commons.apache.org";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // long word at end
+    input = "Click here to jump to the commons website - http://commons.apache.org";
+    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
+        + "website -" + systemNewLine + "http://commons.apache.org";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // long word in middle
-        input = "Click here, http://commons.apache.org, to jump to the commons website";
-        expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
-            + "to jump to the" + systemNewLine + "commons website";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // long word in middle
+    input = "Click here, http://commons.apache.org, to jump to the commons website";
+    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
+        + "to jump to the" + systemNewLine + "commons website";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // leading spaces on a new line are stripped
-        // trailing spaces are not stripped
-        input = "word1             word2                        word3";
-        expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
-        assertEquals(expected, WordUtils.wrap(input, 7));
-    }
+    // leading spaces on a new line are stripped
+    // trailing spaces are not stripped
+    input = "word1             word2                        word3";
+    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
+    assertEquals(expected, WordUtils.wrap(input, 7));
+}
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：1.0
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
public void testWrap_StringInt() {
    assertNull(WordUtils.wrap(null, 20));
    assertNull(WordUtils.wrap(null, -1));

    assertEquals("", WordUtils.wrap("", 20));
    assertEquals("", WordUtils.wrap("", -1));

    // normal
    final String systemNewLine = System.lineSeparator();
    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
    String expected = "Here is one line of" + systemNewLine + "text that is going"
        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word at end
    input = "Click here to jump to the commons website - http://commons.apache.org";
    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
        + "website -" + systemNewLine + "http://commons.apache.org";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // long word in middle
    input = "Click here, http://commons.apache.org, to jump to the commons website";
    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
        + "to jump to the" + systemNewLine + "commons website";
    assertEquals(expected, WordUtils.wrap(input, 20));

    // leading spaces on a new line are stripped
    // trailing spaces are not stripped
    input = "word1             word2                        word3";
    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
    assertEquals(expected, WordUtils.wrap(input, 7));
}

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,33 +1,35 @@

+
 @Test
-    public void testWrap_StringInt() {
-        assertNull(WordUtils.wrap(null, 20));
-        assertNull(WordUtils.wrap(null, -1));
+public void testWrap_StringInt() {
+    assertNull(WordUtils.wrap(null, 20));
+    assertNull(WordUtils.wrap(null, -1));
 
-        assertEquals("", WordUtils.wrap("", 20));
-        assertEquals("", WordUtils.wrap("", -1));
+    assertEquals("", WordUtils.wrap("", 20));
+    assertEquals("", WordUtils.wrap("", -1));
 
-        // normal
-        final String systemNewLine = System.lineSeparator();
-        String input = "Here is one line of text that is going to be wrapped after 20 columns.";
-        String expected = "Here is one line of" + systemNewLine + "text that is going"
-            + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // normal
+    final String systemNewLine = System.lineSeparator();
+    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
+    String expected = "Here is one line of" + systemNewLine + "text that is going"
+        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // long word at end
-        input = "Click here to jump to the commons website - http://commons.apache.org";
-        expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
-            + "website -" + systemNewLine + "http://commons.apache.org";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // long word at end
+    input = "Click here to jump to the commons website - http://commons.apache.org";
+    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
+        + "website -" + systemNewLine + "http://commons.apache.org";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // long word in middle
-        input = "Click here, http://commons.apache.org, to jump to the commons website";
-        expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
-            + "to jump to the" + systemNewLine + "commons website";
-        assertEquals(expected, WordUtils.wrap(input, 20));
+    // long word in middle
+    input = "Click here, http://commons.apache.org, to jump to the commons website";
+    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
+        + "to jump to the" + systemNewLine + "commons website";
+    assertEquals(expected, WordUtils.wrap(input, 20));
 
-        // leading spaces on a new line are stripped
-        // trailing spaces are not stripped
-        input = "word1             word2                        word3";
-        expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
-        assertEquals(expected, WordUtils.wrap(input, 7));
-    }
+    // leading spaces on a new line are stripped
+    // trailing spaces are not stripped
+    input = "word1             word2                        word3";
+    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
+    assertEquals(expected, WordUtils.wrap(input, 7));
+}
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,35 +1,33 @@

+@Test
+    public void testWrap_StringInt() {
+        assertNull(WordUtils.wrap(null, 20));
+        assertNull(WordUtils.wrap(null, -1));
 
-@Test
-public void testWrap_StringInt() {
-    assertNull(WordUtils.wrap(null, 20));
-    assertNull(WordUtils.wrap(null, -1));
+        assertEquals("", WordUtils.wrap("", 20));
+        assertEquals("", WordUtils.wrap("", -1));
 
-    assertEquals("", WordUtils.wrap("", 20));
-    assertEquals("", WordUtils.wrap("", -1));
+        // normal
+        final String systemNewLine = System.lineSeparator();
+        String input = "Here is one line of text that is going to be wrapped after 20 columns.";
+        String expected = "Here is one line of" + systemNewLine + "text that is going"
+            + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
+        assertEquals(expected, WordUtils.wrap(input, 20));
 
-    // normal
-    final String systemNewLine = System.lineSeparator();
-    String input = "Here is one line of text that is going to be wrapped after 20 columns.";
-    String expected = "Here is one line of" + systemNewLine + "text that is going"
-        + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns.";
-    assertEquals(expected, WordUtils.wrap(input, 20));
+        // long word at end
+        input = "Click here to jump to the commons website - https://commons.apache.org";
+        expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
+            + "website -" + systemNewLine + "https://commons.apache.org";
+        assertEquals(expected, WordUtils.wrap(input, 20));
 
-    // long word at end
-    input = "Click here to jump to the commons website - http://commons.apache.org";
-    expected = "Click here to jump" + systemNewLine + "to the commons" + systemNewLine
-        + "website -" + systemNewLine + "http://commons.apache.org";
-    assertEquals(expected, WordUtils.wrap(input, 20));
+        // long word in middle
+        input = "Click here, https://commons.apache.org, to jump to the commons website";
+        expected = "Click here," + systemNewLine + "https://commons.apache.org," + systemNewLine
+            + "to jump to the" + systemNewLine + "commons website";
+        assertEquals(expected, WordUtils.wrap(input, 20));
 
-    // long word in middle
-    input = "Click here, http://commons.apache.org, to jump to the commons website";
-    expected = "Click here," + systemNewLine + "http://commons.apache.org," + systemNewLine
-        + "to jump to the" + systemNewLine + "commons website";
-    assertEquals(expected, WordUtils.wrap(input, 20));
-
-    // leading spaces on a new line are stripped
-    // trailing spaces are not stripped
-    input = "word1             word2                        word3";
-    expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
-    assertEquals(expected, WordUtils.wrap(input, 7));
-}
-
+        // leading spaces on a new line are stripped
+        // trailing spaces are not stripped
+        input = "word1             word2                        word3";
+        expected = "word1  " + systemNewLine + "word2  " + systemNewLine + "word3";
+        assertEquals(expected, WordUtils.wrap(input, 7));
+    }

--------------------------------------------------------------------------------------------------------------------------------
