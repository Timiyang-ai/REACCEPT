--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.6545454545454545
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 3
----------------------------------------------------------------
old description: 测试通过，覆盖率：0.6545454545454545
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
@Override
	@Transactional(readOnly = true)
	public void checkPatientIdentifiers(Patient patient) throws PatientIdentifierException {
		// check patient has at least one identifier
		if (!patient.isVoided() && patient.getActiveIdentifiers().isEmpty()) {
			throw new InsufficientIdentifiersException("At least one nonvoided Patient Identifier is required");
		}
		
		List<PatientIdentifier> identifiers = new Vector<PatientIdentifier>();
		identifiers.addAll(patient.getIdentifiers());
		List<String> identifiersUsed = new Vector<String>();
		List<PatientIdentifierType> requiredTypes = Context.getPatientService().getPatientIdentifierTypes(null, null, true,
		    null);
		if (requiredTypes == null) {
			requiredTypes = new ArrayList<PatientIdentifierType>();
		}
		List<PatientIdentifierType> foundRequiredTypes = new ArrayList<PatientIdentifierType>();
		
		for (PatientIdentifier pi : identifiers) {
			if (pi.isVoided()) {
				continue;
			}
			
			try {
				PatientIdentifierValidator.validateIdentifier(pi);
			}
			catch (BlankIdentifierException bie) {
				patient.removeIdentifier(pi);
				throw bie;
			}
			
			// check if this is a required identifier
			for (PatientIdentifierType requiredType : requiredTypes) {
				if (pi.getIdentifierType().equals(requiredType)) {
					foundRequiredTypes.add(requiredType);
					requiredTypes.remove(requiredType);
					break;
				}
			}
			
			// check this patient for duplicate identifiers+identifierType
			if (identifiersUsed.contains(pi.getIdentifier() + " id type #: "
			        + pi.getIdentifierType().getPatientIdentifierTypeId())) {
				throw new DuplicateIdentifierException("This patient has two identical identifiers of type "
				        + pi.getIdentifierType().getName() + ": " + pi.getIdentifier(), pi);
			} else {
				identifiersUsed.add(pi.getIdentifier() + " id type #: "
				        + pi.getIdentifierType().getPatientIdentifierTypeId());
			}
		}
		
		if (!requiredTypes.isEmpty()) {
			String missingNames = "";
			for (PatientIdentifierType pit : requiredTypes) {
				missingNames += (missingNames.length() > 0) ? ", " + pit.getName() : pit.getName();
			}
			throw new MissingRequiredIdentifierException("Patient is missing the following required identifier(s): "
			        + missingNames);
		}
	}
----------------------------------------------------------------
old test
@Test
	@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
	public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
		
		Patient patient = new Patient();
		PatientIdentifier patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
		patientIdentifier.setLocation(new Location(1));
		patientIdentifier.setVoided(true);
		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
		patient.addIdentifier(patientIdentifier);
		
		// add a non-voided identifier so that the initial
		// "at least one nonvoided identifier" check passes
		patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdentifier("a non empty string");
		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
		patientIdentifier.setLocation(new Location(1));
		patientIdentifier.setVoided(false);
		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
		patient.addIdentifier(patientIdentifier);
		
		// If the identifier is ignored, it won't throw a
		// BlankIdentifierException as it should
		Context.getPatientService().checkPatientIdentifiers(patient);
		
	}
----------------------------------------------------------------
new product
@Override
	@Transactional(readOnly = true)
	public void checkPatientIdentifiers(Patient patient) throws PatientIdentifierException {
		// check patient has at least one identifier
		if (!patient.getVoided() && patient.getActiveIdentifiers().isEmpty()) {
			throw new InsufficientIdentifiersException("At least one nonvoided Patient Identifier is required");
		}
		
		List<PatientIdentifier> identifiers = new Vector<PatientIdentifier>();
		identifiers.addAll(patient.getIdentifiers());
		List<String> identifiersUsed = new Vector<String>();
		List<PatientIdentifierType> requiredTypes = Context.getPatientService().getPatientIdentifierTypes(null, null, true,
		    null);
		if (requiredTypes == null) {
			requiredTypes = new ArrayList<PatientIdentifierType>();
		}
		List<PatientIdentifierType> foundRequiredTypes = new ArrayList<PatientIdentifierType>();
		
		for (PatientIdentifier pi : identifiers) {
			if (pi.getVoided()) {
				continue;
			}
			
			try {
				PatientIdentifierValidator.validateIdentifier(pi);
			}
			catch (BlankIdentifierException bie) {
				patient.removeIdentifier(pi);
				throw bie;
			}
			
			// check if this is a required identifier
			for (PatientIdentifierType requiredType : requiredTypes) {
				if (pi.getIdentifierType().equals(requiredType)) {
					foundRequiredTypes.add(requiredType);
					requiredTypes.remove(requiredType);
					break;
				}
			}
			
			// check this patient for duplicate identifiers+identifierType
			if (identifiersUsed.contains(pi.getIdentifier() + " id type #: "
			        + pi.getIdentifierType().getPatientIdentifierTypeId())) {
				throw new DuplicateIdentifierException("This patient has two identical identifiers of type "
				        + pi.getIdentifierType().getName() + ": " + pi.getIdentifier(), pi);
			} else {
				identifiersUsed.add(pi.getIdentifier() + " id type #: "
				        + pi.getIdentifierType().getPatientIdentifierTypeId());
			}
		}
		
		if (!requiredTypes.isEmpty()) {
			String missingNames = "";
			for (PatientIdentifierType pit : requiredTypes) {
				missingNames += (missingNames.length() > 0) ? ", " + pit.getName() : pit.getName();
			}
			throw new MissingRequiredIdentifierException("Patient is missing the following required identifier(s): "
			        + missingNames);
		}
	}
----------------------------------------------------------------
new test
@Test
	@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
	public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
		
		Patient patient = new Patient();
		PatientIdentifier patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
		patientIdentifier.setLocation(new Location(1));
		patientIdentifier.setVoided(true);
		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
		patient.addIdentifier(patientIdentifier);
		
		// add a non-voided identifier so that the initial
		// "at least one nonvoided identifier" check passes
		patientIdentifier = new PatientIdentifier();
		patientIdentifier.setIdentifier("a non empty string");
		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
		patientIdentifier.setLocation(new Location(1));
		patientIdentifier.setVoided(false);
		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
		patient.addIdentifier(patientIdentifier);
		
		// If the identifier is ignored, it won't throw a
		// BlankIdentifierException as it should
		Context.getPatientService().checkPatientIdentifiers(patient);
		
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index b4743da..35eca19 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,7 +2,7 @@
 	@Transactional(readOnly = true)
 	public void checkPatientIdentifiers(Patient patient) throws PatientIdentifierException {
 		// check patient has at least one identifier
-		if (!patient.isVoided() && patient.getActiveIdentifiers().isEmpty()) {
+		if (!patient.getVoided() && patient.getActiveIdentifiers().isEmpty()) {
 			throw new InsufficientIdentifiersException("At least one nonvoided Patient Identifier is required");
 		}
 		
@@ -17,7 +17,7 @@
 		List<PatientIdentifierType> foundRequiredTypes = new ArrayList<PatientIdentifierType>();
 		
 		for (PatientIdentifier pi : identifiers) {
-			if (pi.isVoided()) {
+			if (pi.getVoided()) {
 				continue;
 			}
 			

----------------------------------------------------------------
diff test

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 35eca19..f23fcdc 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,17 +6,16 @@
 			throw new InsufficientIdentifiersException("At least one nonvoided Patient Identifier is required");
 		}
 		
-		List<PatientIdentifier> identifiers = new Vector<PatientIdentifier>();
-		identifiers.addAll(patient.getIdentifiers());
-		List<String> identifiersUsed = new Vector<String>();
-		List<PatientIdentifierType> requiredTypes = Context.getPatientService().getPatientIdentifierTypes(null, null, true,
-		    null);
+		List<PatientIdentifier> patientIdentifiers = new ArrayList<>();
+		patientIdentifiers.addAll(patient.getIdentifiers());
+		List<PatientIdentifierType> requiredTypes = this.getPatientIdentifierTypes(null, null, true, null);
 		if (requiredTypes == null) {
 			requiredTypes = new ArrayList<PatientIdentifierType>();
 		}
-		List<PatientIdentifierType> foundRequiredTypes = new ArrayList<PatientIdentifierType>();
-		
-		for (PatientIdentifier pi : identifiers) {
+
+		List<String> identifiersUsed = new ArrayList<>();
+
+		for (PatientIdentifier pi : patientIdentifiers) {
 			if (pi.getVoided()) {
 				continue;
 			}
@@ -32,7 +31,6 @@
 			// check if this is a required identifier
 			for (PatientIdentifierType requiredType : requiredTypes) {
 				if (pi.getIdentifierType().equals(requiredType)) {
-					foundRequiredTypes.add(requiredType);
 					requiredTypes.remove(requiredType);
 					break;
 				}

----------------------------------------------------------------
sample diff test

----------------------------------------------------------------
coverage: 0.6545454545454545
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
Thank you for providing the detailed information. Based on the changes in the production method and the old test method, here is the new test method:

<new_test>
@Test
@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
    
    Patient patient = new Patient();
    PatientIdentifier patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(true);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // add a non-voided identifier so that the initial
    // "at least one nonvoided identifier" check passes
    patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifier("a non empty string");
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(false);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // If the identifier is ignored, it won't throw a
    // BlankIdentifierException as it should
    Context.getPatientService().checkPatientIdentifiers(patient);
}
</new_test>

The changes in the production method involve replacing `isVoided()` with `getVoided()`. The test method itself does not need to change significantly because it is already testing the correct behavior of ignoring voided patient identifiers. The main focus is to ensure that the test method is compatible with the updated production method.

Make sure that the `@Verifies` annotation is correctly defined in your test class, and that the necessary imports are included:

```java
import org.junit.Test;
import org.openmrs.Patient;
import org.openmrs.PatientIdentifier;
import org.openmrs.api.context.Context;
import org.openmrs.test.Verifies;
import org.openmrs.api.PatientService;
import org.openmrs.api.PatientIdentifierException;
import org.openmrs.api.InsufficientIdentifiersException;
import org.openmrs.Location;
import static org.junit.Assert.*;
```

This approach should ensure that the test will correctly verify the behavior of the `checkPatientIdentifiers` method when voided patient identifiers are present.
----------------------------------------------------------------
generated test
@Test
@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
    
    Patient patient = new Patient();
    PatientIdentifier patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(true);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // add a non-voided identifier so that the initial
    // "at least one nonvoided identifier" check passes
    patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifier("a non empty string");
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(false);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // If the identifier is ignored, it won't throw a
    // BlankIdentifierException as it should
    Context.getPatientService().checkPatientIdentifiers(patient);
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,29 +1,28 @@

 @Test
-	@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
-	public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
-		
-		Patient patient = new Patient();
-		PatientIdentifier patientIdentifier = new PatientIdentifier();
-		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-		patientIdentifier.setLocation(new Location(1));
-		patientIdentifier.setVoided(true);
-		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-		patient.addIdentifier(patientIdentifier);
-		
-		// add a non-voided identifier so that the initial
-		// "at least one nonvoided identifier" check passes
-		patientIdentifier = new PatientIdentifier();
-		patientIdentifier.setIdentifier("a non empty string");
-		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-		patientIdentifier.setLocation(new Location(1));
-		patientIdentifier.setVoided(false);
-		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-		patient.addIdentifier(patientIdentifier);
-		
-		// If the identifier is ignored, it won't throw a
-		// BlankIdentifierException as it should
-		Context.getPatientService().checkPatientIdentifiers(patient);
-		
-	}
+@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
+public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
+    
+    Patient patient = new Patient();
+    PatientIdentifier patientIdentifier = new PatientIdentifier();
+    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+    patientIdentifier.setLocation(new Location(1));
+    patientIdentifier.setVoided(true);
+    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+    patient.addIdentifier(patientIdentifier);
+    
+    // add a non-voided identifier so that the initial
+    // "at least one nonvoided identifier" check passes
+    patientIdentifier = new PatientIdentifier();
+    patientIdentifier.setIdentifier("a non empty string");
+    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+    patientIdentifier.setLocation(new Location(1));
+    patientIdentifier.setVoided(false);
+    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+    patient.addIdentifier(patientIdentifier);
+    
+    // If the identifier is ignored, it won't throw a
+    // BlankIdentifierException as it should
+    Context.getPatientService().checkPatientIdentifiers(patient);
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.6545454545454545
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test
@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
    
    Patient patient = new Patient();
    PatientIdentifier patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(true);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // add a non-voided identifier so that the initial
    // "at least one nonvoided identifier" check passes
    patientIdentifier = new PatientIdentifier();
    patientIdentifier.setIdentifier("a non empty string");
    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
    patientIdentifier.setLocation(new Location(1));
    patientIdentifier.setVoided(false);
    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
    patient.addIdentifier(patientIdentifier);
    
    // If the identifier is ignored, it won't throw a
    // BlankIdentifierException as it should
    Context.getPatientService().checkPatientIdentifiers(patient);
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,29 +1,28 @@

 @Test
-	@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
-	public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
-		
-		Patient patient = new Patient();
-		PatientIdentifier patientIdentifier = new PatientIdentifier();
-		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-		patientIdentifier.setLocation(new Location(1));
-		patientIdentifier.setVoided(true);
-		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-		patient.addIdentifier(patientIdentifier);
-		
-		// add a non-voided identifier so that the initial
-		// "at least one nonvoided identifier" check passes
-		patientIdentifier = new PatientIdentifier();
-		patientIdentifier.setIdentifier("a non empty string");
-		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-		patientIdentifier.setLocation(new Location(1));
-		patientIdentifier.setVoided(false);
-		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-		patient.addIdentifier(patientIdentifier);
-		
-		// If the identifier is ignored, it won't throw a
-		// BlankIdentifierException as it should
-		Context.getPatientService().checkPatientIdentifiers(patient);
-		
-	}
+@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
+public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
+    
+    Patient patient = new Patient();
+    PatientIdentifier patientIdentifier = new PatientIdentifier();
+    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+    patientIdentifier.setLocation(new Location(1));
+    patientIdentifier.setVoided(true);
+    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+    patient.addIdentifier(patientIdentifier);
+    
+    // add a non-voided identifier so that the initial
+    // "at least one nonvoided identifier" check passes
+    patientIdentifier = new PatientIdentifier();
+    patientIdentifier.setIdentifier("a non empty string");
+    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+    patientIdentifier.setLocation(new Location(1));
+    patientIdentifier.setVoided(false);
+    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+    patient.addIdentifier(patientIdentifier);
+    
+    // If the identifier is ignored, it won't throw a
+    // BlankIdentifierException as it should
+    Context.getPatientService().checkPatientIdentifiers(patient);
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,28 +1,29 @@

 @Test
-@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
-public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
-    
-    Patient patient = new Patient();
-    PatientIdentifier patientIdentifier = new PatientIdentifier();
-    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-    patientIdentifier.setLocation(new Location(1));
-    patientIdentifier.setVoided(true);
-    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-    patient.addIdentifier(patientIdentifier);
-    
-    // add a non-voided identifier so that the initial
-    // "at least one nonvoided identifier" check passes
-    patientIdentifier = new PatientIdentifier();
-    patientIdentifier.setIdentifier("a non empty string");
-    patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
-    patientIdentifier.setLocation(new Location(1));
-    patientIdentifier.setVoided(false);
-    patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
-    patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
-    patient.addIdentifier(patientIdentifier);
-    
-    // If the identifier is ignored, it won't throw a
-    // BlankIdentifierException as it should
-    Context.getPatientService().checkPatientIdentifiers(patient);
-}
+	@Verifies(value = "should ignore voided patient identifier", method = "checkPatientIdentifiers(Patient)")
+	public void checkPatientIdentifiers_shouldIgnoreVoidedPatientIdentifier() throws Exception {
+		
+		Patient patient = new Patient();
+		PatientIdentifier patientIdentifier = new PatientIdentifier();
+		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+		patientIdentifier.setLocation(new Location(1));
+		patientIdentifier.setVoided(true);
+		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+		patient.addIdentifier(patientIdentifier);
+		
+		// add a non-voided identifier so that the initial
+		// "at least one nonvoided identifier" check passes
+		patientIdentifier = new PatientIdentifier();
+		patientIdentifier.setIdentifier("a non empty string");
+		patientIdentifier.setIdentifierType(Context.getPatientService().getAllPatientIdentifierTypes(false).get(0));
+		patientIdentifier.setLocation(new Location(1));
+		patientIdentifier.setVoided(false);
+		patientIdentifier.setVoidedBy(Context.getAuthenticatedUser());
+		patientIdentifier.setVoidReason("Testing whether voided identifiers are ignored");
+		patient.addIdentifier(patientIdentifier);
+		
+		// If the identifier is ignored, it won't throw a
+		// BlankIdentifierException as it should
+		Context.getPatientService().checkPatientIdentifiers(patient);
+		
+	}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.6545454545454545
--------------------------------------------------------------------------------------------------------------------------------
