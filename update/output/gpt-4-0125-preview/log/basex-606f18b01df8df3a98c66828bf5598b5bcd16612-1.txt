--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.8917748917748918
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[220,45] 找不到符号
  符号:   变量 FILE_NF
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[221,44] 找不到符号
  符号:   变量 FILE_ID
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[230,49] 找不到符号
  符号:   变量 FILE_OOR
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[231,48] 找不到符号
  符号:   变量 FILE_OOR
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[232,52] 找不到符号
  符号:   变量 FILE_OOR
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[233,51] 找不到符号
  符号:   变量 FILE_OOR
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[234,51] 找不到符号
  符号:   变量 FILE_OOR
  位置: 类 org.basex.query.util.Err
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project basex: Compilation failure: Compilation failure:
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[220,45] 找不到符号
符号:   变量 FILE_NF
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[221,44] 找不到符号
符号:   变量 FILE_ID
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[230,49] 找不到符号
符号:   变量 FILE_OOR
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[231,48] 找不到符号
符号:   变量 FILE_OOR
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[232,52] 找不到符号
符号:   变量 FILE_OOR
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[233,51] 找不到符号
符号:   变量 FILE_OOR
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNFileTest.java:[234,51] 找不到符号
符号:   变量 FILE_OOR
位置: 类 org.basex.query.util.Err
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :basex

--------------------------------------------------------------------------------------------------------------------------------
old product
private B64 readBinary(final QueryContext ctx) throws QueryException, IOException {
    final File path = checkFile(0, ctx);
    final long off = expr.length > 1 ? checkItr(expr[1], ctx) : 0;
    long len = expr.length > 2 ? checkItr(expr[2], ctx) : 0;

    if(!path.exists()) throw FILE_NF.get(info, path.getAbsolutePath());
    if(path.isDirectory()) throw FILE_ID.get(info, path.getAbsolutePath());

    // read full file
    if(expr.length == 1) return new B64Stream(new IOFile(path), FILE_IE);

    // read file chunk
    final DataAccess da = new DataAccess(new IOFile(path));
    try {
      final long dlen = da.length();
      if(expr.length == 2) len = dlen - off;
      if(off < 0 || off > dlen || len < 0 || off + len > dlen)
        throw FILE_OOR.get(info, off, off + len);
      da.cursor(off);
      return new B64(da.readBytes((int) len));
    } finally {
      da.close();
    }
  }
----------------------------------------------------------------
old test
@Test
  public void readBinary() {
    // check errors
    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NF);
    error(_FILE_READ_BINARY.args(PATH), Err.FILE_ID);
    // file with single codepoint
    query(_FILE_WRITE.args(PATH1, "0"));
    query(_FILE_READ_BINARY.args(PATH1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 1), "");
    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OOR);
    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OOR);
    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OOR);
    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OOR);
    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OOR);
    // file with two codepoints
    query(_FILE_WRITE.args(PATH1, "a\u00e4"));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // file with two codepoints
    query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // delete file
    query(_FILE_DELETE.args(PATH1));
  }
----------------------------------------------------------------
new product
private B64 readBinary(final QueryContext ctx) throws QueryException, IOException {
    final Path path = checkPath(0, ctx);
    final long off = expr.length > 1 ? checkItr(expr[1], ctx) : 0;
    long len = expr.length > 2 ? checkItr(expr[2], ctx) : 0;

    if(!Files.exists(path)) throw FILE_NOT_FOUND.get(info, path);
    if(Files.isDirectory(path)) throw FILE_IS_DIR.get(info, path);

    // read full file
    if(expr.length == 1) return new B64Stream(new IOFile(path.toFile()), FILE_IO_ERROR);

    // read file chunk
    try(final DataAccess da = new DataAccess(new IOFile(path.toFile()))) {
      final long dlen = da.length();
      if(expr.length == 2) len = dlen - off;
      if(off < 0 || off > dlen || len < 0 || off + len > dlen)
        throw FILE_OUT_OF_RANGE.get(info, off, off + len);
      da.cursor(off);
      return new B64(da.readBytes((int) len));
    }
  }
----------------------------------------------------------------
new test
@Test
  public void readBinary() {
    // check errors
    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
    // file with single codepoint
    query(_FILE_WRITE.args(PATH1, "0"));
    query(_FILE_READ_BINARY.args(PATH1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 1), "");
    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
    // file with two codepoints
    query(_FILE_WRITE.args(PATH1, "a\u00e4"));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // file with two codepoints
    query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // delete file
    query(_FILE_DELETE.args(PATH1));
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 7080cc7..1d8e1f7 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,21 @@
 private B64 readBinary(final QueryContext ctx) throws QueryException, IOException {
-    final File path = checkFile(0, ctx);
+    final Path path = checkPath(0, ctx);
     final long off = expr.length > 1 ? checkItr(expr[1], ctx) : 0;
     long len = expr.length > 2 ? checkItr(expr[2], ctx) : 0;
 
-    if(!path.exists()) throw FILE_NF.get(info, path.getAbsolutePath());
-    if(path.isDirectory()) throw FILE_ID.get(info, path.getAbsolutePath());
+    if(!Files.exists(path)) throw FILE_NOT_FOUND.get(info, path);
+    if(Files.isDirectory(path)) throw FILE_IS_DIR.get(info, path);
 
     // read full file
-    if(expr.length == 1) return new B64Stream(new IOFile(path), FILE_IE);
+    if(expr.length == 1) return new B64Stream(new IOFile(path.toFile()), FILE_IO_ERROR);
 
     // read file chunk
-    final DataAccess da = new DataAccess(new IOFile(path));
-    try {
+    try(final DataAccess da = new DataAccess(new IOFile(path.toFile()))) {
       final long dlen = da.length();
       if(expr.length == 2) len = dlen - off;
       if(off < 0 || off > dlen || len < 0 || off + len > dlen)
-        throw FILE_OOR.get(info, off, off + len);
+        throw FILE_OUT_OF_RANGE.get(info, off, off + len);
       da.cursor(off);
       return new B64(da.readBytes((int) len));
-    } finally {
-      da.close();
     }
   }
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index ce8bea6..af9d53a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,8 +1,8 @@
 @Test
   public void readBinary() {
     // check errors
-    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NF);
-    error(_FILE_READ_BINARY.args(PATH), Err.FILE_ID);
+    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
+    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
     // file with single codepoint
     query(_FILE_WRITE.args(PATH1, "0"));
     query(_FILE_READ_BINARY.args(PATH1), "MA==");
@@ -11,11 +11,11 @@
     query(_FILE_READ_BINARY.args(PATH1, 1), "");
     query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
     query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
-    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OOR);
+    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
     // file with two codepoints
     query(_FILE_WRITE.args(PATH1, "a\u00e4"));
     query(_FILE_READ_BINARY.args(PATH1), "YcOk");

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 61dd7a0..f281961 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,6 +1,24 @@
-private B64Stream readBinary(final QueryContext ctx) throws QueryException {
+private B64 readBinary(final QueryContext ctx) throws QueryException, IOException {
     final File path = checkFile(0, ctx);
+    final long off = expr.length > 1 ? checkItr(expr[1], ctx) : 0;
+    long len = expr.length > 2 ? checkItr(expr[2], ctx) : 0;
+
     if(!path.exists()) FILE_WHICH.thrw(info, path.getAbsolutePath());
     if(path.isDirectory()) FILE_DIR.thrw(info, path.getAbsolutePath());
-    return new B64Stream(new IOFile(path), FILE_IO);
+
+    // read full file
+    if(expr.length == 1) return new B64Stream(new IOFile(path), FILE_IO);
+
+    // read file chunk
+    final DataAccess da = new DataAccess(new IOFile(path));
+    try {
+      final long dlen = da.length();
+      if(expr.length == 2) len = dlen - off;
+      if(off < 0 || off > dlen || len < 0 || off + len > dlen)
+        FILE_BOUNDS.thrw(info, off, off + len);
+      da.cursor(off);
+      return new B64(da.readBytes((int) len));
+    } finally {
+      da.close();
+    }
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 7fe45b3..5f86ac6 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,12 +1,27 @@
 @Test
   public void readBinary() {
+    // check errors
     error(_FILE_READ_BINARY.args(PATH1), Err.FILE_WHICH);
     error(_FILE_READ_BINARY.args(PATH), Err.FILE_DIR);
+    // file with single codepoint
     query(_FILE_WRITE.args(PATH1, "0"));
     query(_FILE_READ_BINARY.args(PATH1), "MA==");
+    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
+    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
+    query(_FILE_READ_BINARY.args(PATH1, 1), "");
+    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
+    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
+    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_BOUNDS);
+    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_BOUNDS);
+    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_BOUNDS);
+    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_BOUNDS);
+    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_BOUNDS);
+    // file with two codepoints
     query(_FILE_WRITE.args(PATH1, "a\u00e4"));
     query(_FILE_READ_BINARY.args(PATH1), "YcOk");
+    // file with two codepoints
     query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
     query(_FILE_READ_BINARY.args(PATH1), "YcOk");
+    // delete file
     query(_FILE_DELETE.args(PATH1));
   }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.8917748917748918
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void readBinary() {
    // check errors
    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
    // file with single codepoint
    query(_FILE_WRITE.args(PATH1, "0"));
    query(_FILE_READ_BINARY.args(PATH1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 1), "");
    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
    // file with two codepoints
    query(_FILE_WRITE.args(PATH1, "a\u00e4"));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // file with two codepoints
    query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // delete file
    query(_FILE_DELETE.args(PATH1));
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void readBinary() {
    // check errors
    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
    // file with single codepoint
    query(_FILE_WRITE.args(PATH1, "0"));
    query(_FILE_READ_BINARY.args(PATH1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 1), "");
    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
    // file with two codepoints
    query(_FILE_WRITE.args(PATH1, "a\u00e4"));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // file with two codepoints
    query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // delete file
    query(_FILE_DELETE.args(PATH1));
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,8 +1,9 @@

+
 @Test
   public void readBinary() {
     // check errors
-    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NF);
-    error(_FILE_READ_BINARY.args(PATH), Err.FILE_ID);
+    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
+    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
     // file with single codepoint
     query(_FILE_WRITE.args(PATH1, "0"));
     query(_FILE_READ_BINARY.args(PATH1), "MA==");
@@ -11,11 +12,11 @@

     query(_FILE_READ_BINARY.args(PATH1, 1), "");
     query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
     query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
-    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OOR);
+    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
     // file with two codepoints
     query(_FILE_WRITE.args(PATH1, "a\u00e4"));
     query(_FILE_READ_BINARY.args(PATH1), "YcOk");
@@ -25,3 +26,4 @@

     // delete file
     query(_FILE_DELETE.args(PATH1));
   }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.8917748917748918
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
  public void readBinary() {
    // check errors
    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
    // file with single codepoint
    query(_FILE_WRITE.args(PATH1, "0"));
    query(_FILE_READ_BINARY.args(PATH1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 0, 1), "MA==");
    query(_FILE_READ_BINARY.args(PATH1, 1), "");
    query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
    query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
    // file with two codepoints
    query(_FILE_WRITE.args(PATH1, "a\u00e4"));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // file with two codepoints
    query(_FILE_WRITE_BINARY.args(PATH1, _CONVERT_STRING_TO_BASE64.args("a\u00e4")));
    query(_FILE_READ_BINARY.args(PATH1), "YcOk");
    // delete file
    query(_FILE_DELETE.args(PATH1));
  }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,8 +1,9 @@

+
 @Test
   public void readBinary() {
     // check errors
-    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NF);
-    error(_FILE_READ_BINARY.args(PATH), Err.FILE_ID);
+    error(_FILE_READ_BINARY.args(PATH1), Err.FILE_NOT_FOUND);
+    error(_FILE_READ_BINARY.args(PATH), Err.FILE_IS_DIR);
     // file with single codepoint
     query(_FILE_WRITE.args(PATH1, "0"));
     query(_FILE_READ_BINARY.args(PATH1), "MA==");
@@ -11,11 +12,11 @@

     query(_FILE_READ_BINARY.args(PATH1, 1), "");
     query(_FILE_READ_BINARY.args(PATH1, 1, 0), "");
     query(_FILE_READ_BINARY.args(PATH1, 0, 0), "");
-    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OOR);
-    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OOR);
+    error(_FILE_READ_BINARY.args(PATH1, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, -1), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 0, 2), Err.FILE_OUT_OF_RANGE);
+    error(_FILE_READ_BINARY.args(PATH1, 2, 1), Err.FILE_OUT_OF_RANGE);
     // file with two codepoints
     query(_FILE_WRITE.args(PATH1, "a\u00e4"));
     query(_FILE_READ_BINARY.args(PATH1), "YcOk");
@@ -25,3 +26,4 @@

     // delete file
     query(_FILE_DELETE.args(PATH1));
   }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,4 +1,3 @@

-
 @Test
   public void readBinary() {
     // check errors
@@ -26,4 +25,3 @@

     // delete file
     query(_FILE_DELETE.args(PATH1));
   }
-

--------------------------------------------------------------------------------------------------------------------------------
