--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.0
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.0
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
public static synchronized Data create(final IO source, final boolean single,
      final Context ctx) throws IOException {

    // check if input is an existing file
    if(!source.exists() || single && source.isDir())
      throw new BaseXException(RES_NOT_FOUND_X, source);

    // default: create a main memory instance
    if(!ctx.options.bool(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);

    // otherwise, create a persistent database instance
    final String nm = source.dbname();
    final DirParser dp = new DirParser(source, ctx.options, ctx.globalopts.dbpath(nm));
    return CreateDB.create(nm, dp, ctx);
  }
----------------------------------------------------------------
old test
@Test
  public void create() {
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "")), "1");
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry level='9'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry encoding='US-ASCII'>X</archive:entry>", "")),
        "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry " +
        "last-modified='2000-01-01T12:12:12'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'zip', 'algorithm':'deflate' }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "", "<archive:options/>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/>" +
        "<archive:algorithm value='deflate'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='gzip'/></archive:options>")), "1");

    // different number of entries and contents
    error(_ARCHIVE_CREATE.args("X", "()"), Err.ARCH_DIFF);
    // name must not be empty
    error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
    // invalid compression level
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    // invalid modification date
    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
        ""), Err.ARCH_DATETIME);
    // content must be string or binary
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
        Err.STRBINTYPE);
    // wrong encoding
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
        Err.ARCH_ENCODING);
    // errors while converting a string
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
        "\u00fc"), Err.ARCH_ENCODE);
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
    // format not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='rar'/></archive:options>"),
        Err.ARCH_UNKNOWN);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:algorithm value='unknown'/></archive:options>"),
        Err.ARCH_SUPP);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("('x','y')", "('a','b')",
        "<archive:options><archive:format value='gzip'/></archive:options>"),
        Err.ARCH_ONE);
  }
----------------------------------------------------------------
new product
public static synchronized Data create(final IO source, final boolean single,
      final Context ctx) throws IOException {

    // check if input is an existing file
    if(!source.exists() || single && source.isDir())
      throw new BaseXException(RES_NOT_FOUND_X, source);

    // default: create a main memory instance
    if(!ctx.options.get(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);

    // otherwise, create a persistent database instance
    final String nm = source.dbname();
    final DirParser dp = new DirParser(source, ctx.options, ctx.globalopts.dbpath(nm));
    return CreateDB.create(nm, dp, ctx);
  }
----------------------------------------------------------------
new test
@Test
  public void create() {
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "")), "1");
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry level='9'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry encoding='US-ASCII'>X</archive:entry>", "")),
        "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry " +
        "last-modified='2000-01-01T12:12:12'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'zip', 'algorithm':'deflate' }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "", "<archive:options/>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/>" +
        "<archive:algorithm value='deflate'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='gzip'/></archive:options>")), "1");

    // different number of entries and contents
    error(_ARCHIVE_CREATE.args("X", "()"), Err.ARCH_DIFF);
    // name must not be empty
    error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
    // invalid compression level
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>", ""),
        Err.ARCH_LEVEL);
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>", ""),
        Err.ARCH_LEVEL);
    // invalid modification date
    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>", ""),
        Err.ARCH_DATETIME);
    // content must be string or binary
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"), Err.STRBINTYPE);
    // wrong encoding
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
        Err.ARCH_ENCODING);
    // errors while converting a string
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
        "\u00fc"), Err.ARCH_ENCODE);
    // format not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'format':'rar' }"),
        Err.ARCH_UNKNOWN);
    // unknown option
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'x':'y' }"),
        Err.INVALIDOPT);
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='rar'/></archive:options>"),
        Err.ARCH_UNKNOWN);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:algorithm value='unknown'/></archive:options>"),
        Err.ARCH_SUPP);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("('x','y')", "('a','b')",
        "<archive:options><archive:format value='gzip'/></archive:options>"),
        Err.ARCH_ONE);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 7219b2b..52c77ed 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,7 +6,7 @@ public static synchronized Data create(final IO source, final boolean single,
       throw new BaseXException(RES_NOT_FOUND_X, source);
 
     // default: create a main memory instance
-    if(!ctx.options.bool(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);
+    if(!ctx.options.get(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);
 
     // otherwise, create a persistent database instance
     final String nm = source.dbname();

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index d0e7746..a1e00fc 100644
--- a/old_test.java
+++ b/new_test.java
@@ -29,25 +29,27 @@
     // name must not be empty
     error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
     // invalid compression level
-    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
-        ""), Err.ARCH_LEVEL);
-    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
-        ""), Err.ARCH_LEVEL);
+    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>", ""),
+        Err.ARCH_LEVEL);
+    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>", ""),
+        Err.ARCH_LEVEL);
     // invalid modification date
-    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
-        ""), Err.ARCH_DATETIME);
+    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>", ""),
+        Err.ARCH_DATETIME);
     // content must be string or binary
-    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
-        Err.STRBINTYPE);
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"), Err.STRBINTYPE);
     // wrong encoding
     error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
         Err.ARCH_ENCODING);
     // errors while converting a string
     error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
         "\u00fc"), Err.ARCH_ENCODE);
-    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
-        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
     // format not supported
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'format':'rar' }"),
+        Err.ARCH_UNKNOWN);
+    // unknown option
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'x':'y' }"),
+        Err.INVALIDOPT);
     error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
         "<archive:options><archive:format value='rar'/></archive:options>"),
         Err.ARCH_UNKNOWN);

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 209f9b5..109342c 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,3 +1,3 @@
 private static void createDB(final String input) throws BaseXException {
-    new CreateDB(DB, input == null ? DOC : input).execute(CONTEXT);
+    new CreateDB(NAME, input == null ? DOC : input).execute(context);
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index cc659ee..5168838 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,6 +1,6 @@
 @Test
   public void createDB() throws BaseXException {
-    new CreateDB(DB).execute(CONTEXT);
+    new CreateDB(NAME).execute(context);
     // check if database name equals argument of create command
-    assertEquals(db(), DB);
+    assertEquals(db(), NAME);
   }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.0
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void create() {
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "")), "1");
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry level='9'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry encoding='US-ASCII'>X</archive:entry>", "")),
        "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry " +
        "last-modified='2000-01-01T12:12:12'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'zip', 'algorithm':'deflate' }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "", "<archive:options/>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/>" +
        "<archive:algorithm value='deflate'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='gzip'/></archive:options>")), "1");

    // different number of entries and contents
    error(_ARCHIVE_CREATE.args("X", "()"), Err.ARCH_DIFF);
    // name must not be empty
    error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
    // invalid compression level
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    // invalid modification date
    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
        ""), Err.ARCH_DATETIME);
    // content must be string or binary
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
        Err.STRBINTYPE);
    // wrong encoding
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
        Err.ARCH_ENCODING);
    // errors while converting a string
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
        "\u00fc"), Err.ARCH_ENCODE);
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
    // format not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='rar'/></archive:options>"),
        Err.ARCH_UNKNOWN);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:algorithm value='unknown'/></archive:options>"),
        Err.ARCH_SUPP);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("('x','y')", "('a','b')",
        "<archive:options><archive:format value='gzip'/></archive:options>"),
        Err.ARCH_ONE);
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void create() {
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "")), "1");
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry level='9'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry encoding='US-ASCII'>X</archive:entry>", "")),
        "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry " +
        "last-modified='2000-01-01T12:12:12'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'zip', 'algorithm':'deflate' }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "", "<archive:options/>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/>" +
        "<archive:algorithm value='deflate'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='gzip'/></archive:options>")), "1");

    // different number of entries and contents
    error(_ARCHIVE_CREATE.args("X", "()"), Err.ARCH_DIFF);
    // name must not be empty
    error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
    // invalid compression level
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    // invalid modification date
    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
        ""), Err.ARCH_DATETIME);
    // content must be string or binary
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
        Err.STRBINTYPE);
    // wrong encoding
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
        Err.ARCH_ENCODING);
    // errors while converting a string
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
        "\u00fc"), Err.ARCH_ENCODE);
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
    // format not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='rar'/></archive:options>"),
        Err.ARCH_UNKNOWN);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:algorithm value='unknown'/></archive:options>"),
        Err.ARCH_SUPP);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("('x','y')", "('a','b')",
        "<archive:options><archive:format value='gzip'/></archive:options>"),
        Err.ARCH_ONE);
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void create() {
     // simple zip files
@@ -60,3 +61,4 @@

         "<archive:options><archive:format value='gzip'/></archive:options>"),
         Err.ARCH_ONE);
   }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.0
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
  public void create() {
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "")), "1");
    // simple zip files
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry level='9'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args(
        "<archive:entry encoding='US-ASCII'>X</archive:entry>", "")),
        "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry " +
        "last-modified='2000-01-01T12:12:12'>X</archive:entry>", "")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'zip', 'algorithm':'deflate' }")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("X", "", "<archive:options/>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/>" +
        "<archive:algorithm value='deflate'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='zip'/></archive:options>")), "1");
    query(COUNT.args(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='gzip'/></archive:options>")), "1");

    // different number of entries and contents
    error(_ARCHIVE_CREATE.args("X", "()"), Err.ARCH_DIFF);
    // name must not be empty
    error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
    // invalid compression level
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
        ""), Err.ARCH_LEVEL);
    // invalid modification date
    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
        ""), Err.ARCH_DATETIME);
    // content must be string or binary
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
        Err.STRBINTYPE);
    // wrong encoding
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
        Err.ARCH_ENCODING);
    // errors while converting a string
    error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
        "\u00fc"), Err.ARCH_ENCODE);
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
    // format not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:format value='rar'/></archive:options>"),
        Err.ARCH_UNKNOWN);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
        "<archive:options><archive:algorithm value='unknown'/></archive:options>"),
        Err.ARCH_SUPP);
    // algorithm not supported
    error(_ARCHIVE_CREATE.args("('x','y')", "('a','b')",
        "<archive:options><archive:format value='gzip'/></archive:options>"),
        Err.ARCH_ONE);
  }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void create() {
     // simple zip files
@@ -60,3 +61,4 @@

         "<archive:options><archive:format value='gzip'/></archive:options>"),
         Err.ARCH_ONE);
   }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,4 +1,3 @@

-
 @Test
   public void create() {
     // simple zip files
@@ -30,25 +29,27 @@

     // name must not be empty
     error(_ARCHIVE_CREATE.args("<archive:entry/>", ""), Err.ARCH_EMPTY);
     // invalid compression level
-    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>",
-        ""), Err.ARCH_LEVEL);
-    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>",
-        ""), Err.ARCH_LEVEL);
+    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='x'>X</archive:entry>", ""),
+        Err.ARCH_LEVEL);
+    error(_ARCHIVE_CREATE.args("<archive:entry compression-level='10'>X</archive:entry>", ""),
+        Err.ARCH_LEVEL);
     // invalid modification date
-    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>",
-        ""), Err.ARCH_DATETIME);
+    error(_ARCHIVE_CREATE.args("<archive:entry last-modified='2020'>X</archive:entry>", ""),
+        Err.ARCH_DATETIME);
     // content must be string or binary
-    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"),
-        Err.STRBINTYPE);
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", " 123"), Err.STRBINTYPE);
     // wrong encoding
     error(_ARCHIVE_CREATE.args("<archive:entry encoding='x'>X</archive:entry>", ""),
         Err.ARCH_ENCODING);
     // errors while converting a string
     error(_ARCHIVE_CREATE.args("<archive:entry encoding='US-ASCII'>X</archive:entry>",
         "\u00fc"), Err.ARCH_ENCODE);
-    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
-        " { 'format':'rar' }"), Err.ARCH_UNKNOWN);
     // format not supported
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'format':'rar' }"),
+        Err.ARCH_UNKNOWN);
+    // unknown option
+    error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "", " { 'x':'y' }"),
+        Err.INVALIDOPT);
     error(_ARCHIVE_CREATE.args("<archive:entry>X</archive:entry>", "",
         "<archive:options><archive:format value='rar'/></archive:options>"),
         Err.ARCH_UNKNOWN);
@@ -61,4 +62,3 @@

         "<archive:options><archive:format value='gzip'/></archive:options>"),
         Err.ARCH_ONE);
   }
-

--------------------------------------------------------------------------------------------------------------------------------
