--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.9310344827586207
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
\0\openmrs-core\api\src\test\java\org\openmrs\api\VisitServiceTest.java:[660,49] 无法将 org.openmrs.api.EncounterService 中的 getEncountersByVisit(org.openmrs.Visit,boolean) 应用于 (org.openmrs.Visit)
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.1:testCompile (default-testCompile) on project openmrs-api: Compilation failure
\0\openmrs-core\api\src\test\java\org\openmrs\api\VisitServiceTest.java:[660,49] 无法将 org.openmrs.api.EncounterService 中的 getEncountersByVisit(org.openmrs.Visit,boolean) 应用于 (org.openmrs.Visit)
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
old product
@Override
	public void purgeVisit(Visit visit) throws APIException {
		if (visit.getVisitId() == null)
			return;
		//TODO there is a ticket for adding includeVoided argument to getEncountersByVisit for this not to fail
		if (Context.getEncounterService().getEncountersByVisit(visit).size() > 0)
			throw new APIException(Context.getMessageSourceService().getMessage("Visit.purge.inUse", null,
			    "Cannot purge a visit that has encounters associated to it", Context.getLocale()));
		dao.deleteVisit(visit);
	}
----------------------------------------------------------------
old test
@Test(expected = APIException.class)
	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
		Visit visit = Context.getVisitService().getVisit(1);
		Encounter e = Context.getEncounterService().getEncounter(3);
		e.setVisit(visit);
		Context.getEncounterService().saveEncounter(e);
		//sanity check
		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit).size() > 0);
		Context.getVisitService().purgeVisit(visit);
	}
----------------------------------------------------------------
new product
@Override
	public void purgeVisit(Visit visit) throws APIException {
		if (visit.getVisitId() == null)
			return;
		//TODO there is a ticket for adding includeVoided argument to getEncountersByVisit for this not to fail
		if (Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0)
			throw new APIException(Context.getMessageSourceService().getMessage("Visit.purge.inUse", null,
			    "Cannot purge a visit that has encounters associated to it", Context.getLocale()));
		dao.deleteVisit(visit);
	}
----------------------------------------------------------------
new test
@Test(expected = APIException.class)
	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
		Visit visit = Context.getVisitService().getVisit(1);
		Encounter e = Context.getEncounterService().getEncounter(3);
		e.setVisit(visit);
		Context.getEncounterService().saveEncounter(e);
		//sanity check
		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, false).size() > 0);
		Context.getVisitService().purgeVisit(visit);
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 14b5567..73b5fe4 100644
--- a/old_product.java
+++ b/new_product.java
@@ -3,7 +3,7 @@
 		if (visit.getVisitId() == null)
 			return;
 		//TODO there is a ticket for adding includeVoided argument to getEncountersByVisit for this not to fail
-		if (Context.getEncounterService().getEncountersByVisit(visit).size() > 0)
+		if (Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0)
 			throw new APIException(Context.getMessageSourceService().getMessage("Visit.purge.inUse", null,
 			    "Cannot purge a visit that has encounters associated to it", Context.getLocale()));
 		dao.deleteVisit(visit);

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 8b4a43a..0083fc5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,6 +6,6 @@
 		e.setVisit(visit);
 		Context.getEncounterService().saveEncounter(e);
 		//sanity check
-		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit).size() > 0);
+		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, false).size() > 0);
 		Context.getVisitService().purgeVisit(visit);
 	}
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index a40cbd2..b022ec3 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1 +1 @@
-public void purgeVisit(Visit visit) throws DAOException;
\ No newline at end of file
+public void deleteVisit(Visit visit) throws DAOException;
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 8768494..ee06cf1 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,8 +2,8 @@
 	@Verifies(value = "should erase the visit from the database", method = "purgeVisit(Visit)")
 	public void purgeVisit_shouldEraseTheVisitFromTheDatabase() throws Exception {
 		VisitService vs = Context.getVisitService();
-		Integer originalSize = vs.getAllVisits().size();
+		Integer originalSize = vs.getVisits(null, null, null, null, null, null, null, null, true).size();
 		Visit visit = Context.getVisitService().getVisit(1);
 		vs.purgeVisit(visit);
-		Assert.assertEquals(originalSize - 1, vs.getAllVisits().size());
+		Assert.assertEquals(originalSize - 1, vs.getVisits(null, null, null, null, null, null, null, null, true).size());
 	}
\ No newline at end of file

----------------------------------------------------------------
coverage
0.9310344827586207
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test(expected = APIException.class)
	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
		Visit visit = Context.getVisitService().getVisit(1);
		Encounter e = Context.getEncounterService().getEncounter(3);
		e.setVisit(visit);
		Context.getEncounterService().saveEncounter(e);
		//sanity check
		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
		Context.getVisitService().purgeVisit(visit);
	}
</new_test>
----------------------------------------------------------------
测试代码

@Test(expected = APIException.class)
	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
		Visit visit = Context.getVisitService().getVisit(1);
		Encounter e = Context.getEncounterService().getEncounter(3);
		e.setVisit(visit);
		Context.getEncounterService().saveEncounter(e);
		//sanity check
		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
		Context.getVisitService().purgeVisit(visit);
	}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test(expected = APIException.class)
 	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
 	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
@@ -6,6 +7,7 @@

 		e.setVisit(visit);
 		Context.getEncounterService().saveEncounter(e);
 		//sanity check
-		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit).size() > 0);
+		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
 		Context.getVisitService().purgeVisit(visit);
 	}
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.9310344827586207
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test(expected = APIException.class)
	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
		Visit visit = Context.getVisitService().getVisit(1);
		Encounter e = Context.getEncounterService().getEncounter(3);
		e.setVisit(visit);
		Context.getEncounterService().saveEncounter(e);
		//sanity check
		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
		Context.getVisitService().purgeVisit(visit);
	}

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test(expected = APIException.class)
 	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
 	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
@@ -6,6 +7,7 @@

 		e.setVisit(visit);
 		Context.getEncounterService().saveEncounter(e);
 		//sanity check
-		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit).size() > 0);
+		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
 		Context.getVisitService().purgeVisit(visit);
 	}
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,4 +1,3 @@

-
 @Test(expected = APIException.class)
 	@Verifies(value = "should fail if the visit has encounters associated to it", method = "purgeVisit(Visit)")
 	public void purgeVisit_shouldFailIfTheVisitHasEncountersAssociatedToIt() throws Exception {
@@ -7,7 +6,6 @@

 		e.setVisit(visit);
 		Context.getEncounterService().saveEncounter(e);
 		//sanity check
-		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, true).size() > 0);
+		Assert.assertTrue(Context.getEncounterService().getEncountersByVisit(visit, false).size() > 0);
 		Context.getVisitService().purgeVisit(visit);
 	}
-

--------------------------------------------------------------------------------------------------------------------------------
