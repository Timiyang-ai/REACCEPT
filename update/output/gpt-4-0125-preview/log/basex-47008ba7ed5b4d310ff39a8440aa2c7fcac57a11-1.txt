--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.967741935483871
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[34,48] 找不到符号
  符号:   变量 BXXQ_UPDATING
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[36,9] 找不到符号
  符号:   变量 BXXQ_UPDATING
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[48,43] 找不到符号
  符号:   变量 BXXQ_PERM_X
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[50,43] 找不到符号
  符号:   变量 BXDB_OPEN_X
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[52,43] 找不到符号
  符号:   变量 BXXQ_PERM_X
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[54,35] 找不到符号
  符号:   变量 BXXQ_TIMEOUT
  位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[56,35] 找不到符号
  符号:   变量 BXXQ_MEMORY
  位置: 类 org.basex.query.func.XQueryModuleTest
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.2:testCompile (default-testCompile) on project basex: Compilation failure: Compilation failure:
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[34,48] 找不到符号
符号:   变量 BXXQ_UPDATING
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[36,9] 找不到符号
符号:   变量 BXXQ_UPDATING
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[48,43] 找不到符号
符号:   变量 BXXQ_PERM_X
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[50,43] 找不到符号
符号:   变量 BXDB_OPEN_X
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[52,43] 找不到符号
符号:   变量 BXXQ_PERM_X
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[54,35] 找不到符号
符号:   变量 BXXQ_TIMEOUT
位置: 类 org.basex.query.func.XQueryModuleTest
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[56,35] 找不到符号
符号:   变量 BXXQ_MEMORY
位置: 类 org.basex.query.func.XQueryModuleTest
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :basex

--------------------------------------------------------------------------------------------------------------------------------
old product
final ItemList eval(final QueryContext qc, final String query, final String path,
      final boolean updating) throws QueryException {

    // bind variables and context value
    final HashMap<String, Value> bindings = toBindings(1, qc);
    final Options opts = new XQueryOptions();
    if(exprs.length > 2) toOptions(2, opts, qc);

    // allow limited number of nested calls
    QueryContext qcAnc = qc;
    for(int c = 5; qcAnc != null && c > 0; c--) qcAnc = qcAnc.parent;
    if(qcAnc != null) throw BXXQ_NESTED.get(info);

    final User user = qc.context.user();
    final Perm tmp = user.perm("");
    Timer to = null;

    final Perm perm = Perm.get(opts.get(XQueryOptions.PERMISSION).toString());
    if(!user.has(perm)) throw BXXQ_PERM2_X.get(info, perm);
    user.perm(perm);

    try(QueryContext qctx = new QueryContext(qc)) {
      // limit memory consumption: enforce garbage collection and calculate usage
      final long mb = opts.get(XQueryOptions.MEMORY);
      if(mb != 0) {
        Performance.gc(2);
        final long limit = Performance.memory() + (mb << 20);
        to = new Timer(true);
        to.schedule(new TimerTask() {
          @Override
          // limit reached: stop query
          public void run() { if(Performance.memory() > limit) qctx.memory(); }
        }, 500, 500);
      }

      // timeout
      final long ms = opts.get(XQueryOptions.TIMEOUT) * 1000L;
      if(ms != 0) {
        if(to == null) to = new Timer(true);
        to.schedule(new TimerTask() {
          @Override
          public void run() { qctx.timeout(); }
        }, ms);
      }

      // base-uri: adopt specified uri, passed on uri, or uri from parent query
      final String bu = opts.get(XQueryOptions.BASE_URI);
      final String uri = bu != null ? bu : path != null ? path : string(sc.baseURI().string());

      // evaluate query
      try {
        final StaticContext sctx = new StaticContext(qctx);
        sctx.baseURI(uri);
        for(final Entry<String, Value> it : bindings.entrySet()) {
          final String key = it.getKey();
          final Value val = it.getValue();
          if(key.isEmpty()) qctx.context(val, sctx);
          else qctx.bind(key, val, sctx);
        }
        qctx.parseMain(query, null, sctx);

        if(updating) {
          if(!sc.mixUpdates && !qctx.updating && !qctx.root.expr.isVacuous())
            throw BXXQ_NOUPDATE.get(info);
        } else {
          if(qctx.updating) throw BXXQ_UPDATING.get(info);
        }

        final ItemList cache = new ItemList();
        final Iter iter = qctx.iter();
        for(Item it; (it = iter.next()) != null;) {
          qctx.checkStop();
          qc.checkStop();
          cache.add(it);
        }
        return cache;
      } catch(final JobException ex) {
        if(qctx.state == JobState.TIMEOUT) throw BXXQ_TIMEOUT.get(info);
        if(qctx.state == JobState.MEMORY)  throw BXXQ_MEMORY.get(info);
        throw ex;
      } catch(final QueryException ex) {
        if(ex.error() == BASX_PERM_X) throw BXXQ_PERM_X.get(info, ex.getLocalizedMessage());
        if(!opts.get(XQueryOptions.PASS)) ex.info(info);
        throw ex;
      }
    } finally {
      if(to != null) to.cancel();
      user.perm(tmp, "");
    }
  }
----------------------------------------------------------------
old test
@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), BXXQ_UPDATING);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        BXXQ_UPDATING);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), BXXQ_PERM_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), BXDB_OPEN_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), BXXQ_PERM_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), BXXQ_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), BXXQ_MEMORY);
  }
----------------------------------------------------------------
new product
final ItemList eval(final QueryContext qc, final String query, final String path,
      final boolean updating) throws QueryException {

    // bind variables and context value
    final HashMap<String, Value> bindings = toBindings(1, qc);
    final Options opts = new XQueryOptions();
    if(exprs.length > 2) toOptions(2, opts, qc);

    // allow limited number of nested calls
    QueryContext qcAnc = qc;
    for(int c = 5; qcAnc != null && c > 0; c--) qcAnc = qcAnc.parent;
    if(qcAnc != null) throw XQUERY_NESTED.get(info);

    final User user = qc.context.user();
    final Perm tmp = user.perm("");
    Timer to = null;

    final Perm perm = Perm.get(opts.get(XQueryOptions.PERMISSION).toString());
    if(!user.has(perm)) throw XQUERY_PERMISSION2_X.get(info, perm);
    user.perm(perm);

    try(QueryContext qctx = new QueryContext(qc)) {
      // limit memory consumption: enforce garbage collection and calculate usage
      final long mb = opts.get(XQueryOptions.MEMORY);
      if(mb != 0) {
        Performance.gc(2);
        final long limit = Performance.memory() + (mb << 20);
        to = new Timer(true);
        to.schedule(new TimerTask() {
          @Override
          // limit reached: stop query
          public void run() { if(Performance.memory() > limit) qctx.memory(); }
        }, 500, 500);
      }

      // timeout
      final long ms = opts.get(XQueryOptions.TIMEOUT) * 1000L;
      if(ms != 0) {
        if(to == null) to = new Timer(true);
        to.schedule(new TimerTask() {
          @Override
          public void run() { qctx.timeout(); }
        }, ms);
      }

      // base-uri: adopt specified uri, passed on uri, or uri from parent query
      final String bu = opts.get(XQueryOptions.BASE_URI);
      final String uri = bu != null ? bu : path != null ? path : string(sc.baseURI().string());

      // evaluate query
      try {
        final StaticContext sctx = new StaticContext(qctx);
        sctx.baseURI(uri);
        for(final Entry<String, Value> it : bindings.entrySet()) {
          final String key = it.getKey();
          final Value val = it.getValue();
          if(key.isEmpty()) qctx.context(val, sctx);
          else qctx.bind(key, val, sctx);
        }
        qctx.parseMain(query, null, sctx);

        if(updating) {
          if(!sc.mixUpdates && !qctx.updating && !qctx.root.expr.isVacuous())
            throw XQUERY_UPDATE2.get(info);
        } else {
          if(qctx.updating) throw XQUERY_UPDATE1.get(info);
        }

        final ItemList cache = new ItemList();
        final Iter iter = qctx.iter();
        for(Item it; (it = iter.next()) != null;) {
          qctx.checkStop();
          qc.checkStop();
          cache.add(it);
        }
        return cache;
      } catch(final JobException ex) {
        if(qctx.state == JobState.TIMEOUT) throw XQUERY_TIMEOUT.get(info);
        if(qctx.state == JobState.MEMORY)  throw XQUERY_MEMORY.get(info);
        throw ex;
      } catch(final QueryException ex) {
        if(ex.error() == BASX_PERM_X) {
          Util.debug(ex);
          throw XQUERY_PERMISSION1_X.get(info, ex.getLocalizedMessage());
        }
        if(!opts.get(XQueryOptions.PASS)) ex.info(info);
        throw ex;
      }
    } finally {
      if(to != null) to.cancel();
      user.perm(tmp, "");
    }
  }
----------------------------------------------------------------
new test
@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE1);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), DB_OPEN2_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index f821460..e52c11e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -9,14 +9,14 @@ final ItemList eval(final QueryContext qc, final String query, final String path
     // allow limited number of nested calls
     QueryContext qcAnc = qc;
     for(int c = 5; qcAnc != null && c > 0; c--) qcAnc = qcAnc.parent;
-    if(qcAnc != null) throw BXXQ_NESTED.get(info);
+    if(qcAnc != null) throw XQUERY_NESTED.get(info);
 
     final User user = qc.context.user();
     final Perm tmp = user.perm("");
     Timer to = null;
 
     final Perm perm = Perm.get(opts.get(XQueryOptions.PERMISSION).toString());
-    if(!user.has(perm)) throw BXXQ_PERM2_X.get(info, perm);
+    if(!user.has(perm)) throw XQUERY_PERMISSION2_X.get(info, perm);
     user.perm(perm);
 
     try(QueryContext qctx = new QueryContext(qc)) {
@@ -61,9 +61,9 @@ final ItemList eval(final QueryContext qc, final String query, final String path
 
         if(updating) {
           if(!sc.mixUpdates && !qctx.updating && !qctx.root.expr.isVacuous())
-            throw BXXQ_NOUPDATE.get(info);
+            throw XQUERY_UPDATE2.get(info);
         } else {
-          if(qctx.updating) throw BXXQ_UPDATING.get(info);
+          if(qctx.updating) throw XQUERY_UPDATE1.get(info);
         }
 
         final ItemList cache = new ItemList();
@@ -75,11 +75,14 @@ final ItemList eval(final QueryContext qc, final String query, final String path
         }
         return cache;
       } catch(final JobException ex) {
-        if(qctx.state == JobState.TIMEOUT) throw BXXQ_TIMEOUT.get(info);
-        if(qctx.state == JobState.MEMORY)  throw BXXQ_MEMORY.get(info);
+        if(qctx.state == JobState.TIMEOUT) throw XQUERY_TIMEOUT.get(info);
+        if(qctx.state == JobState.MEMORY)  throw XQUERY_MEMORY.get(info);
         throw ex;
       } catch(final QueryException ex) {
-        if(ex.error() == BASX_PERM_X) throw BXXQ_PERM_X.get(info, ex.getLocalizedMessage());
+        if(ex.error() == BASX_PERM_X) {
+          Util.debug(ex);
+          throw XQUERY_PERMISSION1_X.get(info, ex.getLocalizedMessage());
+        }
         if(!opts.get(XQueryOptions.PASS)) ex.info(info);
         throw ex;
       }

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index ba47d3e..cb83ab9 100644
--- a/old_test.java
+++ b/new_test.java
@@ -12,9 +12,9 @@
     error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     // check updating expressions
-    error(_XQUERY_EVAL.args("delete node ()"), BXXQ_UPDATING);
+    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE1);
     error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
-        BXXQ_UPDATING);
+        XQUERY_UPDATE1);
     query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
     query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));
 
@@ -26,13 +26,13 @@
         " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");
 
     error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
-        " map { 'permission': 'none' }"), BXXQ_PERM_X);
+        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
     error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
-        " map { 'permission': 'none' }"), BXDB_OPEN_X);
+        " map { 'permission': 'none' }"), DB_OPEN2_X);
     error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
-        " map { 'permission': 'none' }"), BXXQ_PERM_X);
+        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
     error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
-        " map { 'timeout': 1 }"), BXXQ_TIMEOUT);
+        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
     error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
-        " map { 'memory': 10 }"), BXXQ_MEMORY);
+        " map { 'memory': 10 }"), XQUERY_MEMORY);
   }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 871a575..54650fc 100644
--- a/old_product.java
+++ b/new_product.java
@@ -12,6 +12,26 @@ private ValueBuilder eval(final QueryContext ctx, final byte[] qu, final String
       if(k.isEmpty()) qc.context(v, null, sctx);
       else qc.bind(k, v, null);
     }
+
+    Thread to = null;
+    final Perm tmp = ctx.context.user.perm;
+    if(expr.length > 2) {
+      final Options opts = checkOptions(2, Q_OPTIONS, new XQueryOptions(), ctx);
+      ctx.context.user.perm = Perm.get(opts.get(XQueryOptions.PERMISSION));
+      final long ms = opts.get(XQueryOptions.TIMEOUT) * 1000l;
+      if(ms != 0) {
+        to = new Thread() {
+          @Override
+          public void run() {
+            Performance.sleep(ms);
+            qc.stop();
+          }
+        };
+        to.setDaemon(false);
+        to.start();
+      }
+    }
+
     // evaluate query
     try {
       qc.parseMain(string(qu), path, sctx);
@@ -29,7 +49,13 @@ private ValueBuilder eval(final QueryContext ctx, final byte[] qu, final String
         }
       }
       return vb;
+    } catch(final ProcException ex) {
+      throw BXXQ_STOPPED.get(info);
+    } catch(final QueryException ex) {
+      throw ex.err() == BASX_PERM ? BXXQ_PERM.get(info, ex.getLocalizedMessage()) : ex;
     } finally {
+      ctx.context.user.perm = tmp;
       qc.close();
+      if(to != null) to.interrupt();
     }
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 488d510..5a41242 100644
--- a/old_test.java
+++ b/new_test.java
@@ -17,4 +17,9 @@
         Err.BXXQ_UPDATING);
     query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
     query(_XQUERY_EVAL.args("\"" + DOC.args(PATH).replace('"', '\'') + "\""));
+    // check updating expressions
+    error(_XQUERY_EVAL.args("\"file:exists('x')\"", " map{}", " map{ 'permission':'none'}"),
+        Err.BXXQ_PERM);
+    error(_XQUERY_EVAL.args("\"(1 to 10000000000000)[.=0]\"", " map{}", " map{ 'timeout':'1'}"),
+        Err.BXXQ_STOPPED);
   }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.967741935483871
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), BXDB_OPEN_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), BXDB_OPEN_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void eval() {
     query(_XQUERY_EVAL.args("1"), 1);
@@ -12,9 +13,9 @@

     error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     // check updating expressions
-    error(_XQUERY_EVAL.args("delete node ()"), BXXQ_UPDATING);
+    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
     error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
-        BXXQ_UPDATING);
+        XQUERY_UPDATE1);
     query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
     query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));
 
@@ -26,13 +27,19 @@

         " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");
 
     error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
-        " map { 'permission': 'none' }"), BXXQ_PERM_X);
+        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
     error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
         " map { 'permission': 'none' }"), BXDB_OPEN_X);
     error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
-        " map { 'permission': 'none' }"), BXXQ_PERM_X);
+        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
     error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
-        " map { 'timeout': 1 }"), BXXQ_TIMEOUT);
+        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
     error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
-        " map { 'memory': 10 }"), BXXQ_MEMORY);
+        " map { 'memory': 10 }"), XQUERY_MEMORY);
+    // check updating expressions
+    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
+        XQUERY_PERMISSION1_X);
+    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
+        XQUERY_TIMEOUT);
   }
+

----------------------------------------------------------------
state
0
----------------------------------------------------------------
description
编译报错
----------------------------------------------------------------
message
COMPILATION ERROR : 
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[51,43] 找不到符号
  符号:   变量 BXDB_OPEN_X
  位置: 类 org.basex.query.func.XQueryModuleTest
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.2:testCompile (default-testCompile) on project basex: Compilation failure
/E:/0/basex/basex-core/src/test/java/org/basex/query/func/XQueryModuleTest.java:[51,43] 找不到符号
符号:   变量 BXDB_OPEN_X
位置: 类 org.basex.query.func.XQueryModuleTest
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :basex

--------------------------------------------------------------------------------------------------------------------------------
当前次数：2
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -29,7 +29,7 @@

     error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
         " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
     error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
-        " map { 'permission': 'none' }"), BXDB_OPEN_X);
+        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
     error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
         " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
     error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",

----------------------------------------------------------------
state
1
----------------------------------------------------------------
description
单元测试不通过
----------------------------------------------------------------
message
-------------------------------------------------------------------------------
Test set: org.basex.query.func.XQueryModuleTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.185 s <<< FAILURE! - in org.basex.query.func.XQueryModuleTest
eval(org.basex.query.func.XQueryModuleTest)  Time elapsed: 0.238 s  <<< FAILURE!
java.lang.AssertionError: 

Query:  xquery:eval("delete node ()")
Error(s): XQUERY_UPDATE2
Result: XQUERY_UPDATE1 (No updating expression allowed.)
	at org.basex.query.func.XQueryModuleTest.eval(XQueryModuleTest.java:35)


--------------------------------------------------------------------------------------------------------------------------------
当前次数：3
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE1);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void eval() {
    query(_XQUERY_EVAL.args("1"), 1);
    query(_XQUERY_EVAL.args("1 + 2"), 3);
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { '$a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': 'b' }"), "b");
    query(_XQUERY_EVAL.args("declare variable $a external; $a", " map { 'a': (1,2) }"), "1\n2");
    query(_XQUERY_EVAL.args("declare variable $local:a external; $local:a",
        " map { xs:QName('local:a'): 1 }"), 1);
    query(_XQUERY_EVAL.args(".", " map { '': 1 }"), 1);
    error(_XQUERY_EVAL.args("1+"), CALCEXPR);
    error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
    // check updating expressions
    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE1);
    error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
        XQUERY_UPDATE1);
    query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));
    query(_XQUERY_EVAL.args(DOC.args(PATH).trim()));

    // check additional options
    query(_DB_CREATE.args(NAME));
    query("try { " + _XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }") + " } catch * { () }", "");
    query(_XQUERY_EVAL.args("static-base-uri()", " map { }",
        " map { 'base-uri': 'http://x.x/' }"), "http://x.x/");

    error(_XQUERY_EVAL.args(DOC.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION2_X);
    error(_XQUERY_EVAL.args(_DB_OPEN.args(NAME).trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args(_FILE_EXISTS.args("x").trim(), " map { }",
        " map { 'permission': 'none' }"), XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[. = 0]", " map { }",
        " map { 'timeout': 1 }"), XQUERY_TIMEOUT);
    error(_XQUERY_EVAL.args("(1 to 10000000000000) ! <a/>", " map { }",
        " map { 'memory': 10 }"), XQUERY_MEMORY);
    // check updating expressions
    error(_XQUERY_EVAL.args("file:exists('x')", " map{}", " map{ 'permission':'none'}"),
        XQUERY_PERMISSION1_X);
    error(_XQUERY_EVAL.args("(1 to 10000000000000)[.=0]", " map{}", " map{ 'timeout':'1'}"),
        XQUERY_TIMEOUT);
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -13,7 +13,7 @@

     error("declare variable $a:=1;" + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     error("for $a in (1,2) return " + _XQUERY_EVAL.args("$a"), VARUNDEF_X);
     // check updating expressions
-    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE2);
+    error(_XQUERY_EVAL.args("delete node ()"), XQUERY_UPDATE1);
     error(_XQUERY_EVAL.args("declare %updating function local:x() {()}; local:x()"),
         XQUERY_UPDATE1);
     query(_XQUERY_EVAL.args("declare %updating function local:x() {()}; 1"));

----------------------------------------------------------------
state
1
----------------------------------------------------------------
description
单元测试不通过
----------------------------------------------------------------
message
-------------------------------------------------------------------------------
Test set: org.basex.query.func.XQueryModuleTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.982 s <<< FAILURE! - in org.basex.query.func.XQueryModuleTest
eval(org.basex.query.func.XQueryModuleTest)  Time elapsed: 1.427 s  <<< FAILURE!
java.lang.AssertionError: 

Query:  xquery:eval("fn:doc(""Sandbox"")",map { },map { 'permission': 'none' })
Error(s): XQUERY_PERMISSION2_X
Result: XQUERY_PERMISSION1_X (read permission needed.)
	at org.basex.query.func.XQueryModuleTest.eval(XQueryModuleTest.java:48)


--------------------------------------------------------------------------------------------------------------------------------
