--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.890625
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.890625
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
private Item updateEntries(final QueryContext ctx) throws QueryException {
    // check argument
    final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());

    // sorted paths in original file
    final String in = attribute(elm, A_HREF, true);

    // target and temporary output file
    final IOFile target = new IOFile(string(checkStr(expr[1], ctx)));
    IOFile out;
    do {
      out = new IOFile(target.path() + new Random().nextInt(0x7FFFFFFF));
    } while(out.exists());

    // open zip file
    if(!new IOFile(in).exists()) ZIP_NOTFOUND.thrw(info, in);
    ZipFile zf = null;
    boolean ok = true;
    try {
      zf = new ZipFile(in);
      // write zip file
      FileOutputStream fos = null;
      try {
        fos = new FileOutputStream(out.path());
        final ZipOutputStream zos =
          new ZipOutputStream(new BufferedOutputStream(fos));
        // fill new zip file with entries from old file and description
        create(zos, elm.children(), "", zf, ctx);
        zos.close();
      } catch(final IOException ex) {
        ok = false;
        ZIP_FAIL.thrw(info, ex.getMessage());
      } finally {
        if(fos != null) try { fos.close(); } catch(final IOException ex) { }
      }
    } catch(final IOException ex) {
      throw ZIP_FAIL.thrw(info, ex.getMessage());
    } finally {
      if(zf != null) try { zf.close(); } catch(final IOException e) { }
      if(ok) {
        // rename temporary file to final target
        target.delete();
        out.rename(target);
      } else {
        // remove temporary file
        out.delete();
      }
    }
    return null;
  }
----------------------------------------------------------------
old test
@Test
  public void updateEntries() throws IOException {
    check(_ZIP_UPDATE_ENTRIES);
    String list = query(_ZIP_ENTRIES.args(ZIP));

    // create and compare identical zip file
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));
    final String list2 = query(_ZIP_ENTRIES.args(TMPZIP));
    assertEquals(list.replaceAll(" href=\".*?\"", ""),
        list2.replaceAll(" href=\".*?\"", ""));

    // remove one directory
    list = list.replaceAll("<zip:dir name=.test.>.*</zip:dir>", "");
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));

    // new file has no entries
    list = list.replaceAll("<zip:dir.*</zip:dir>", "");
    error(_ZIP_UPDATE_ENTRIES.args(list,
        new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
  }
----------------------------------------------------------------
new product
private Item updateEntries(final QueryContext ctx) throws QueryException {
    // check argument
    final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());

    // sorted paths in original file
    final String in = attribute(elm, A_HREF, true);

    // target and temporary output file
    final IOFile target = new IOFile(string(checkStr(expr[1], ctx)));
    IOFile out;
    do {
      out = new IOFile(target.path() + new Random().nextInt(0x7FFFFFFF));
    } while(out.exists());

    // open zip file
    if(!new IOFile(in).exists()) ZIP_NOTFOUND.thrw(info, in);
    ZipFile zf = null;
    boolean ok = true;
    try {
      zf = new ZipFile(in);
      // write zip file
      FileOutputStream fos = null;
      try {
        fos = new FileOutputStream(out.path());
        final ZipOutputStream zos =
          new ZipOutputStream(new BufferedOutputStream(fos));
        // fill new zip file with entries from old file and description
        create(zos, elm.children(), "", zf, ctx);
        zos.close();
      } catch(final IOException ex) {
        ok = false;
        ZIP_FAIL.thrw(info, ex);
      } finally {
        if(fos != null) try { fos.close(); } catch(final IOException ex) { }
      }
    } catch(final IOException ex) {
      throw ZIP_FAIL.thrw(info, ex);
    } finally {
      if(zf != null) try { zf.close(); } catch(final IOException e) { }
      if(ok) {
        // rename temporary file to final target
        target.delete();
        out.rename(target);
      } else {
        // remove temporary file
        out.delete();
      }
    }
    return null;
  }
----------------------------------------------------------------
new test
@Test
  public void zipUpdateEntries() throws IOException {
    check(_ZIP_UPDATE_ENTRIES);
    String list = query(_ZIP_ENTRIES.args(ZIP));

    // create and compare identical zip file
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));
    final String list2 = query(_ZIP_ENTRIES.args(TMPZIP));
    assertEquals(list.replaceAll(" href=\".*?\"", ""),
        list2.replaceAll(" href=\".*?\"", ""));

    // remove one directory
    list = list.replaceAll("<zip:dir name=.test.>.*</zip:dir>", "");
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));

    // new file has no entries
    list = list.replaceAll("<zip:dir.*</zip:dir>", "");
    error(_ZIP_UPDATE_ENTRIES.args(list,
        new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index fe2979b..9a5c287 100644
--- a/old_product.java
+++ b/new_product.java
@@ -30,12 +30,12 @@ private Item updateEntries(final QueryContext ctx) throws QueryException {
         zos.close();
       } catch(final IOException ex) {
         ok = false;
-        ZIP_FAIL.thrw(info, ex.getMessage());
+        ZIP_FAIL.thrw(info, ex);
       } finally {
         if(fos != null) try { fos.close(); } catch(final IOException ex) { }
       }
     } catch(final IOException ex) {
-      throw ZIP_FAIL.thrw(info, ex.getMessage());
+      throw ZIP_FAIL.thrw(info, ex);
     } finally {
       if(zf != null) try { zf.close(); } catch(final IOException e) { }
       if(ok) {

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 9084214..2b388ad 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test
-  public void updateEntries() throws IOException {
+  public void zipUpdateEntries() throws IOException {
     check(_ZIP_UPDATE_ENTRIES);
     String list = query(_ZIP_ENTRIES.args(ZIP));
 

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index a36f4f5..35afa32 100644
--- a/old_product.java
+++ b/new_product.java
@@ -4,6 +4,6 @@ private Str textEntry(final QueryContext ctx) throws QueryException {
     try {
       return Str.get(new NewlineInput(io).encoding(enc).content());
     } catch(final IOException ex) {
-      throw ZIPFAIL.thrw(info, ex.getMessage());
+      throw ZIP_FAIL.thrw(info, ex.getMessage());
     }
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index c5b40b6..e76e38a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,7 +3,7 @@
     check(_ZIP_TEXT_ENTRY);
     query(_ZIP_TEXT_ENTRY.args(ZIP, ENTRY1));
     query(_ZIP_TEXT_ENTRY.args(ZIP, ENTRY1, "US-ASCII"));
-    error(_ZIP_TEXT_ENTRY.args(ZIP, ENTRY1, "xyz"), Err.ZIPFAIL);
+    error(_ZIP_TEXT_ENTRY.args(ZIP, ENTRY1, "xyz"), Err.ZIP_FAIL);
     // newlines are removed from the result..
     contains(_ZIP_TEXT_ENTRY.args(ZIP, ENTRY1), "aaboutab");
   }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.890625
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void updateEntries() throws IOException {
    check(_ZIP_UPDATE_ENTRIES);
    String list = query(_ZIP_ENTRIES.args(ZIP));

    // create and compare identical zip file
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));
    final String list2 = query(_ZIP_ENTRIES.args(TMPZIP));
    assertEquals(list.replaceAll(" href=\".*?\"", ""),
        list2.replaceAll(" href=\".*?\"", ""));

    // remove one directory
    list = list.replaceAll("<zip:dir name=.test.>.*</zip:dir>", "");
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));

    // new file has no entries
    list = list.replaceAll("<zip:dir.*</zip:dir>", "");
    error(_ZIP_UPDATE_ENTRIES.args(list,
        new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void updateEntries() throws IOException {
    check(_ZIP_UPDATE_ENTRIES);
    String list = query(_ZIP_ENTRIES.args(ZIP));

    // create and compare identical zip file
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));
    final String list2 = query(_ZIP_ENTRIES.args(TMPZIP));
    assertEquals(list.replaceAll(" href=\".*?\"", ""),
        list2.replaceAll(" href=\".*?\"", ""));

    // remove one directory
    list = list.replaceAll("<zip:dir name=.test.>.*</zip:dir>", "");
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));

    // new file has no entries
    list = list.replaceAll("<zip:dir.*</zip:dir>", "");
    error(_ZIP_UPDATE_ENTRIES.args(list,
        new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void updateEntries() throws IOException {
     check(_ZIP_UPDATE_ENTRIES);
@@ -18,3 +19,4 @@

     error(_ZIP_UPDATE_ENTRIES.args(list,
         new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
   }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.890625
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
  public void updateEntries() throws IOException {
    check(_ZIP_UPDATE_ENTRIES);
    String list = query(_ZIP_ENTRIES.args(ZIP));

    // create and compare identical zip file
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));
    final String list2 = query(_ZIP_ENTRIES.args(TMPZIP));
    assertEquals(list.replaceAll(" href=\".*?\"", ""),
        list2.replaceAll(" href=\".*?\"", ""));

    // remove one directory
    list = list.replaceAll("<zip:dir name=.test.>.*</zip:dir>", "");
    query(_ZIP_UPDATE_ENTRIES.args(list, TMPZIP));

    // new file has no entries
    list = list.replaceAll("<zip:dir.*</zip:dir>", "");
    error(_ZIP_UPDATE_ENTRIES.args(list,
        new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
  }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void updateEntries() throws IOException {
     check(_ZIP_UPDATE_ENTRIES);
@@ -18,3 +19,4 @@

     error(_ZIP_UPDATE_ENTRIES.args(list,
         new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
   }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,6 +1,5 @@

-
 @Test
-  public void updateEntries() throws IOException {
+  public void zipUpdateEntries() throws IOException {
     check(_ZIP_UPDATE_ENTRIES);
     String list = query(_ZIP_ENTRIES.args(ZIP));
 
@@ -19,4 +18,3 @@

     error(_ZIP_UPDATE_ENTRIES.args(list,
         new File(TMPZIP).getCanonicalPath()), Err.ZIP_FAIL);
   }
-

--------------------------------------------------------------------------------------------------------------------------------
