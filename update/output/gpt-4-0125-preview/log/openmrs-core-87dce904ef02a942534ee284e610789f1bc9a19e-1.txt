--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.3888888888888889
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
\0\openmrs-core\api\src\test\java\org\openmrs\OrderTest.java:[136,71] 未报告的异常 java.lang.IllegalAccessException；必须对其进行捕捉或声明以便抛出
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.1:testCompile (default-testCompile) on project openmrs-api: Compilation failure
\0\openmrs-core\api\src\test\java\org\openmrs\OrderTest.java:[136,71] 未报告的异常 java.lang.IllegalAccessException；必须对其进行捕捉或声明以便抛出
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
old product
public Order cloneForDiscontinuing() {
		Order newOrder = new Order();
		newOrder.setCareSetting(this.getCareSetting());
		newOrder.setConcept(this.getConcept());
		newOrder.setAction(Action.DISCONTINUE);
		newOrder.setPreviousOrder(this);
		
		return newOrder;
	}
----------------------------------------------------------------
old test
@Test
	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() {
		Order anOrder = new Order();
		CareSetting careSetting = new CareSetting();
		anOrder.setCareSetting(careSetting);
		
		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
		
		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
	}
----------------------------------------------------------------
new product
public Order cloneForDiscontinuing() throws IllegalAccessException, InstantiationException {
		Order newOrder = this.getClass().newInstance();
		newOrder.setCareSetting(this.getCareSetting());
		newOrder.setConcept(this.getConcept());
		newOrder.setAction(Action.DISCONTINUE);
		newOrder.setPreviousOrder(this);
		
		return newOrder;
	}
----------------------------------------------------------------
new test
@Test
	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws Exception {
		Order anOrder = new Order();
		CareSetting careSetting = new CareSetting();
		anOrder.setCareSetting(careSetting);
		
		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
		
		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index b302f00..5978850 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
-public Order cloneForDiscontinuing() {
-		Order newOrder = new Order();
+public Order cloneForDiscontinuing() throws IllegalAccessException, InstantiationException {
+		Order newOrder = this.getClass().newInstance();
 		newOrder.setCareSetting(this.getCareSetting());
 		newOrder.setConcept(this.getConcept());
 		newOrder.setAction(Action.DISCONTINUE);

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 0bff997..934b694 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,6 +1,6 @@
 @Test
 	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
-	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() {
+	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws Exception {
 		Order anOrder = new Order();
 		CareSetting careSetting = new CareSetting();
 		anOrder.setCareSetting(careSetting);

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index b12f943..8cdcb63 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
-public Order cloneForDiscontinuing() throws IllegalAccessException, InstantiationException {
-		Order newOrder = this.getClass().newInstance();
+public Order cloneForDiscontinuing() {
+		Order newOrder = new Order();
 		newOrder.setCareSetting(this.getCareSetting());
 		newOrder.setConcept(this.getConcept());
 		newOrder.setAction(Action.DISCONTINUE);

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 5f92733..ad5ce21 100644
--- a/old_test.java
+++ b/new_test.java
@@ -8,13 +8,11 @@
 		
 		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
 		
-		assertEquals(anOrder.getClass(), orderThatCanDiscontinueTheOrder.getClass());
-		
 		assertEquals(anOrder.getPatient(), orderThatCanDiscontinueTheOrder.getPatient());
 		
 		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
 		
-		assertEquals("should set previous order to anOrder", orderThatCanDiscontinueTheOrder.getPreviousOrder(), anOrder);
+		assertEquals("should set previous order to anOrder", anOrder, orderThatCanDiscontinueTheOrder.getPreviousOrder());
 		
 		assertEquals("should set new order action to new", orderThatCanDiscontinueTheOrder.getAction(),
 		    Order.Action.DISCONTINUE);

----------------------------------------------------------------
coverage
0.3888888888888889
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
		Order anOrder = new Order();
		CareSetting careSetting = new CareSetting();
		anOrder.setCareSetting(careSetting);
		
		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
		
		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
	}
</new_test>
----------------------------------------------------------------
测试代码

@Test
	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
		Order anOrder = new Order();
		CareSetting careSetting = new CareSetting();
		anOrder.setCareSetting(careSetting);
		
		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
		
		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
	}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,6 +1,6 @@

+
 @Test
-	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
-	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() {
+	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
 		Order anOrder = new Order();
 		CareSetting careSetting = new CareSetting();
 		anOrder.setCareSetting(careSetting);
@@ -8,4 +8,7 @@

 		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
 		
 		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
+		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
+		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
 	}
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.3888888888888889
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
		Order anOrder = new Order();
		CareSetting careSetting = new CareSetting();
		anOrder.setCareSetting(careSetting);
		
		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
		
		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
	}

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,6 +1,6 @@

+
 @Test
-	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
-	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() {
+	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
 		Order anOrder = new Order();
 		CareSetting careSetting = new CareSetting();
 		anOrder.setCareSetting(careSetting);
@@ -8,4 +8,7 @@

 		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
 		
 		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
+		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
+		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
 	}
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,6 +1,6 @@

-
 @Test
-	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws IllegalAccessException, InstantiationException {
+	@Verifies(value = "set this care setting to new order", method = "cloneForDiscontinuing(Order)")
+	public void cloneForDiscontinuing_shouldSetThisCareSettingToNewOrder() throws Exception {
 		Order anOrder = new Order();
 		CareSetting careSetting = new CareSetting();
 		anOrder.setCareSetting(careSetting);
@@ -8,7 +8,4 @@

 		Order orderThatCanDiscontinueTheOrder = anOrder.cloneForDiscontinuing();
 		
 		assertEquals(anOrder.getCareSetting(), orderThatCanDiscontinueTheOrder.getCareSetting());
-		assertEquals(anOrder.getConcept(), orderThatCanDiscontinueTheOrder.getConcept());
-		assertEquals(Order.Action.DISCONTINUE, orderThatCanDiscontinueTheOrder.getAction());
 	}
-

--------------------------------------------------------------------------------------------------------------------------------
