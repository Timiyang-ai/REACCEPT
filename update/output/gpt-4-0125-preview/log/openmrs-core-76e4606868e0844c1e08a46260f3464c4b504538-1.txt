--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.8604651162790697
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.8604651162790697
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
public Location getDefaultLocation() throws APIException {
		
		// TODO The name of the default location should be configured using global properties 
		Location location = getLocation("Unknown Location");
		
		// If Unknown Location does not exist, try Unknown
		if (location == null) {
			location = getLocation("Unknown");
		}
		
		// If neither exist, get the first available location
		if (location == null) {
			location = getLocation(Integer.valueOf(1));
		}
		
		// TODO Figure out if we should/could throw an exception if there's  
		// no location to fall back on.
		//if (location == null) { 
		//	throw new APIException("Default location does not exist");
		//}
		
		return location;
	}
----------------------------------------------------------------
old test
@Test
	@Verifies(value = "should return default location for the implementation", method = "getDefaultLocation()")
	public void getDefaultLocation_shouldReturnDefaultLocationForTheImplementation() throws Exception {
		Assert.assertNotNull(Context.getLocationService().getDefaultLocation());
	}
----------------------------------------------------------------
new product
public Location getDefaultLocation() throws APIException {
		Location location = null;
		String locationGP = Context.getAdministrationService().getGlobalProperty(
		    OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME);
		
		if (StringUtils.hasText(locationGP))
			location = getLocation(locationGP);
		
		//Try to look up 'Unknown Location' in case the global property is something else
		if (location == null && (!StringUtils.hasText(locationGP) || !locationGP.equalsIgnoreCase("Unknown Location")))
			location = getLocation("Unknown Location");
		
		// If Unknown Location does not exist, try Unknown if the global property was different
		if (location == null && (!StringUtils.hasText(locationGP) || !locationGP.equalsIgnoreCase("Unknown"))) {
			location = getLocation("Unknown");
		}
		
		// If neither exist, get the first available location
		if (location == null) {
			location = getLocation(Integer.valueOf(1));
		}
		
		// TODO Figure out if we should/could throw an exception if there's  
		// no location to fall back on.
		//if (location == null) { 
		//	throw new APIException("Default location does not exist");
		//}
		
		return location;
	}
----------------------------------------------------------------
new test
@Test
	@Verifies(value = "should return default location for the implementation", method = "getDefaultLocation()")
	public void getDefaultLocation_shouldReturnDefaultLocationForTheImplementation() throws Exception {
		//set the global property for default location to something other than Unknown Location
		GlobalProperty gp = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME,
		        "Test Parent Location", "Testing default Location");
		Context.getAdministrationService().saveGlobalProperty(gp);
		Assert.assertEquals("Test Parent Location", Context.getLocationService().getDefaultLocation().getName());
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 71b9d2e..40574fa 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,10 +1,17 @@
 public Location getDefaultLocation() throws APIException {
+		Location location = null;
+		String locationGP = Context.getAdministrationService().getGlobalProperty(
+		    OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME);
 		
-		// TODO The name of the default location should be configured using global properties 
-		Location location = getLocation("Unknown Location");
+		if (StringUtils.hasText(locationGP))
+			location = getLocation(locationGP);
 		
-		// If Unknown Location does not exist, try Unknown
-		if (location == null) {
+		//Try to look up 'Unknown Location' in case the global property is something else
+		if (location == null && (!StringUtils.hasText(locationGP) || !locationGP.equalsIgnoreCase("Unknown Location")))
+			location = getLocation("Unknown Location");
+		
+		// If Unknown Location does not exist, try Unknown if the global property was different
+		if (location == null && (!StringUtils.hasText(locationGP) || !locationGP.equalsIgnoreCase("Unknown"))) {
 			location = getLocation("Unknown");
 		}
 		

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 3e83dfe..13fd708 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,9 @@
 @Test
 	@Verifies(value = "should return default location for the implementation", method = "getDefaultLocation()")
 	public void getDefaultLocation_shouldReturnDefaultLocationForTheImplementation() throws Exception {
-		Assert.assertNotNull(Context.getLocationService().getDefaultLocation());
+		//set the global property for default location to something other than Unknown Location
+		GlobalProperty gp = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME,
+		        "Test Parent Location", "Testing default Location");
+		Context.getAdministrationService().saveGlobalProperty(gp);
+		Assert.assertEquals("Test Parent Location", Context.getLocationService().getDefaultLocation().getName());
 	}
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 1fde32a..9bb5b68 100644
--- a/old_product.java
+++ b/new_product.java
@@ -23,5 +23,7 @@ public Location saveLocation(Location location) throws APIException {
 			}
 		}
 		
+		CustomDatatypeUtil.saveAttributesIfNecessary(location);
+		
 		return dao.saveLocation(location);
 	}
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index ab1060f..9b936ae 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,6 +6,7 @@
 		// First, create a new Location
 		Location location = new Location();
 		location.setName("name");
+		location.setDescription("is a location");
 		ls.saveLocation(location);
 		
 		// Create a tag

----------------------------------------------------------------
coverage
0.8604651162790697
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
@Verifies(value = "should return default location based on global property name, fallback to 'Unknown Location' or 'Unknown'", method = "getDefaultLocation()")
public void getDefaultLocation_shouldReturnDefaultLocationBasedOnGlobalPropertyNameFallbackToUnknownLocationOrUnknown() throws Exception {
    // Set up global property for default location name
    AdministrationService as = Context.getAdministrationService();
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Test Location");
    
    // Assuming getLocation(String name) method correctly fetches location by name
    LocationService ls = Context.getLocationService();
    Location testLocation = new Location();
    testLocation.setName("Test Location");
    ls.saveLocation(testLocation);
    
    // Verify getDefaultLocation returns the location set by global property
    Assert.assertEquals("Test Location", ls.getDefaultLocation().getName());
    
    // Change global property to a non-existing location and verify fallback to 'Unknown Location'
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Non Existing Location");
    Location unknownLocation = new Location();
    unknownLocation.setName("Unknown Location");
    ls.saveLocation(unknownLocation);
    
    Assert.assertEquals("Unknown Location", ls.getDefaultLocation().getName());
    
    // Verify fallback to 'Unknown' if 'Unknown Location' also doesn't exist
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Another Non Existing Location");
    Location unknown = new Location();
    unknown.setName("Unknown");
    ls.saveLocation(unknown);
    
    Assert.assertEquals("Unknown", ls.getDefaultLocation().getName());
    
    // Clean up
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "");
}
</new_test>
----------------------------------------------------------------
测试代码

@Test
@Verifies(value = "should return default location based on global property name, fallback to 'Unknown Location' or 'Unknown'", method = "getDefaultLocation()")
public void getDefaultLocation_shouldReturnDefaultLocationBasedOnGlobalPropertyNameFallbackToUnknownLocationOrUnknown() throws Exception {
    // Set up global property for default location name
    AdministrationService as = Context.getAdministrationService();
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Test Location");
    
    // Assuming getLocation(String name) method correctly fetches location by name
    LocationService ls = Context.getLocationService();
    Location testLocation = new Location();
    testLocation.setName("Test Location");
    ls.saveLocation(testLocation);
    
    // Verify getDefaultLocation returns the location set by global property
    Assert.assertEquals("Test Location", ls.getDefaultLocation().getName());
    
    // Change global property to a non-existing location and verify fallback to 'Unknown Location'
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Non Existing Location");
    Location unknownLocation = new Location();
    unknownLocation.setName("Unknown Location");
    ls.saveLocation(unknownLocation);
    
    Assert.assertEquals("Unknown Location", ls.getDefaultLocation().getName());
    
    // Verify fallback to 'Unknown' if 'Unknown Location' also doesn't exist
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Another Non Existing Location");
    Location unknown = new Location();
    unknown.setName("Unknown");
    ls.saveLocation(unknown);
    
    Assert.assertEquals("Unknown", ls.getDefaultLocation().getName());
    
    // Clean up
    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "");
}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,5 +1,37 @@

+
 @Test
-	@Verifies(value = "should return default location for the implementation", method = "getDefaultLocation()")
-	public void getDefaultLocation_shouldReturnDefaultLocationForTheImplementation() throws Exception {
-		Assert.assertNotNull(Context.getLocationService().getDefaultLocation());
-	}
+@Verifies(value = "should return default location based on global property name, fallback to 'Unknown Location' or 'Unknown'", method = "getDefaultLocation()")
+public void getDefaultLocation_shouldReturnDefaultLocationBasedOnGlobalPropertyNameFallbackToUnknownLocationOrUnknown() throws Exception {
+    // Set up global property for default location name
+    AdministrationService as = Context.getAdministrationService();
+    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Test Location");
+    
+    // Assuming getLocation(String name) method correctly fetches location by name
+    LocationService ls = Context.getLocationService();
+    Location testLocation = new Location();
+    testLocation.setName("Test Location");
+    ls.saveLocation(testLocation);
+    
+    // Verify getDefaultLocation returns the location set by global property
+    Assert.assertEquals("Test Location", ls.getDefaultLocation().getName());
+    
+    // Change global property to a non-existing location and verify fallback to 'Unknown Location'
+    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Non Existing Location");
+    Location unknownLocation = new Location();
+    unknownLocation.setName("Unknown Location");
+    ls.saveLocation(unknownLocation);
+    
+    Assert.assertEquals("Unknown Location", ls.getDefaultLocation().getName());
+    
+    // Verify fallback to 'Unknown' if 'Unknown Location' also doesn't exist
+    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "Another Non Existing Location");
+    Location unknown = new Location();
+    unknown.setName("Unknown");
+    ls.saveLocation(unknown);
+    
+    Assert.assertEquals("Unknown", ls.getDefaultLocation().getName());
+    
+    // Clean up
+    as.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME, "");
+}
+

----------------------------------------------------------------
state
1
----------------------------------------------------------------
description
单元测试不通过
----------------------------------------------------------------
message
-------------------------------------------------------------------------------
Test set: org.openmrs.api.LocationServiceTest
-------------------------------------------------------------------------------
Tests run: 50, Failures: 0, Errors: 1, Skipped: 2, Time elapsed: 9.6 sec <<< FAILURE!
getDefaultLocation_shouldReturnDefaultLocationBasedOnGlobalPropertyNameFallbackToUnknownLocationOrUnknown(org.openmrs.api.LocationServiceTest)  Time elapsed: 0.147 sec  <<< ERROR!
org.hibernate.NonUniqueObjectException: a different object with the same identifier value was already associated with the session: [org.openmrs.GlobalProperty#default_location]
	at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:168)
	at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)
	at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:187)
	at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:172)
	at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:94)
	at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:70)
	at org.hibernate.impl.SessionImpl.fireSaveOrUpdate(SessionImpl.java:507)
	at org.hibernate.impl.SessionImpl.saveOrUpdate(SessionImpl.java:499)
	at org.hibernate.impl.SessionImpl.saveOrUpdate(SessionImpl.java:495)
	at org.openmrs.api.db.hibernate.HibernateAdministrationDAO.saveGlobalProperty(HibernateAdministrationDAO.java:300)
	at org.openmrs.api.impl.AdministrationServiceImpl.saveGlobalProperty(AdministrationServiceImpl.java:781)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy20.saveGlobalProperty(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.openmrs.aop.LoggingAdvice.invoke(LoggingAdvice.java:114)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy40.saveGlobalProperty(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy40.saveGlobalProperty(Unknown Source)
	at org.openmrs.api.impl.AdministrationServiceImpl.setGlobalProperty(AdministrationServiceImpl.java:691)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy20.setGlobalProperty(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.openmrs.aop.LoggingAdvice.invoke(LoggingAdvice.java:114)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:50)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy40.setGlobalProperty(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)
	at com.sun.proxy.$Proxy40.setGlobalProperty(Unknown Source)
	at org.openmrs.api.LocationServiceTest.getDefaultLocation_shouldReturnDefaultLocationBasedOnGlobalPropertyNameFallbackToUnknownLocationOrUnknown(LocationServiceTest.java:226)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)


--------------------------------------------------------------------------------------------------------------------------------
