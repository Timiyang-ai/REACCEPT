--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.9594594594594594
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.9594594594594594
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
public void delete(final String pkg, final InputInfo ii)
      throws QueryException {
    for(final byte[] nextPkg : ctx.repo.pkgDict()) {
      if(nextPkg != null) {
        final byte[] dir = ctx.repo.pkgDict().get(nextPkg);
        if(eq(Package.getName(nextPkg), token(pkg)) || eq(dir, token(pkg))) {
          // A package can be deleted either by its name or by its directory
          // name
          final byte[] primPkg = getPrimary(nextPkg, ii);
          if(primPkg == null) {
            // Clean package repository
            final File f = new File(ctx.prop.get(Prop.REPOPATH), string(dir));
            final File desc = new File(f, DESCRIPTOR);
            ctx.repo.remove(new PkgParser(ctx, ii).parse(new IOFile(desc)));
            // Package does not participate in a dependency => delete it
            deleteFromDisc(f, ii);
          } else {
            PKGDEP.thrw(ii, string(primPkg), pkg);
          }
        }
      }
    }
  }
----------------------------------------------------------------
old test
@Test
  public void testDelete() throws BaseXException {
    // Install a package without dependencies (pkg3)
    new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
    // Check if pkg3 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg3-10.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir1 = new File(REPO + "pkg3");
    assertTrue(pkgDir1.exists());
    assertTrue(pkgDir1.isDirectory());
    final File pkgDesc1 = new File(REPO + "pkg3/expath-pkg.xml");
    assertTrue(pkgDesc1.exists());
    final File modDir1 = new File(REPO + "pkg3/pkg3/mod");
    assertTrue(modDir1.exists());
    assertTrue(modDir1.isDirectory());
    final File modFile1 = new File(REPO + "pkg3/pkg3/mod/pkg3mod1.xql");
    assertTrue(modFile1.exists());
    // Install another package (pkg4) with a dependency to pkg3
    new RepoInstall(REPO + "pkg4.xar", null).execute(ctx);
    // Check if pkg4 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg4-2.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir2 = new File(REPO + "pkg4");
    assertTrue(pkgDir2.exists());
    assertTrue(pkgDir2.isDirectory());
    final File pkgDesc2 = new File(REPO + "pkg4/expath-pkg.xml");
    assertTrue(pkgDesc2.exists());
    final File modDir2 = new File(REPO + "pkg4/pkg4/mod");
    assertTrue(modDir2.exists());
    assertTrue(modDir2.isDirectory());
    final File modFile2 = new File(REPO + "pkg4/pkg4/mod/pkg4mod1.xql");
    assertTrue(modFile2.exists());
    // Try to delete pkg3
    try {
      new RepoManager(ctx).delete("pkg3", null);
      fail("Package involved in a dependency was deleted.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGDEP);
    }
    // Try to delete pkg4 (use package name)
    new RepoDelete("http://www.pkg4.com", null).execute(ctx);
    // Check if pkg4 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg4-2.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir2.exists());
    // Try to delete pkg3 (use package dir)
    new RepoDelete("pkg3", null).execute(ctx);
    // Check if pkg3 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir1.exists());
  }
----------------------------------------------------------------
new product
public void delete(final String pkg, final InputInfo ii)
      throws QueryException {
    boolean found = false;
    for(final byte[] nextPkg : ctx.repo.pkgDict()) {
      if(nextPkg != null) {
        final byte[] dir = ctx.repo.pkgDict().get(nextPkg);
        if(eq(Package.getName(nextPkg), token(pkg)) || eq(dir, token(pkg))) {
          // A package can be deleted either by its name or by its directory
          // name
          found = true;
          // Check if package to be deleted participates in a dependency
          final byte[] primPkg = getPrimary(nextPkg, ii);
          if(primPkg == null) {
            // Clean package repository
            final File f = new File(ctx.prop.get(Prop.REPOPATH), string(dir));
            final File desc = new File(f, DESCRIPTOR);
            ctx.repo.remove(new PkgParser(ctx, ii).parse(new IOFile(desc)));
            // Package does not participate in a dependency => delete it
            deleteFromDisc(f, ii);
          } else PKGDEP.thrw(ii, string(primPkg), pkg);
        }
      }
    }
    if(!found) PKGNOTINST.thrw(ii, pkg);
  }
----------------------------------------------------------------
new test
@Test
  public void testDelete() throws BaseXException {
    // Try to delete a package which is not installed
    try {
      new RepoManager(ctx).delete("xyz", null);
      fail("Not installed package not detected.");
    } catch(QueryException ex) {
      check(ex, Err.PKGNOTINST);
    }
    // Install a package without dependencies (pkg3)
    new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
    // Check if pkg3 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg3-10.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir1 = new File(REPO + "pkg3");
    assertTrue(pkgDir1.exists());
    assertTrue(pkgDir1.isDirectory());
    final File pkgDesc1 = new File(REPO + "pkg3/expath-pkg.xml");
    assertTrue(pkgDesc1.exists());
    final File modDir1 = new File(REPO + "pkg3/pkg3/mod");
    assertTrue(modDir1.exists());
    assertTrue(modDir1.isDirectory());
    final File modFile1 = new File(REPO + "pkg3/pkg3/mod/pkg3mod1.xql");
    assertTrue(modFile1.exists());
    // Install another package (pkg4) with a dependency to pkg3
    new RepoInstall(REPO + "pkg4.xar", null).execute(ctx);
    // Check if pkg4 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg4-2.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir2 = new File(REPO + "pkg4");
    assertTrue(pkgDir2.exists());
    assertTrue(pkgDir2.isDirectory());
    final File pkgDesc2 = new File(REPO + "pkg4/expath-pkg.xml");
    assertTrue(pkgDesc2.exists());
    final File modDir2 = new File(REPO + "pkg4/pkg4/mod");
    assertTrue(modDir2.exists());
    assertTrue(modDir2.isDirectory());
    final File modFile2 = new File(REPO + "pkg4/pkg4/mod/pkg4mod1.xql");
    assertTrue(modFile2.exists());
    // Try to delete pkg3
    try {
      new RepoManager(ctx).delete("pkg3", null);
      fail("Package involved in a dependency was deleted.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGDEP);
    }
    // Try to delete pkg4 (use package name)
    new RepoDelete("http://www.pkg4.com", null).execute(ctx);
    // Check if pkg4 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg4-2.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir2.exists());
    // Try to delete pkg3 (use package dir)
    new RepoDelete("pkg3", null).execute(ctx);
    // Check if pkg3 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir1.exists());
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index bfd1fae..3803c3d 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,11 +1,14 @@
 public void delete(final String pkg, final InputInfo ii)
       throws QueryException {
+    boolean found = false;
     for(final byte[] nextPkg : ctx.repo.pkgDict()) {
       if(nextPkg != null) {
         final byte[] dir = ctx.repo.pkgDict().get(nextPkg);
         if(eq(Package.getName(nextPkg), token(pkg)) || eq(dir, token(pkg))) {
           // A package can be deleted either by its name or by its directory
           // name
+          found = true;
+          // Check if package to be deleted participates in a dependency
           final byte[] primPkg = getPrimary(nextPkg, ii);
           if(primPkg == null) {
             // Clean package repository
@@ -14,10 +17,9 @@ public void delete(final String pkg, final InputInfo ii)
             ctx.repo.remove(new PkgParser(ctx, ii).parse(new IOFile(desc)));
             // Package does not participate in a dependency => delete it
             deleteFromDisc(f, ii);
-          } else {
-            PKGDEP.thrw(ii, string(primPkg), pkg);
-          }
+          } else PKGDEP.thrw(ii, string(primPkg), pkg);
         }
       }
     }
+    if(!found) PKGNOTINST.thrw(ii, pkg);
   }
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 051ddfa..778a4eb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,12 @@
 @Test
   public void testDelete() throws BaseXException {
+    // Try to delete a package which is not installed
+    try {
+      new RepoManager(ctx).delete("xyz", null);
+      fail("Not installed package not detected.");
+    } catch(QueryException ex) {
+      check(ex, Err.PKGNOTINST);
+    }
     // Install a package without dependencies (pkg3)
     new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
     // Check if pkg3 is registered in the repo

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 2b69e0a..fb7ec94 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,24 +2,23 @@ public void delete(final String pkg, final InputInfo ii)
       throws QueryException {
     boolean found = false;
     for(final byte[] nextPkg : repo.pkgDict()) {
-      if(nextPkg != null) {
-        final byte[] dir = repo.pkgDict().get(nextPkg);
-        if(eq(Package.name(nextPkg), token(pkg)) || eq(dir, token(pkg))) {
-          // A package can be deleted either by its name or by its directory
-          // name
-          found = true;
-          // check if package to be deleted participates in a dependency
-          final byte[] primPkg = primary(nextPkg, ii);
-          if(primPkg == null) {
-            // clean package repository
-            final IOFile f = repo.path(string(dir));
-            final IOFile desc = new IOFile(f, DESCRIPTOR);
-            repo.remove(new PkgParser(repo, ii).parse(desc));
-            // package does not participate in a dependency => delete it
-            if(!f.delete()) CANNOTDELPKG.thrw(ii);
-          } else PKGDEP.thrw(ii, string(primPkg), pkg);
-        }
+      if(nextPkg == null) continue;
+
+      final byte[] dir = repo.pkgDict().get(nextPkg);
+      if(eq(Package.name(nextPkg), token(pkg)) || eq(dir, token(pkg))) {
+        // a package can be deleted either by its name or by its directory name
+        found = true;
+        // check if package to be deleted participates in a dependency
+        final byte[] primPkg = primary(nextPkg, ii);
+        if(primPkg != null) PKGDEP.thrw(ii, string(primPkg), pkg);
+
+        // clean package repository
+        final IOFile f = repo.path(string(dir));
+        final IOFile desc = new IOFile(f, DESCRIPTOR);
+        repo.remove(new PkgParser(repo, ii).parse(desc));
+        // package does not participate in a dependency => delete it
+        if(!f.delete()) CANNOTDELPKG.thrw(ii);
       }
     }
-    if(!found) PKGNOTINST.thrw(ii, pkg);
+    if(!found) PKGNOTEXIST.thrw(ii, pkg);
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index a867177..9949167 100644
--- a/old_test.java
+++ b/new_test.java
@@ -5,7 +5,7 @@
       new RepoManager(ctx.repo).delete("xyz", null);
       fail("Not installed package not detected.");
     } catch(final QueryException ex) {
-      check(ex, Err.PKGNOTINST);
+      check(ex, Err.PKGNOTEXIST);
     }
     // install a package without dependencies (pkg3)
     new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);

----------------------------------------------------------------
coverage
0.9594594594594594
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void testDelete() throws BaseXException {
    // Install a package without dependencies (pkg3)
    new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
    // Check if pkg3 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg3-10.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir1 = new File(REPO + "pkg3");
    assertTrue(pkgDir1.exists());
    assertTrue(pkgDir1.isDirectory());
    final File pkgDesc1 = new File(REPO + "pkg3/expath-pkg.xml");
    assertTrue(pkgDesc1.exists());
    final File modDir1 = new File(REPO + "pkg3/pkg3/mod");
    assertTrue(modDir1.exists());
    assertTrue(modDir1.isDirectory());
    final File modFile1 = new File(REPO + "pkg3/pkg3/mod/pkg3mod1.xql");
    assertTrue(modFile1.exists());
    // Install another package (pkg4) with a dependency to pkg3
    new RepoInstall(REPO + "pkg4.xar", null).execute(ctx);
    // Check if pkg4 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg4-2.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir2 = new File(REPO + "pkg4");
    assertTrue(pkgDir2.exists());
    assertTrue(pkgDir2.isDirectory());
    final File pkgDesc2 = new File(REPO + "pkg4/expath-pkg.xml");
    assertTrue(pkgDesc2.exists());
    final File modDir2 = new File(REPO + "pkg4/pkg4/mod");
    assertTrue(modDir2.exists());
    assertTrue(modDir2.isDirectory());
    final File modFile2 = new File(REPO + "pkg4/pkg4/mod/pkg4mod1.xql");
    assertTrue(modFile2.exists());
    // Try to delete pkg3
    try {
      new RepoManager(ctx).delete("pkg3", null);
      fail("Package involved in a dependency was deleted.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGDEP);
    }
    // Try to delete pkg4 (use package name)
    new RepoDelete("http://www.pkg4.com", null).execute(ctx);
    // Check if pkg4 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg4-2.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir2.exists());
    // Try to delete pkg3 (use package dir)
    new RepoDelete("pkg3", null).execute(ctx);
    // Check if pkg3 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
    // Check if pkg3 directory was deleted
    assertTrue(!pkgDir1.exists());
    // Attempt to delete a non-installed package
    try {
      new RepoManager(ctx).delete("nonexistent", null);
      fail("Not installed package not detected.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
    }
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void testDelete() throws BaseXException {
    // Install a package without dependencies (pkg3)
    new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
    // Check if pkg3 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg3-10.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir1 = new File(REPO + "pkg3");
    assertTrue(pkgDir1.exists());
    assertTrue(pkgDir1.isDirectory());
    final File pkgDesc1 = new File(REPO + "pkg3/expath-pkg.xml");
    assertTrue(pkgDesc1.exists());
    final File modDir1 = new File(REPO + "pkg3/pkg3/mod");
    assertTrue(modDir1.exists());
    assertTrue(modDir1.isDirectory());
    final File modFile1 = new File(REPO + "pkg3/pkg3/mod/pkg3mod1.xql");
    assertTrue(modFile1.exists());
    // Install another package (pkg4) with a dependency to pkg3
    new RepoInstall(REPO + "pkg4.xar", null).execute(ctx);
    // Check if pkg4 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg4-2.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir2 = new File(REPO + "pkg4");
    assertTrue(pkgDir2.exists());
    assertTrue(pkgDir2.isDirectory());
    final File pkgDesc2 = new File(REPO + "pkg4/expath-pkg.xml");
    assertTrue(pkgDesc2.exists());
    final File modDir2 = new File(REPO + "pkg4/pkg4/mod");
    assertTrue(modDir2.exists());
    assertTrue(modDir2.isDirectory());
    final File modFile2 = new File(REPO + "pkg4/pkg4/mod/pkg4mod1.xql");
    assertTrue(modFile2.exists());
    // Try to delete pkg3
    try {
      new RepoManager(ctx).delete("pkg3", null);
      fail("Package involved in a dependency was deleted.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGDEP);
    }
    // Try to delete pkg4 (use package name)
    new RepoDelete("http://www.pkg4.com", null).execute(ctx);
    // Check if pkg4 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg4-2.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir2.exists());
    // Try to delete pkg3 (use package dir)
    new RepoDelete("pkg3", null).execute(ctx);
    // Check if pkg3 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
    // Check if pkg3 directory was deleted
    assertTrue(!pkgDir1.exists());
    // Attempt to delete a non-installed package
    try {
      new RepoManager(ctx).delete("nonexistent", null);
      fail("Not installed package not detected.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
    }
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void testDelete() throws BaseXException {
     // Install a package without dependencies (pkg3)
@@ -47,6 +48,14 @@

     new RepoDelete("pkg3", null).execute(ctx);
     // Check if pkg3 is unregistered from the repo
     assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
-    // Check if pkg4 directory was deleted
+    // Check if pkg3 directory was deleted
     assertTrue(!pkgDir1.exists());
+    // Attempt to delete a non-installed package
+    try {
+      new RepoManager(ctx).delete("nonexistent", null);
+      fail("Not installed package not detected.");
+    } catch(final QueryException ex) {
+      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
+    }
   }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.9594594594594594
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
  public void testDelete() throws BaseXException {
    // Install a package without dependencies (pkg3)
    new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
    // Check if pkg3 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg3-10.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir1 = new File(REPO + "pkg3");
    assertTrue(pkgDir1.exists());
    assertTrue(pkgDir1.isDirectory());
    final File pkgDesc1 = new File(REPO + "pkg3/expath-pkg.xml");
    assertTrue(pkgDesc1.exists());
    final File modDir1 = new File(REPO + "pkg3/pkg3/mod");
    assertTrue(modDir1.exists());
    assertTrue(modDir1.isDirectory());
    final File modFile1 = new File(REPO + "pkg3/pkg3/mod/pkg3mod1.xql");
    assertTrue(modFile1.exists());
    // Install another package (pkg4) with a dependency to pkg3
    new RepoInstall(REPO + "pkg4.xar", null).execute(ctx);
    // Check if pkg4 is registered in the repo
    assertNotNull(ctx.repo.pkgDict().id(token("pkg4-2.0")) != 0);
    // Check if pkg3 was correctly unzipped
    final File pkgDir2 = new File(REPO + "pkg4");
    assertTrue(pkgDir2.exists());
    assertTrue(pkgDir2.isDirectory());
    final File pkgDesc2 = new File(REPO + "pkg4/expath-pkg.xml");
    assertTrue(pkgDesc2.exists());
    final File modDir2 = new File(REPO + "pkg4/pkg4/mod");
    assertTrue(modDir2.exists());
    assertTrue(modDir2.isDirectory());
    final File modFile2 = new File(REPO + "pkg4/pkg4/mod/pkg4mod1.xql");
    assertTrue(modFile2.exists());
    // Try to delete pkg3
    try {
      new RepoManager(ctx).delete("pkg3", null);
      fail("Package involved in a dependency was deleted.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGDEP);
    }
    // Try to delete pkg4 (use package name)
    new RepoDelete("http://www.pkg4.com", null).execute(ctx);
    // Check if pkg4 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg4-2.0")) == 0);
    // Check if pkg4 directory was deleted
    assertTrue(!pkgDir2.exists());
    // Try to delete pkg3 (use package dir)
    new RepoDelete("pkg3", null).execute(ctx);
    // Check if pkg3 is unregistered from the repo
    assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
    // Check if pkg3 directory was deleted
    assertTrue(!pkgDir1.exists());
    // Attempt to delete a non-installed package
    try {
      new RepoManager(ctx).delete("nonexistent", null);
      fail("Not installed package not detected.");
    } catch(final QueryException ex) {
      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
    }
  }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
   public void testDelete() throws BaseXException {
     // Install a package without dependencies (pkg3)
@@ -47,6 +48,14 @@

     new RepoDelete("pkg3", null).execute(ctx);
     // Check if pkg3 is unregistered from the repo
     assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
-    // Check if pkg4 directory was deleted
+    // Check if pkg3 directory was deleted
     assertTrue(!pkgDir1.exists());
+    // Attempt to delete a non-installed package
+    try {
+      new RepoManager(ctx).delete("nonexistent", null);
+      fail("Not installed package not detected.");
+    } catch(final QueryException ex) {
+      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
+    }
   }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,6 +1,12 @@

-
 @Test
   public void testDelete() throws BaseXException {
+    // Try to delete a package which is not installed
+    try {
+      new RepoManager(ctx).delete("xyz", null);
+      fail("Not installed package not detected.");
+    } catch(QueryException ex) {
+      check(ex, Err.PKGNOTINST);
+    }
     // Install a package without dependencies (pkg3)
     new RepoInstall(REPO + "pkg3.xar", null).execute(ctx);
     // Check if pkg3 is registered in the repo
@@ -48,14 +54,6 @@

     new RepoDelete("pkg3", null).execute(ctx);
     // Check if pkg3 is unregistered from the repo
     assertTrue(ctx.repo.pkgDict().id(token("pkg3-10.0")) == 0);
-    // Check if pkg3 directory was deleted
+    // Check if pkg4 directory was deleted
     assertTrue(!pkgDir1.exists());
-    // Attempt to delete a non-installed package
-    try {
-      new RepoManager(ctx).delete("nonexistent", null);
-      fail("Not installed package not detected.");
-    } catch(final QueryException ex) {
-      check(ex, Err.PKGNOTINST); // Updated to reflect the new error code for not installed packages
-    }
   }
-

--------------------------------------------------------------------------------------------------------------------------------
