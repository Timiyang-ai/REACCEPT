--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.15104166666666666
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
1
----------------------------------------------------------------
old description
单元测试不通过
----------------------------------------------------------------
old message
-------------------------------------------------------------------------------
Test set: org.openmrs.api.db.hibernate.HibernatePersonDAOTest
-------------------------------------------------------------------------------
Tests run: 40, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 8.639 sec <<< FAILURE!
getPeople_shouldGetOnePersonByRandomCaseAttribute(org.openmrs.api.db.hibernate.HibernatePersonDAOTest)  Time elapsed: 0.031 sec  <<< FAILURE!
java.lang.AssertionError: expected:<1> but was:<0>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:542)
	at org.openmrs.api.db.hibernate.HibernatePersonDAOTest.getPeople_shouldGetOnePersonByRandomCaseAttribute(HibernatePersonDAOTest.java:214)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)


--------------------------------------------------------------------------------------------------------------------------------
old product
@SuppressWarnings("unchecked")
	public List<Person> getPeople(String searchString, Boolean dead, Boolean voided) {
		if (searchString == null) {
			return new ArrayList<Person>();
		}
		
		PersonSearchCriteria personSearchCriteria = new PersonSearchCriteria();
		
		searchString = searchString.replace(", ", " ");
		String[] values = searchString.split(" ");
		
		Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Person.class);
		
		personSearchCriteria.addAliasForName(criteria);
		personSearchCriteria.addAliasForAttribute(criteria);
		if (voided == null || voided == false)
			criteria.add(Restrictions.eq("personVoided", false));
		if (dead != null) {
			criteria.add(Restrictions.eq("dead", dead));
		}
		
		Disjunction disjunction = Restrictions.disjunction();
		for (String value : values) {
			if (value != null && value.length() > 0) {
				disjunction.add(personSearchCriteria.prepareCriterionForName(value, voided)).add(
				    personSearchCriteria.prepareCriterionForAttribute(value, voided));
			}
		}
		criteria.add(disjunction);
		
		criteria.addOrder(Order.asc("personId"));
		criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
		criteria.setMaxResults(getMaximumSearchResults());
		
		// TODO - remove
		log.debug(criteria.toString());
		
		return criteria.list();
	}
----------------------------------------------------------------
old test
@Test
	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
		
		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false);
		logPeople(people);
		
		Assert.assertEquals(1, people.size());
		Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName());
	}
----------------------------------------------------------------
new product
@SuppressWarnings("unchecked")
	public List<Person> getPeople(String searchString, Boolean dead, Boolean voided) {
		if (searchString == null) {
			return new ArrayList<Person>();
		}
		
		PersonSearchCriteria personSearchCriteria = new PersonSearchCriteria();
		
		searchString = searchString.replace(", ", " ");
		String[] values = searchString.split(" ");
		
		Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Person.class);
		
		personSearchCriteria.addAliasForName(criteria);
		personSearchCriteria.addAliasForAttribute(criteria);
		if (voided == null || voided == false)
			criteria.add(Restrictions.eq("personVoided", false));
		if (dead != null) {
			criteria.add(Restrictions.eq("dead", dead));
		}
		
		Disjunction disjunction = Restrictions.disjunction();
		MatchMode matchMode = personSearchCriteria.getAttributeMatchMode();
		
		for (String value : values) {
			if (value != null && value.length() > 0) {
				disjunction.add(personSearchCriteria.prepareCriterionForName(value, voided)).add(
				    personSearchCriteria.prepareCriterionForAttribute(value, voided, matchMode));
			}
		}
		criteria.add(disjunction);
		
		criteria.addOrder(Order.asc("personId"));
		criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
		criteria.setMaxResults(getMaximumSearchResults());
		
		// TODO - remove
		log.debug(criteria.toString());
		
		return criteria.list();
	}
----------------------------------------------------------------
new test
@Test
	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
		globalPropertiesTestHelper.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PERSON_ATTRIBUTE_SEARCH_MATCH_MODE,
		    OpenmrsConstants.GLOBAL_PROPERTY_PERSON_ATTRIBUTE_SEARCH_MATCH_ANYWHERE);
		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
		
		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false);
		logPeople(people);
		
		Assert.assertEquals(1, people.size());
		Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName());
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 5c46ce0..e6d4a09 100644
--- a/old_product.java
+++ b/new_product.java
@@ -20,10 +20,12 @@
 		}
 		
 		Disjunction disjunction = Restrictions.disjunction();
+		MatchMode matchMode = personSearchCriteria.getAttributeMatchMode();
+		
 		for (String value : values) {
 			if (value != null && value.length() > 0) {
 				disjunction.add(personSearchCriteria.prepareCriterionForName(value, voided)).add(
-				    personSearchCriteria.prepareCriterionForAttribute(value, voided));
+				    personSearchCriteria.prepareCriterionForAttribute(value, voided, matchMode));
 			}
 		}
 		criteria.add(disjunction);

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 072caf0..dcdbab2 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,7 @@
 @Test
 	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
+		globalPropertiesTestHelper.setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PERSON_ATTRIBUTE_SEARCH_MATCH_MODE,
+		    OpenmrsConstants.GLOBAL_PROPERTY_PERSON_ATTRIBUTE_SEARCH_MATCH_ANYWHERE);
 		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
 		
 		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false);

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 6804158..d8871f6 100644
--- a/old_product.java
+++ b/new_product.java
@@ -19,7 +19,7 @@
 				atLeastOneNonVoidPersonNameLeft = true;
 			}
 		}
-		if (!atLeastOneNonVoidPersonNameLeft) {
+		if (!person.isVoided() && !atLeastOneNonVoidPersonNameLeft) {
 			errors.rejectValue("names", "Person.shouldHaveAtleastOneNonVoidedName");
 		}
 		

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 5dcfe3a..f01a7d9 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,7 +1,8 @@
 @Test
 	@Verifies(value = "should fail validation if a preferred patient identifier is not chosen for voided patients", method = "validate(Object,Errors)")
 	public void validate_shouldFailValidationIfAPreferredPatientIdentifierIsNotChosenForVoidedPatients() throws Exception {
-		Patient pa = Context.getPatientService().getPatient(999);
+		Patient pa = Context.getPatientService().getPatient(432);
+		
 		Assert.assertTrue(pa.isVoided());//sanity check
 		Assert.assertNotNull(pa.getPatientIdentifier());
 		for (PatientIdentifier id : pa.getIdentifiers())

----------------------------------------------------------------
coverage
0.15104166666666666
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
		
		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false, MatchMode.ANYWHERE);
		logPeople(people);
		
		Assert.assertEquals(1, people.size());
		Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName());
	}
</new_test>
----------------------------------------------------------------
测试代码

@Test
	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
		
		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false, MatchMode.ANYWHERE);
		logPeople(people);
		
		Assert.assertEquals(1, people.size());
		Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName());
	}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,10 +1,12 @@

+
 @Test
 	public void getPeople_shouldGetOnePersonByRandomCaseAttribute() throws Exception {
 		Assert.assertTrue(personAttributeHelper.personAttributeExists("Story teller"));
 		
-		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false);
+		List<Person> people = hibernatePersonDAO.getPeople("sToRy TeLlEr", false, MatchMode.ANYWHERE);
 		logPeople(people);
 		
 		Assert.assertEquals(1, people.size());
 		Assert.assertEquals("Bilbo Odilon", people.get(0).getGivenName());
 	}
+

----------------------------------------------------------------
state
0
----------------------------------------------------------------
description
编译报错
----------------------------------------------------------------
message
COMPILATION ERROR : 
\0\openmrs-core\api\src\test\java\org\openmrs\api\db\hibernate\HibernatePersonDAOTest.java:[212,76] 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:testCompile (default-testCompile) on project openmrs-api: Compilation failure
\0\openmrs-core\api\src\test\java\org\openmrs\api\db\hibernate\HibernatePersonDAOTest.java:[212,76] 找不到符号
符号： 变量 MatchMode
位置： 类 org.openmrs.api.db.hibernate.HibernatePersonDAOTest
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
