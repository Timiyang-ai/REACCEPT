--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.8864628820960698
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.8864628820960698
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
private Str resolvePath(final QueryContext ctx) throws QueryException {
    final File path = checkFile(0, ctx);
    final String abs = path.getAbsolutePath();
    return Str.get(path.isDirectory() ? dir(abs) : abs);
  }
----------------------------------------------------------------
old test
@Test
  public void resolvePath() {
    final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
    final String can = new File(PATH1).getAbsolutePath();
    assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
  }
----------------------------------------------------------------
new product
private Str resolvePath(final QueryContext ctx) throws QueryException {
    final File path = checkFile(0, ctx);
    final File abs = path.getAbsoluteFile();
    return Str.get(abs.isDirectory() ? dir(abs.getPath()) : abs.getPath());
  }
----------------------------------------------------------------
new test
@Test
  public void resolvePath() {
    final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
    final String can = new File(PATH1).getAbsolutePath();
    assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
    query(ENDS_WITH.args(_FILE_RESOLVE_PATH.args("."), File.separator), "true");
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 4d2c84e..e15ad78 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
 private Str resolvePath(final QueryContext ctx) throws QueryException {
     final File path = checkFile(0, ctx);
-    final String abs = path.getAbsolutePath();
-    return Str.get(path.isDirectory() ? dir(abs) : abs);
+    final File abs = path.getAbsoluteFile();
+    return Str.get(abs.isDirectory() ? dir(abs.getPath()) : abs.getPath());
   }
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 60debd1..7f4f0ea 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,4 +3,5 @@
     final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
     final String can = new File(PATH1).getAbsolutePath();
     assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
+    query(ENDS_WITH.args(_FILE_RESOLVE_PATH.args("."), File.separator), "true");
   }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index dc26d47..2ff6a83 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,6 @@
 private Str dirName(final QueryContext ctx) throws QueryException {
-    final String path = checkFile(0, ctx).getParent();
-    return Str.get(dir(path == null ? "." : path));
+    final File file = checkFile(0, ctx);
+    String par = file.getParent();
+    if(par == null) par = file.toString().contains(File.separator) ? "" : ".";
+    return Str.get(dir(par));
   }
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index f7ff2d9..523ecbd 100644
--- a/old_test.java
+++ b/new_test.java
@@ -7,4 +7,6 @@
     query(_FILE_DIR_NAME.args(""), "." + File.separator);
     // check with a path without directory separators
     query(_FILE_DIR_NAME.args(NAME), "." + File.separator);
+    // check with a path without directory separators
+    query(_FILE_DIR_NAME.args("/"), File.separator);
   }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.8864628820960698
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
  public void resolvePath() {
    final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
    final String can = new File(PATH1).getAbsoluteFile().getPath();
    assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
  }
</new_test>
----------------------------------------------------------------
测试代码

@Test
  public void resolvePath() {
    final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
    final String can = new File(PATH1).getAbsoluteFile().getPath();
    assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
  }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,6 +1,8 @@

+
 @Test
   public void resolvePath() {
     final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
-    final String can = new File(PATH1).getAbsolutePath();
+    final String can = new File(PATH1).getAbsoluteFile().getPath();
     assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
   }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.8864628820960698
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
  public void resolvePath() {
    final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
    final String can = new File(PATH1).getAbsoluteFile().getPath();
    assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
  }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,6 +1,8 @@

+
 @Test
   public void resolvePath() {
     final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
-    final String can = new File(PATH1).getAbsolutePath();
+    final String can = new File(PATH1).getAbsoluteFile().getPath();
     assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
   }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,8 +1,7 @@

-
 @Test
   public void resolvePath() {
     final String path = query(_FILE_RESOLVE_PATH.args(PATH1));
-    final String can = new File(PATH1).getAbsoluteFile().getPath();
+    final String can = new File(PATH1).getAbsolutePath();
     assertEquals(path.toLowerCase(Locale.ENGLISH), can.toLowerCase(Locale.ENGLISH));
+    query(ENDS_WITH.args(_FILE_RESOLVE_PATH.args("."), File.separator), "true");
   }
-

--------------------------------------------------------------------------------------------------------------------------------
