--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.8620689655172413
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
3
----------------------------------------------------------------
old description
测试通过，覆盖率：0.8620689655172413
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
@Override
	public OrderFrequency saveOrderFrequency(OrderFrequency orderFrequency) throws APIException {
		
		if (orderFrequency.getOrderFrequencyId() != null) {
			if (dao.isOrderFrequencyInUse(orderFrequency)) {
				throw new APIException("This order frequency cannot be edited because it is already in use");
			}
		}
		
		ValidateUtil.validate(orderFrequency);
		return dao.saveOrderFrequency(orderFrequency);
	}
----------------------------------------------------------------
old test
@Test(expected = APIException.class)
	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
		OrderFrequency orderFrequency = Context.getOrderService().getOrderFrequency(1);
		assertNotNull(orderFrequency);
		
		orderFrequency.setFrequencyPerDay(4d);
		Context.getOrderService().saveOrderFrequency(orderFrequency);
	}
----------------------------------------------------------------
new product
@Override
	public OrderFrequency saveOrderFrequency(OrderFrequency orderFrequency) throws APIException {
		
		if (orderFrequency.getOrderFrequencyId() != null) {
			if (dao.isOrderFrequencyInUse(orderFrequency)) {
				throw new APIException("This order frequency cannot be edited because it is already in use");
			}
		}
		
		return dao.saveOrderFrequency(orderFrequency);
	}
----------------------------------------------------------------
new test
@Test
	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
		OrderFrequency orderFrequency = Context.getOrderService().getOrderFrequency(1);
		assertNotNull(orderFrequency);
		
		orderFrequency.setFrequencyPerDay(4d);
		expectedException.expect(APIException.class);
		expectedException.expectMessage("This order frequency cannot be edited because it is already in use");
		Context.getOrderService().saveOrderFrequency(orderFrequency);
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 088f36e..fbef03f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -7,6 +7,5 @@
 			}
 		}
 		
-		ValidateUtil.validate(orderFrequency);
 		return dao.saveOrderFrequency(orderFrequency);
 	}
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 9c6a5ea..695b8a5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,9 +1,11 @@
-@Test(expected = APIException.class)
+@Test
 	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
 	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
 		OrderFrequency orderFrequency = Context.getOrderService().getOrderFrequency(1);
 		assertNotNull(orderFrequency);
 		
 		orderFrequency.setFrequencyPerDay(4d);
+		expectedException.expect(APIException.class);
+		expectedException.expectMessage("This order frequency cannot be edited because it is already in use");
 		Context.getOrderService().saveOrderFrequency(orderFrequency);
 	}
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index fbef03f..32704b0 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,10 +1,8 @@
 @Override
 	public OrderFrequency saveOrderFrequency(OrderFrequency orderFrequency) throws APIException {
 		
-		if (orderFrequency.getOrderFrequencyId() != null) {
-			if (dao.isOrderFrequencyInUse(orderFrequency)) {
+		if (orderFrequency.getOrderFrequencyId() != null && dao.isOrderFrequencyInUse(orderFrequency)) {
 				throw new APIException("This order frequency cannot be edited because it is already in use");
-			}
 		}
 		
 		return dao.saveOrderFrequency(orderFrequency);

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index a5e7c4e..a9d8597 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,6 +6,6 @@
 		
 		orderFrequency.setFrequencyPerDay(4d);
 		expectedException.expect(APIException.class);
-		expectedException.expectMessage("This order frequency cannot be edited because it is already in use");
+		expectedException.expectMessage("Order.frequency.cannot.edit");
 		orderService.saveOrderFrequency(orderFrequency);
 	}
\ No newline at end of file

----------------------------------------------------------------
coverage
0.8620689655172413
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test(expected = APIException.class)
	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
		OrderFrequency orderFrequency = Context.getOrderService().getOrderFrequency(1);
		assertNotNull(orderFrequency);
		
		orderFrequency.setFrequencyPerDay(4d);
		expectedException.expect(APIException.class);
		expectedException.expectMessage("Order.frequency.cannot.edit");
		Context.getOrderService().saveOrderFrequency(orderFrequency);
	}
</new_test>
----------------------------------------------------------------
测试代码

@Test(expected = APIException.class)
	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
		OrderFrequency orderFrequency = Context.getOrderService().getOrderFrequency(1);
		assertNotNull(orderFrequency);
		
		orderFrequency.setFrequencyPerDay(4d);
		expectedException.expect(APIException.class);
		expectedException.expectMessage("Order.frequency.cannot.edit");
		Context.getOrderService().saveOrderFrequency(orderFrequency);
	}

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test(expected = APIException.class)
 	@Verifies(value = "should not allow editing an existing order frequency that is in use", method = "saveOrderFrequency(OrderFrequency)")
 	public void saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse() throws Exception {
@@ -5,5 +6,8 @@

 		assertNotNull(orderFrequency);
 		
 		orderFrequency.setFrequencyPerDay(4d);
+		expectedException.expect(APIException.class);
+		expectedException.expectMessage("Order.frequency.cannot.edit");
 		Context.getOrderService().saveOrderFrequency(orderFrequency);
 	}
+

----------------------------------------------------------------
state
1
----------------------------------------------------------------
description
单元测试不通过
----------------------------------------------------------------
message
-------------------------------------------------------------------------------
Test set: org.openmrs.api.OrderServiceTest
-------------------------------------------------------------------------------
Tests run: 60, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 13.006 sec <<< FAILURE!
saveOrderFrequency_shouldNotAllowEditingAnExistingOrderFrequencyThatIsInUse(org.openmrs.api.OrderServiceTest)  Time elapsed: 0.072 sec  <<< FAILURE!
java.lang.AssertionError: Expected test to throw (an instance of org.openmrs.api.APIException and exception with message a string containing "Order.frequency.cannot.edit")
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.rules.ExpectedException.failDueToMissingException(ExpectedException.java:184)
	at org.junit.rules.ExpectedException.access$100(ExpectedException.java:85)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:170)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)


--------------------------------------------------------------------------------------------------------------------------------
