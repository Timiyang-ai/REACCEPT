--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.8958333333333334
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 0
----------------------------------------------------------------
old description: 编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[46,55] 找不到符号
  符号:   变量 INVBASE
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[47,57] 找不到符号
  符号:   变量 INVBASE
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[48,58] 找不到符号
  符号:   变量 INVDIG
  位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[49,57] 找不到符号
  符号:   变量 INVDIG
  位置: 类 org.basex.query.util.Err
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project basex: Compilation failure: Compilation failure:
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[46,55] 找不到符号
符号:   变量 INVBASE
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[47,57] 找不到符号
符号:   变量 INVBASE
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[48,58] 找不到符号
符号:   变量 INVDIG
位置: 类 org.basex.query.util.Err
/E:/1/basex/basex-core/src/test/java/org/basex/query/func/FNConvertTest.java:[49,57] 找不到符号
符号:   变量 INVDIG
位置: 类 org.basex.query.util.Err
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :basex

--------------------------------------------------------------------------------------------------------------------------------
old product
private Int integerFromBase(final QueryContext qc, final InputInfo ii) throws QueryException {
    final byte[] str = checkStr(exprs[0], qc);
    final long base = checkItr(exprs[1], qc);
    if(base < 2 || base > 36) throw INVBASE.get(ii, base);

    long res = 0;
    for(final byte b : str) {
      final int num = b <= '9' ? b - 0x30 : (b & 0xDF) - 0x37;
      if(!(b >= '0' && b <= '9' || b >= 'a' && b <= 'z' ||
          b >= 'A' && b <= 'Z') || num >= base)
        throw INVDIG.get(ii, base, (char) (b & 0xff));

      res = res * base + num;
    }

    return Int.get(res);
  }
----------------------------------------------------------------
old test
@Test
  public void integerFromBase() {
    query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
    query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), 65536);
    query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), 4);
    query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), 65536);
    query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
    query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE);
    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE);
    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVDIG);
    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVDIG);
  }
----------------------------------------------------------------
new product
private Int integerFromBase(final QueryContext qc, final InputInfo ii) throws QueryException {
    final byte[] str = toToken(exprs[0], qc);
    final long base = toLong(exprs[1], qc);
    if(base < 2 || base > 36) throw INVBASE_X.get(ii, base);

    long res = 0;
    for(final byte b : str) {
      final int num = b <= '9' ? b - 0x30 : (b & 0xDF) - 0x37;
      if(!(b >= '0' && b <= '9' || b >= 'a' && b <= 'z' ||
          b >= 'A' && b <= 'Z') || num >= base)
        throw INVBASEDIG_X_X.get(ii, base, (char) (b & 0xff));

      res = res * base + num;
    }

    return Int.get(res);
  }
----------------------------------------------------------------
new test
@Test
  public void integerFromBase() {
    query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
    query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), 65536);
    query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), 4);
    query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), 65536);
    query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
    query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
    query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 025b733..6ca8948 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,14 +1,14 @@
 private Int integerFromBase(final QueryContext qc, final InputInfo ii) throws QueryException {
-    final byte[] str = checkStr(exprs[0], qc);
-    final long base = checkItr(exprs[1], qc);
-    if(base < 2 || base > 36) throw INVBASE.get(ii, base);
+    final byte[] str = toToken(exprs[0], qc);
+    final long base = toLong(exprs[1], qc);
+    if(base < 2 || base > 36) throw INVBASE_X.get(ii, base);
 
     long res = 0;
     for(final byte b : str) {
       final int num = b <= '9' ? b - 0x30 : (b & 0xDF) - 0x37;
       if(!(b >= '0' && b <= '9' || b >= 'a' && b <= 'z' ||
           b >= 'A' && b <= 'Z') || num >= base)
-        throw INVDIG.get(ii, base, (char) (b & 0xff));
+        throw INVBASEDIG_X_X.get(ii, base, (char) (b & 0xff));
 
       res = res * base + num;
     }

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index bc40011..4b8f6c7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -10,8 +10,8 @@
     query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
     query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
     query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVDIG);
-    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVDIG);
+    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
   }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 3d21394..fa3a348 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,6 +1,6 @@
 private Str integerToBase(final QueryContext qc, final InputInfo ii) throws QueryException {
-    final long num = checkItr(exprs[0], qc), base = checkItr(exprs[1], qc);
-    if(base < 2 || base > 36) throw INVBASE.get(ii, base);
+    final long num = toLong(exprs[0], qc), base = toLong(exprs[1], qc);
+    if(base < 2 || base > 36) throw INVBASE_X.get(ii, base);
 
     // use fast variant for powers of two
     for(int i = 1, p = 2; i < 6; i++, p <<= 1)

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 190e9e2..e5cf1fb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -9,7 +9,7 @@
     query(_CONVERT_INTEGER_TO_BASE.args(4, 10), 4);
     query(_CONVERT_INTEGER_TO_BASE.args(65535, 10), 65535);
     query(_CONVERT_INTEGER_TO_BASE.args(65536, 10), 65536);
-    error(_CONVERT_INTEGER_TO_BASE.args(1, 1), Err.INVBASE);
-    error(_CONVERT_INTEGER_TO_BASE.args(1, 100), Err.INVBASE);
-    error(_CONVERT_INTEGER_TO_BASE.args(1, 100), Err.INVBASE);
+    error(_CONVERT_INTEGER_TO_BASE.args(1, 1), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_TO_BASE.args(1, 100), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_TO_BASE.args(1, 100), Err.INVBASE_X);
   }
\ No newline at end of file

----------------------------------------------------------------
coverage: 0.8958333333333334
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
<new_test>
```java
@Test
public void integerFromBaseUpdated() {
  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
}
```
</new_test>

Explanation:
- The test method `integerFromBaseUpdated` has been updated to reflect the changes in the production code as indicated by the `<diff_product>` tag.
- The production method changes include the renaming of error codes from `INVBASE` and `INVDIG` to `INVBASE_X` and `INVBASEDIG_X_X`, respectively. This necessitates updating the test method to use the new error codes for consistency with the production code.
- The `checkStr` and `checkItr` methods in the production code have been replaced with `toToken` and `toLong`, respectively. Although this change does not directly affect the test code syntax, it implies a potential change in how inputs are processed, which the updated test cases continue to cover.
- The test cases themselves remain structurally unchanged, as they are designed to validate the functionality of converting strings representing numbers in various bases to their integer equivalents, as well as handling invalid inputs appropriately.
- The expected results in the test cases are quoted to ensure they are treated as strings, aligning with the expected output type of the `_CONVERT_INTEGER_FROM_BASE` function calls.
- The updated error function calls now correctly reference the new error codes `INVBASE_X` and `INVBASEDIG_X_X` to match the updated production code, ensuring that the test will correctly validate error scenarios against the current implementation.
----------------------------------------------------------------
generated test
@Test
public void integerFromBaseUpdated() {
  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,17 +1,17 @@

 @Test
-  public void integerFromBase() {
-    query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
-    query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), 65536);
-    query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), 4);
-    query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), 65536);
-    query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
-    query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVDIG);
-    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVDIG);
-  }
+public void integerFromBaseUpdated() {
+  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
+  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
+  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
+  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.8958333333333334
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test
public void integerFromBaseUpdated() {
  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,17 +1,17 @@

 @Test
-  public void integerFromBase() {
-    query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
-    query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), 65536);
-    query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), 4);
-    query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), 65536);
-    query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
-    query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
-    query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE);
-    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVDIG);
-    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVDIG);
-  }
+public void integerFromBaseUpdated() {
+  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
+  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
+  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
+  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
+  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
+  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
+  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,17 +1,17 @@

 @Test
-public void integerFromBaseUpdated() {
-  query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
-  query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), "65535");
-  query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), "65536");
-  query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), "4");
-  query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), "65535");
-  query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), "65535");
-  query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), "65536");
-  query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), "4");
-  query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), "65535");
-  query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), "65536");
-  error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
-  error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
-  error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
-  error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
-}
+  public void integerFromBase() {
+    query(_CONVERT_INTEGER_FROM_BASE.args("100", 2), "4");
+    query(_CONVERT_INTEGER_FROM_BASE.args("1111111111111111", 2), 65535);
+    query(_CONVERT_INTEGER_FROM_BASE.args("10000000000000000", 2), 65536);
+    query(_CONVERT_INTEGER_FROM_BASE.args("4", 16), 4);
+    query(_CONVERT_INTEGER_FROM_BASE.args("ffff", 16), 65535);
+    query(_CONVERT_INTEGER_FROM_BASE.args("FFFF", 16), 65535);
+    query(_CONVERT_INTEGER_FROM_BASE.args("10000", 16), 65536);
+    query(_CONVERT_INTEGER_FROM_BASE.args("4", 10), 4);
+    query(_CONVERT_INTEGER_FROM_BASE.args("65535", 10), 65535);
+    query(_CONVERT_INTEGER_FROM_BASE.args("65536", 10), 65536);
+    error(_CONVERT_INTEGER_FROM_BASE.args("1", 1), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("1", 100), Err.INVBASE_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("abc", 10), Err.INVBASEDIG_X_X);
+    error(_CONVERT_INTEGER_FROM_BASE.args("012", 2), Err.INVBASEDIG_X_X);
+  }

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.8958333333333334
--------------------------------------------------------------------------------------------------------------------------------
