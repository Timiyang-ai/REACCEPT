--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.890625
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 3
----------------------------------------------------------------
old description: 测试通过，覆盖率：0.890625
----------------------------------------------------------------
old message

--------------------------------------------------------------------------------------------------------------------------------
old product
private Item zipFile(final QueryContext ctx) throws QueryException {
    // check argument
    final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());
    // get file
    final String file = attribute(elm, A_HREF, true);

    // write zip file
    FileOutputStream fos = null;
    boolean ok = true;
    try {
      fos = new FileOutputStream(file);
      final ZipOutputStream zos =
        new ZipOutputStream(new BufferedOutputStream(fos));
      create(zos, elm.children(), "", null, ctx);
      zos.close();
    } catch(final IOException ex) {
      ok = false;
      ZIP_FAIL.thrw(info, ex.getMessage());
    } finally {
      if(fos != null) {
        try { fos.close(); } catch(final IOException ex) { }
        if(!ok) new IOFile(file).delete();
      }
    }
    return null;
  }
----------------------------------------------------------------
old test
@Test
  public void zipFile() throws IOException {
    check(_ZIP_ZIP_FILE);
    // check first file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
    checkZipEntry("one", new byte[0]);
    // check second file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
    checkZipEntry("two", new byte[] { '!' });
    // check third file
    query(_ZIP_ZIP_FILE.args(
        zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
    checkZipEntry("three", new byte[] { '\0', '!' });
    // check fourth file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
    checkZipEntry("four", new byte[] { '!' });
    // check fifth file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
    checkZipEntry(NAME + ".tmp", new byte[] { '!' });
    // check sixth file
    query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
        TMPFILE + "'/></dir>")));
    checkZipEntry("a/b", new byte[] { '!' });

    // error: no entry specified
    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
    // error: duplicate entry specified
    error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
  }
----------------------------------------------------------------
new product
private Item zipFile(final QueryContext ctx) throws QueryException {
    // check argument
    final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());
    // get file
    final String file = attribute(elm, A_HREF, true);

    // write zip file
    FileOutputStream fos = null;
    boolean ok = true;
    try {
      fos = new FileOutputStream(file);
      final ZipOutputStream zos =
        new ZipOutputStream(new BufferedOutputStream(fos));
      create(zos, elm.children(), "", null, ctx);
      zos.close();
    } catch(final IOException ex) {
      ok = false;
      ZIP_FAIL.thrw(info, ex);
    } finally {
      if(fos != null) {
        try { fos.close(); } catch(final IOException ex) { }
        if(!ok) new IOFile(file).delete();
      }
    }
    return null;
  }
----------------------------------------------------------------
new test
@Test
  public void zipZipFile() throws IOException {
    check(_ZIP_ZIP_FILE);
    // check first file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
    checkZipEntry("one", new byte[0]);
    // check second file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
    checkZipEntry("two", new byte[] { '!' });
    // check third file
    query(_ZIP_ZIP_FILE.args(
        zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
    checkZipEntry("three", new byte[] { '\0', '!' });
    // check fourth file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
    checkZipEntry("four", new byte[] { '!' });
    // check fifth file
    query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
    checkZipEntry(NAME + ".tmp", new byte[] { '!' });
    // check sixth file
    query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
        TMPFILE + "'/></dir>")));
    checkZipEntry("a/b", new byte[] { '!' });

    // error: no entry specified
    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
    // error: duplicate entry specified
    error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 05abb0e..dc2cc6f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -16,7 +16,7 @@ private Item zipFile(final QueryContext ctx) throws QueryException {
       zos.close();
     } catch(final IOException ex) {
       ok = false;
-      ZIP_FAIL.thrw(info, ex.getMessage());
+      ZIP_FAIL.thrw(info, ex);
     } finally {
       if(fos != null) {
         try { fos.close(); } catch(final IOException ex) { }

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index bc3993d..b16d153 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test
-  public void zipFile() throws IOException {
+  public void zipZipFile() throws IOException {
     check(_ZIP_ZIP_FILE);
     // check first file
     query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index ec78f5e..05abb0e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,7 +1,7 @@
 private Item zipFile(final QueryContext ctx) throws QueryException {
     // check argument
     final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
-    if(!elm.qname().eq(E_FILE)) ZIPUNKNOWN.thrw(info, elm.qname());
+    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());
     // get file
     final String file = attribute(elm, A_HREF, true);
 
@@ -16,7 +16,7 @@ private Item zipFile(final QueryContext ctx) throws QueryException {
       zos.close();
     } catch(final IOException ex) {
       ok = false;
-      ZIPFAIL.thrw(info, ex.getMessage());
+      ZIP_FAIL.thrw(info, ex.getMessage());
     } finally {
       if(fos != null) {
         try { fos.close(); } catch(final IOException ex) { }

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 155f5ba..bc3993d 100644
--- a/old_test.java
+++ b/new_test.java
@@ -23,8 +23,8 @@
     checkZipEntry("a/b", new byte[] { '!' });
 
     // error: no entry specified
-    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIPFAIL);
+    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
     // error: duplicate entry specified
     error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
-        "<entry src='" + TMPFILE + "'/>")), Err.ZIPFAIL);
+        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
   }
\ No newline at end of file

----------------------------------------------------------------
coverage: 0.890625
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
<new_test>
```java
@Test
public void zipFile() throws IOException {
  check(_ZIP_ZIP_FILE);
  // check first file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
  checkZipEntry("one", new byte[0]);
  // check second file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
  checkZipEntry("two", new byte[] { '!' });
  // check third file
  query(_ZIP_ZIP_FILE.args(
      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
  checkZipEntry("three", new byte[] { '\0', '!' });
  // check fourth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
  checkZipEntry("four", new byte[] { '!' });
  // check fifth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
  // check sixth file
  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
      TMPFILE + "'/></dir>")));
  checkZipEntry("a/b", new byte[] { '!' });

  // error: no entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
  // error: duplicate entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);

  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
  // This change suggests that the error handling now passes the exception object directly
  // rather than its message string. This might affect how errors are logged or presented.
  // However, without direct access to the error handling logic or the ability to assert
  // on the exception object itself in the context of this query/error framework,
  // the test adjustments remain focused on the expected error outcomes.
}
```
</new_test>

This new test method reflects the changes observed in the production method diff, specifically the change in how exceptions are handled within the `zipFile` method (`ZIP_FAIL.thrw(info, ex)` instead of `ZIP_FAIL.thrw(info, ex.getMessage())`). However, since the test method primarily deals with the outcomes of these operations (i.e., whether an error is thrown or not) rather than the specifics of the exception message or object, the test method adjustments remain focused on the expected error outcomes rather than the internals of the exception handling.
----------------------------------------------------------------
generated test
@Test
public void zipFile() throws IOException {
  check(_ZIP_ZIP_FILE);
  // check first file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
  checkZipEntry("one", new byte[0]);
  // check second file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
  checkZipEntry("two", new byte[] { '!' });
  // check third file
  query(_ZIP_ZIP_FILE.args(
      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
  checkZipEntry("three", new byte[] { '\0', '!' });
  // check fourth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
  checkZipEntry("four", new byte[] { '!' });
  // check fifth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
  // check sixth file
  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
      TMPFILE + "'/></dir>")));
  checkZipEntry("a/b", new byte[] { '!' });

  // error: no entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
  // error: duplicate entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);

  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
  // This change suggests that the error handling now passes the exception object directly
  // rather than its message string. This might affect how errors are logged or presented.
  // However, without direct access to the error handling logic or the ability to assert
  // on the exception object itself in the context of this query/error framework,
  // the test adjustments remain focused on the expected error outcomes.
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,30 +1,37 @@

 @Test
-  public void zipFile() throws IOException {
-    check(_ZIP_ZIP_FILE);
-    // check first file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
-    checkZipEntry("one", new byte[0]);
-    // check second file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
-    checkZipEntry("two", new byte[] { '!' });
-    // check third file
-    query(_ZIP_ZIP_FILE.args(
-        zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
-    checkZipEntry("three", new byte[] { '\0', '!' });
-    // check fourth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
-    checkZipEntry("four", new byte[] { '!' });
-    // check fifth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
-    checkZipEntry(NAME + ".tmp", new byte[] { '!' });
-    // check sixth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
-        TMPFILE + "'/></dir>")));
-    checkZipEntry("a/b", new byte[] { '!' });
+public void zipFile() throws IOException {
+  check(_ZIP_ZIP_FILE);
+  // check first file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
+  checkZipEntry("one", new byte[0]);
+  // check second file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
+  checkZipEntry("two", new byte[] { '!' });
+  // check third file
+  query(_ZIP_ZIP_FILE.args(
+      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
+  checkZipEntry("three", new byte[] { '\0', '!' });
+  // check fourth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
+  checkZipEntry("four", new byte[] { '!' });
+  // check fifth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
+  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
+  // check sixth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
+      TMPFILE + "'/></dir>")));
+  checkZipEntry("a/b", new byte[] { '!' });
 
-    // error: no entry specified
-    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
-    // error: duplicate entry specified
-    error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
-        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
-  }
+  // error: no entry specified
+  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
+  // error: duplicate entry specified
+  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
+      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
+
+  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
+  // This change suggests that the error handling now passes the exception object directly
+  // rather than its message string. This might affect how errors are logged or presented.
+  // However, without direct access to the error handling logic or the ability to assert
+  // on the exception object itself in the context of this query/error framework,
+  // the test adjustments remain focused on the expected error outcomes.
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.890625
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test
public void zipFile() throws IOException {
  check(_ZIP_ZIP_FILE);
  // check first file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
  checkZipEntry("one", new byte[0]);
  // check second file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
  checkZipEntry("two", new byte[] { '!' });
  // check third file
  query(_ZIP_ZIP_FILE.args(
      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
  checkZipEntry("three", new byte[] { '\0', '!' });
  // check fourth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
  checkZipEntry("four", new byte[] { '!' });
  // check fifth file
  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
  // check sixth file
  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
      TMPFILE + "'/></dir>")));
  checkZipEntry("a/b", new byte[] { '!' });

  // error: no entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
  // error: duplicate entry specified
  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);

  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
  // This change suggests that the error handling now passes the exception object directly
  // rather than its message string. This might affect how errors are logged or presented.
  // However, without direct access to the error handling logic or the ability to assert
  // on the exception object itself in the context of this query/error framework,
  // the test adjustments remain focused on the expected error outcomes.
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,30 +1,37 @@

 @Test
-  public void zipFile() throws IOException {
-    check(_ZIP_ZIP_FILE);
-    // check first file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
-    checkZipEntry("one", new byte[0]);
-    // check second file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
-    checkZipEntry("two", new byte[] { '!' });
-    // check third file
-    query(_ZIP_ZIP_FILE.args(
-        zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
-    checkZipEntry("three", new byte[] { '\0', '!' });
-    // check fourth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
-    checkZipEntry("four", new byte[] { '!' });
-    // check fifth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
-    checkZipEntry(NAME + ".tmp", new byte[] { '!' });
-    // check sixth file
-    query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
-        TMPFILE + "'/></dir>")));
-    checkZipEntry("a/b", new byte[] { '!' });
+public void zipFile() throws IOException {
+  check(_ZIP_ZIP_FILE);
+  // check first file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
+  checkZipEntry("one", new byte[0]);
+  // check second file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
+  checkZipEntry("two", new byte[] { '!' });
+  // check third file
+  query(_ZIP_ZIP_FILE.args(
+      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
+  checkZipEntry("three", new byte[] { '\0', '!' });
+  // check fourth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
+  checkZipEntry("four", new byte[] { '!' });
+  // check fifth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
+  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
+  // check sixth file
+  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
+      TMPFILE + "'/></dir>")));
+  checkZipEntry("a/b", new byte[] { '!' });
 
-    // error: no entry specified
-    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
-    // error: duplicate entry specified
-    error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
-        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
-  }
+  // error: no entry specified
+  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
+  // error: duplicate entry specified
+  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
+      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
+
+  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
+  // This change suggests that the error handling now passes the exception object directly
+  // rather than its message string. This might affect how errors are logged or presented.
+  // However, without direct access to the error handling logic or the ability to assert
+  // on the exception object itself in the context of this query/error framework,
+  // the test adjustments remain focused on the expected error outcomes.
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,37 +1,30 @@

 @Test
-public void zipFile() throws IOException {
-  check(_ZIP_ZIP_FILE);
-  // check first file
-  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
-  checkZipEntry("one", new byte[0]);
-  // check second file
-  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
-  checkZipEntry("two", new byte[] { '!' });
-  // check third file
-  query(_ZIP_ZIP_FILE.args(
-      zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
-  checkZipEntry("three", new byte[] { '\0', '!' });
-  // check fourth file
-  query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
-  checkZipEntry("four", new byte[] { '!' });
-  // check fifth file
-  query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
-  checkZipEntry(NAME + ".tmp", new byte[] { '!' });
-  // check sixth file
-  query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
-      TMPFILE + "'/></dir>")));
-  checkZipEntry("a/b", new byte[] { '!' });
+  public void zipZipFile() throws IOException {
+    check(_ZIP_ZIP_FILE);
+    // check first file
+    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='one'/>")));
+    checkZipEntry("one", new byte[0]);
+    // check second file
+    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='two'>!</entry>")));
+    checkZipEntry("two", new byte[] { '!' });
+    // check third file
+    query(_ZIP_ZIP_FILE.args(
+        zipParams("<entry name='three' encoding='UTF-16'>!</entry>")));
+    checkZipEntry("three", new byte[] { '\0', '!' });
+    // check fourth file
+    query(_ZIP_ZIP_FILE.args(zipParams("<entry name='four' src='" + TMPFILE + "'/>")));
+    checkZipEntry("four", new byte[] { '!' });
+    // check fifth file
+    query(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>")));
+    checkZipEntry(NAME + ".tmp", new byte[] { '!' });
+    // check sixth file
+    query(_ZIP_ZIP_FILE.args(zipParams("<dir name='a'><entry name='b' src='" +
+        TMPFILE + "'/></dir>")));
+    checkZipEntry("a/b", new byte[] { '!' });
 
-  // error: no entry specified
-  error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
-  // error: duplicate entry specified
-  error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
-      "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
-
-  // Adjusting test to reflect the change in error handling from ex.getMessage() to ex
-  // This change suggests that the error handling now passes the exception object directly
-  // rather than its message string. This might affect how errors are logged or presented.
-  // However, without direct access to the error handling logic or the ability to assert
-  // on the exception object itself in the context of this query/error framework,
-  // the test adjustments remain focused on the expected error outcomes.
-}
+    // error: no entry specified
+    error(_ZIP_ZIP_FILE.args(zipParams("")), Err.ZIP_FAIL);
+    // error: duplicate entry specified
+    error(_ZIP_ZIP_FILE.args(zipParams("<entry src='" + TMPFILE + "'/>" +
+        "<entry src='" + TMPFILE + "'/>")), Err.ZIP_FAIL);
+  }

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.890625
--------------------------------------------------------------------------------------------------------------------------------
