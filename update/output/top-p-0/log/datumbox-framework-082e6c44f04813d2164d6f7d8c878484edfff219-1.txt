--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.8130081300813008
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/1/datumbox-framework/src/test/java/com/datumbox/framework/statistics/distributions/DiscreteDistributionsTest.java:[189,46] 找不到符号
  符号:   方法 HypergeometricCdf(int,int,int,int)
  位置: 类 com.datumbox.framework.statistics.distributions.DiscreteDistributions
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:testCompile (default-testCompile) on project datumbox-framework: Compilation failure
/E:/1/datumbox-framework/src/test/java/com/datumbox/framework/statistics/distributions/DiscreteDistributionsTest.java:[189,46] 找不到符号
符号:   方法 HypergeometricCdf(int,int,int,int)
位置: 类 com.datumbox.framework.statistics.distributions.DiscreteDistributions
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

--------------------------------------------------------------------------------------------------------------------------------
old product
public static double HypergeometricCdf(int k, int n, int Kp, int Np) {
        if(k<0 || n<0 || Kp<0 || Np<0) {
            throw new IllegalArgumentException("All the parameters must be positive.");
        }
        Kp = Math.max(k, Kp);
        Np = Math.max(n, Np);
        
        /*
        //slow!
        $probabilitySum=0;
        for($i=0;$i<=$k;++$i) {
            $probabilitySum+=self::Hypergeometric($i,$n,$Kp,$Np);
        }
        */

        //fast and can handle large numbers
        //Cdf(k)-Cdf(k-1)
        double probabilitySum = approxHypergeometricCdf(k,n,Kp,Np);
        
        return probabilitySum;
    }
----------------------------------------------------------------
old test
@Test
    public void testHypergeometricCdf() {
        logger.info("HypergeometricCdf");
        int k = 3;
        int n = 10;
        int Kp = 30;
        int Np = 100;
        double expResult = 0.65401998866081;
        double result = DiscreteDistributions.HypergeometricCdf(k, n, Kp, Np);
        assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
    }
----------------------------------------------------------------
new product
public static double hypergeometricCdf(int k, int n, int Kp, int Np) {
        if(k<0 || n<0 || Kp<0 || Np<0) {
            throw new IllegalArgumentException("All the parameters must be positive.");
        }
        Kp = Math.max(k, Kp);
        Np = Math.max(n, Np);
        
        /*
        //slow!
        $probabilitySum=0;
        for($i=0;$i<=$k;++$i) {
            $probabilitySum+=self::hypergeometric($i,$n,$Kp,$Np);
        }
        */

        //fast and can handle large numbers
        //Cdf(k)-Cdf(k-1)
        double probabilitySum = approxHypergeometricCdf(k,n,Kp,Np);
        
        return probabilitySum;
    }
----------------------------------------------------------------
new test
@Test
    public void testHypergeometricCdf() {
        logger.info("HypergeometricCdf");
        int k = 3;
        int n = 10;
        int Kp = 30;
        int Np = 100;
        double expResult = 0.65401998866081;
        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
        assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
    }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index e9f96e8..777ad68 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,4 @@
-public static double HypergeometricCdf(int k, int n, int Kp, int Np) {
+public static double hypergeometricCdf(int k, int n, int Kp, int Np) {
         if(k<0 || n<0 || Kp<0 || Np<0) {
             throw new IllegalArgumentException("All the parameters must be positive.");
         }
@@ -9,7 +9,7 @@ public static double HypergeometricCdf(int k, int n, int Kp, int Np) {
         //slow!
         $probabilitySum=0;
         for($i=0;$i<=$k;++$i) {
-            $probabilitySum+=self::Hypergeometric($i,$n,$Kp,$Np);
+            $probabilitySum+=self::hypergeometric($i,$n,$Kp,$Np);
         }
         */
 

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 6f90c54..bf12b5b 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,6 +6,6 @@
         int Kp = 30;
         int Np = 100;
         double expResult = 0.65401998866081;
-        double result = DiscreteDistributions.HypergeometricCdf(k, n, Kp, Np);
+        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
         assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
     }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 4543b44..a69111e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,4 @@
-public static double Hypergeometric(int k, int n, int Kp, int Np) {
+public static double hypergeometric(int k, int n, int Kp, int Np) {
         if(k<0 || n<0 || Kp<0 || Np<0) {
             throw new IllegalArgumentException("All the parameters must be positive.");
         }

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 9e248c9..ddb7963 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,6 +6,6 @@
         int Kp = 30;
         int Np = 100;
         double expResult = 0.28116339430254;
-        double result = DiscreteDistributions.Hypergeometric(k, n, Kp, Np);
+        double result = DiscreteDistributions.hypergeometric(k, n, Kp, Np);
         assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
     }
\ No newline at end of file

----------------------------------------------------------------
coverage
0.8130081300813008
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
    public void testHypergeometricCdf() {
        logger.info("HypergeometricCdf");
        int k = 3;
        int n = 10;
        int Kp = 30;
        int Np = 100;
        double expResult = 0.65401998866081;
        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
        assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
    }
</new_test>
----------------------------------------------------------------
测试代码

@Test
    public void testHypergeometricCdf() {
        logger.info("HypergeometricCdf");
        int k = 3;
        int n = 10;
        int Kp = 30;
        int Np = 100;
        double expResult = 0.65401998866081;
        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
        assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
    }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
     public void testHypergeometricCdf() {
         logger.info("HypergeometricCdf");
@@ -6,6 +7,7 @@

         int Kp = 30;
         int Np = 100;
         double expResult = 0.65401998866081;
-        double result = DiscreteDistributions.HypergeometricCdf(k, n, Kp, Np);
+        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
         assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
     }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.8130081300813008
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
    public void testHypergeometricCdf() {
        logger.info("HypergeometricCdf");
        int k = 3;
        int n = 10;
        int Kp = 30;
        int Np = 100;
        double expResult = 0.65401998866081;
        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
        assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
    }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
     public void testHypergeometricCdf() {
         logger.info("HypergeometricCdf");
@@ -6,6 +7,7 @@

         int Kp = 30;
         int Np = 100;
         double expResult = 0.65401998866081;
-        double result = DiscreteDistributions.HypergeometricCdf(k, n, Kp, Np);
+        double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
         assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
     }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,4 +1,3 @@

-
 @Test
     public void testHypergeometricCdf() {
         logger.info("HypergeometricCdf");
@@ -10,4 +9,3 @@

         double result = DiscreteDistributions.hypergeometricCdf(k, n, Kp, Np);
         assertEquals(expResult, result, TestConfiguration.DOUBLE_ACCURACY_HIGH);
     }
-

--------------------------------------------------------------------------------------------------------------------------------
