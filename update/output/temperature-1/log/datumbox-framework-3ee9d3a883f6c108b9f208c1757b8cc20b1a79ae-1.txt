--------------------------------------------------------------------------------------------------------------------------------
new state
3
----------------------------------------------------------------
new description
测试通过，覆盖率：0.0
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state
0
----------------------------------------------------------------
old description
编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
\1\datumbox-framework\src\test\java\com\datumbox\framework\machinelearning\ensemblelearning\FixedCombinationRulesTest.java:[138,25] 错误: 找不到符号
\1\datumbox-framework\src\test\java\com\datumbox\framework\machinelearning\ensemblelearning\FixedCombinationRulesTest.java:[138,69] 错误: 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:testCompile (default-testCompile) on project datumbox-framework: Compilation failure: Compilation failure:
\1\datumbox-framework\src\test\java\com\datumbox\framework\machinelearning\ensemblelearning\FixedCombinationRulesTest.java:[138,25] 错误: 找不到符号
\1\datumbox-framework\src\test\java\com\datumbox\framework\machinelearning\ensemblelearning\FixedCombinationRulesTest.java:[138,69] 错误: 找不到符号
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

--------------------------------------------------------------------------------------------------------------------------------
old product
public static double median(AssociativeArray2D survivalFunction) throws IllegalArgumentException {
        Double ApointTi = null;
        Double BpointTi = null;
        
        int n = survivalFunction.size();
        if(n==0) {
            throw new IllegalArgumentException();
        } 
        
        for(Map.Entry<Object, AssociativeArray> entry : survivalFunction.entrySet()) {
            Object ti = entry.getKey();
            AssociativeArray row = entry.getValue();
            
            Double Sti = row.getDouble("Sti");
            
            if(Sti==null) {
                continue; //skip censored internalData
            }
            
            Double point = Double.valueOf(ti.toString());
            if(Sti==0.5) {
                return point; //we found extactly the point
            }
            else if(Sti>0.5) {
                ApointTi=point; //keep the point just before the 0.5 probability
            }
            else {
                BpointTi=point; //keep the first point after the 0.5 probability and exit loop
                break;
            }
        }
        
        if(n==1) {
            return (ApointTi!=null)?ApointTi:BpointTi;
        }
        
        double ApointTiValue = TypeConversions.toDouble(survivalFunction.get2d(ApointTi.toString(), "Sti"));
        double BpointTiValue = TypeConversions.toDouble(survivalFunction.get2d(BpointTi.toString(), "Sti"));
        double median=BpointTi-(BpointTiValue-0.5)*(BpointTi-ApointTi)/(BpointTiValue-ApointTiValue);

        return median;
    }
----------------------------------------------------------------
old test
@Test
    public void testMedian() {
        TestUtils.log(this.getClass(), "median");
        DataTable2D classifierClassProbabilityMatrix = getClassifierClassProbabilityMatrix();
        
        AssociativeArray expResult = new AssociativeArray();
        expResult.put("class1", 0.2665);
        expResult.put("class2", 0.45);
        expResult.put("class3", 0.3165);
        
        AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
        for(Object k: expResult.keySet()) {
            assertEquals(TypeConversions.toDouble(expResult.get(k)), TypeConversions.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
        }
    }
----------------------------------------------------------------
new product
public static double median(AssociativeArray2D survivalFunction) throws IllegalArgumentException {
        Double ApointTi = null;
        Double BpointTi = null;
        
        int n = survivalFunction.size();
        if(n==0) {
            throw new IllegalArgumentException();
        } 
        
        for(Map.Entry<Object, AssociativeArray> entry : survivalFunction.entrySet()) {
            Object ti = entry.getKey();
            AssociativeArray row = entry.getValue();
            
            Double Sti = row.getDouble("Sti");
            
            if(Sti==null) {
                continue; //skip censored internalData
            }
            
            Double point = Double.valueOf(ti.toString());
            if(Sti==0.5) {
                return point; //we found extactly the point
            }
            else if(Sti>0.5) {
                ApointTi=point; //keep the point just before the 0.5 probability
            }
            else {
                BpointTi=point; //keep the first point after the 0.5 probability and exit loop
                break;
            }
        }
        
        if(n==1) {
            return (ApointTi!=null)?ApointTi:BpointTi;
        }
        
        double ApointTiValue = TypeInference.toDouble(survivalFunction.get2d(ApointTi.toString(), "Sti"));
        double BpointTiValue = TypeInference.toDouble(survivalFunction.get2d(BpointTi.toString(), "Sti"));
        double median=BpointTi-(BpointTiValue-0.5)*(BpointTi-ApointTi)/(BpointTiValue-ApointTiValue);

        return median;
    }
----------------------------------------------------------------
new test
@Test
    public void testMedian() {
        TestUtils.log(this.getClass(), "median");
        DataTable2D classifierClassProbabilityMatrix = getClassifierClassProbabilityMatrix();
        
        AssociativeArray expResult = new AssociativeArray();
        expResult.put("class1", 0.2665);
        expResult.put("class2", 0.45);
        expResult.put("class3", 0.3165);
        
        AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
        for(Object k: expResult.keySet()) {
            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
        }
    }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 8ab324f..4c611b6 100644
--- a/old_product.java
+++ b/new_product.java
@@ -34,8 +34,8 @@ public static double median(AssociativeArray2D survivalFunction) throws IllegalA
             return (ApointTi!=null)?ApointTi:BpointTi;
         }
         
-        double ApointTiValue = TypeConversions.toDouble(survivalFunction.get2d(ApointTi.toString(), "Sti"));
-        double BpointTiValue = TypeConversions.toDouble(survivalFunction.get2d(BpointTi.toString(), "Sti"));
+        double ApointTiValue = TypeInference.toDouble(survivalFunction.get2d(ApointTi.toString(), "Sti"));
+        double BpointTiValue = TypeInference.toDouble(survivalFunction.get2d(BpointTi.toString(), "Sti"));
         double median=BpointTi-(BpointTiValue-0.5)*(BpointTi-ApointTi)/(BpointTiValue-ApointTiValue);
 
         return median;

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 3cca8f2..599935c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -10,6 +10,6 @@
         
         AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
         for(Object k: expResult.keySet()) {
-            assertEquals(TypeConversions.toDouble(expResult.get(k)), TypeConversions.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
+            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
         }
     }
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 6b990f3..21a1444 100644
--- a/old_product.java
+++ b/new_product.java
@@ -7,11 +7,11 @@ public static OnLineStatistics add(OnLineStatistics A, OnLineStatistics B)
        else if(A.n == 0)
            return new OnLineStatistics(B.n, B.mean, B.m2, B.m3, B.m4, B.min, B.max);
        
-       int nX = B.n + A.n;
-       int nXsqrd = nX*nX;
-       int nAnB = B.n*A.n;
-       int AnSqrd = A.n*A.n;
-       int BnSqrd = B.n*B.n;
+       double nX = B.n + A.n;
+       double nXsqrd = nX*nX;
+       double nAnB = B.n*A.n;
+       double AnSqrd = A.n*A.n;
+       double BnSqrd = B.n*B.n;
        
        double delta = B.mean - A.mean;
        double deltaSqrd = delta*delta;

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 3ce080f..f494142 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,7 +1,7 @@
 @Test
     public void testAdd_double()
     {
-        System.out.println("add");
+        System.out.println("add(double)");
         OnLineStatistics stats = new OnLineStatistics();
         for(double x :  data)
             stats.add(x);

----------------------------------------------------------------
coverage
0.0
--------------------------------------------------------------------------------------------------------------------------------
当前次数：1
----------------------------------------------------------------
LLM输出
<new_test>
@Test
    public void testMedian() {
        TestUtils.log(this.getClass(), "median");
        DataTable2D classifierClassProbabilityMatrix = getClassifierClassProbabilityMatrix();
        
        AssociativeArray expResult = new AssociativeArray();
        expResult.put("class1", 0.2665);
        expResult.put("class2", 0.45);
        expResult.put("class3", 0.3165);
        
        AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
        for(Object k: expResult.keySet()) {
            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
        }
    }
</new_test>
----------------------------------------------------------------
测试代码

@Test
    public void testMedian() {
        TestUtils.log(this.getClass(), "median");
        DataTable2D classifierClassProbabilityMatrix = getClassifierClassProbabilityMatrix();
        
        AssociativeArray expResult = new AssociativeArray();
        expResult.put("class1", 0.2665);
        expResult.put("class2", 0.45);
        expResult.put("class3", 0.3165);
        
        AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
        for(Object k: expResult.keySet()) {
            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
        }
    }

----------------------------------------------------------------
改动
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
     public void testMedian() {
         TestUtils.log(this.getClass(), "median");
@@ -10,6 +11,7 @@

         
         AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
         for(Object k: expResult.keySet()) {
-            assertEquals(TypeConversions.toDouble(expResult.get(k)), TypeConversions.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
+            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
         }
     }
+

----------------------------------------------------------------
state
3
----------------------------------------------------------------
description
测试通过，覆盖率：0.0
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
总次数：1
----------------------------------------------------------------
generated test

@Test
    public void testMedian() {
        TestUtils.log(this.getClass(), "median");
        DataTable2D classifierClassProbabilityMatrix = getClassifierClassProbabilityMatrix();
        
        AssociativeArray expResult = new AssociativeArray();
        expResult.put("class1", 0.2665);
        expResult.put("class2", 0.45);
        expResult.put("class3", 0.3165);
        
        AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
        for(Object k: expResult.keySet()) {
            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
        }
    }

----------------------------------------------------------------
diff old generated test
--- 

+++ 

@@ -1,3 +1,4 @@

+
 @Test
     public void testMedian() {
         TestUtils.log(this.getClass(), "median");
@@ -10,6 +11,7 @@

         
         AssociativeArray result = FixedCombinationRules.median(classifierClassProbabilityMatrix);
         for(Object k: expResult.keySet()) {
-            assertEquals(TypeConversions.toDouble(expResult.get(k)), TypeConversions.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
+            assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
         }
     }
+

----------------------------------------------------------------
diff generated new test
--- 

+++ 

@@ -1,4 +1,3 @@

-
 @Test
     public void testMedian() {
         TestUtils.log(this.getClass(), "median");
@@ -14,4 +13,3 @@

             assertEquals(TypeInference.toDouble(expResult.get(k)), TypeInference.toDouble(result.get(k)), TestConfiguration.DOUBLE_ACCURACY_HIGH);
         }
     }
-

--------------------------------------------------------------------------------------------------------------------------------
