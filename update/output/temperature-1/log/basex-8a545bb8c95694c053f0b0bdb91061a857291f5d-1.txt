--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.5753424657534246
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 0
----------------------------------------------------------------
old description: 编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/1/basex/basex-core/src/test/java/org/basex/test/query/func/FNDbTest.java:[392,33] E:\1\basex\basex-core\src\test\java\org\basex\test\query\func\FNDbTest.java:392: 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project basex: Compilation failure
/E:/1/basex/basex-core/src/test/java/org/basex/test/query/func/FNDbTest.java:[392,33] E:\1\basex\basex-core\src\test\java\org\basex\test\query\func\FNDbTest.java:392: 找不到符号
符号： 方法 is(org.basex.util.Option)
位置： 类 org.basex.core.MainOptions
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :basex

--------------------------------------------------------------------------------------------------------------------------------
old product
public static synchronized Data create(final IO source, final boolean single,
      final Context ctx) throws IOException {

    // check if input is an existing file
    if(!source.exists() || single && source.isDir())
      throw new BaseXException(RES_NOT_FOUND_X, source);

    // default: create a main memory instance
    if(!ctx.options.is(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);

    // otherwise, create a persistent database instance
    final String nm = source.dbname();
    final DirParser dp = new DirParser(source, ctx.options, ctx.globalopts.dbpath(nm));
    return CreateDB.create(nm, dp, ctx);
  }
----------------------------------------------------------------
old test
@Test
  public void create() {
    // non-existing DB name
    final String dbname = NAME + "DBCreate";

    // create DB without initial content
    query(_DB_CREATE.args(dbname));
    query(_DB_EXISTS.args(dbname), true);

    // create DB w/ initial content
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content via document constructor
    query(_DB_CREATE.args(dbname, " document { <dummy/> }", "t2.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content given as string
    query(_DB_CREATE.args(dbname, "\"<dummy/>\"", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content multiple times
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // try to create DB twice during same query
    error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);

    // create DB from file
    query(_DB_CREATE.args(dbname, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(dbname + "/in/input.xml") + "/html"), "1");

    // create DB from folder
    query(_DB_CREATE.args(dbname, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(dbname + "/test/dir")), NFLDR);

    // create DB w/ more than one input
    query(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "('1.xml','2.xml')"));
    query(_DB_CREATE.args(dbname, "(<a/>,'" + FILE + "')", "('1.xml','2.xml')"));

    error(_DB_CREATE.args(dbname, "()", "1.xml"), Err.BXDB_CREATEARGS);
    error(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "1.xml"), Err.BXDB_CREATEARGS);

    // create and drop more than one database
    query("for $i in 1 to 5 return " + _DB_CREATE.args(" '" + dbname + "' || $i"));
    query("for $i in 1 to 5 return " + _DB_DROP.args(" '" + dbname + "' || $i"));

    error(_DB_CREATE.args(dbname, ""), Err.WHICHRES);

    // create DB with initial EMPTY content
    error(_DB_CREATE.args(""), Err.BXDB_NAME);

    // try to access non-existing DB (create is supposed to be called last)
    query(_DB_DROP.args(dbname));
    error(_DB_CREATE.args(dbname) + "," + _DB_DROP.args(dbname), Err.BXDB_OPEN);

    // run update on existing DB then drop it and create a new one
    query(_DB_CREATE.args(dbname, "<a/>", "a.xml"));
    query("insert node <dummy/> into " + _DB_OPEN.args(dbname));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml") +
        ", insert node <dummy/> into " + _DB_OPEN.args(dbname) + "," +
        _DB_DROP.args(dbname));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // eventually drop database
    query(_DB_DROP.args(dbname));

    // specify additional index options
    for(final boolean b : new boolean[] { false, true }) {
      query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
      query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
    }
    assertEquals(context.options.is(MainOptions.UPDINDEX), false);

    final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
    for(final String k : nopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':1 }"));
    }
    final String[] bopt = { "textindex", "attrindex", "ftindex", "stemming",
        "casesens", "diacritics" };
    for(final String k : bopt) {
      for(final boolean v : new boolean[] { true, false }) {
        query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':" + v + "() }"));
      }
    }
    final String[] sopt = { "language", "stopwords" };
    for(final String k : sopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':'' }"));
    }

    error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
  }
----------------------------------------------------------------
new product
public static synchronized Data create(final IO source, final boolean single,
      final Context ctx) throws IOException {

    // check if input is an existing file
    if(!source.exists() || single && source.isDir())
      throw new BaseXException(RES_NOT_FOUND_X, source);

    // default: create a main memory instance
    if(!ctx.options.bool(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);

    // otherwise, create a persistent database instance
    final String nm = source.dbname();
    final DirParser dp = new DirParser(source, ctx.options, ctx.globalopts.dbpath(nm));
    return CreateDB.create(nm, dp, ctx);
  }
----------------------------------------------------------------
new test
@Test
  public void create() {
    // non-existing DB name
    final String dbname = NAME + "DBCreate";

    // create DB without initial content
    query(_DB_CREATE.args(dbname));
    query(_DB_EXISTS.args(dbname), true);

    // create DB w/ initial content
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content via document constructor
    query(_DB_CREATE.args(dbname, " document { <dummy/> }", "t2.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content given as string
    query(_DB_CREATE.args(dbname, "\"<dummy/>\"", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content multiple times
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // try to create DB twice during same query
    error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);

    // create DB from file
    query(_DB_CREATE.args(dbname, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(dbname + "/in/input.xml") + "/html"), "1");

    // create DB from folder
    query(_DB_CREATE.args(dbname, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(dbname + "/test/dir")), NFLDR);

    // create DB w/ more than one input
    query(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "('1.xml','2.xml')"));
    query(_DB_CREATE.args(dbname, "(<a/>,'" + FILE + "')", "('1.xml','2.xml')"));

    error(_DB_CREATE.args(dbname, "()", "1.xml"), Err.BXDB_CREATEARGS);
    error(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "1.xml"), Err.BXDB_CREATEARGS);

    // create and drop more than one database
    query("for $i in 1 to 5 return " + _DB_CREATE.args(" '" + dbname + "' || $i"));
    query("for $i in 1 to 5 return " + _DB_DROP.args(" '" + dbname + "' || $i"));

    error(_DB_CREATE.args(dbname, ""), Err.WHICHRES);

    // create DB with initial EMPTY content
    error(_DB_CREATE.args(""), Err.BXDB_NAME);

    // try to access non-existing DB (create is supposed to be called last)
    query(_DB_DROP.args(dbname));
    error(_DB_CREATE.args(dbname) + "," + _DB_DROP.args(dbname), Err.BXDB_OPEN);

    // run update on existing DB then drop it and create a new one
    query(_DB_CREATE.args(dbname, "<a/>", "a.xml"));
    query("insert node <dummy/> into " + _DB_OPEN.args(dbname));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml") +
        ", insert node <dummy/> into " + _DB_OPEN.args(dbname) + "," +
        _DB_DROP.args(dbname));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // eventually drop database
    query(_DB_DROP.args(dbname));

    // specify additional index options
    for(final boolean b : new boolean[] { false, true }) {
      query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
      query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
    }
    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);

    final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
    for(final String k : nopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':1 }"));
    }
    final String[] bopt = { "textindex", "attrindex", "ftindex", "stemming",
        "casesens", "diacritics" };
    for(final String k : bopt) {
      for(final boolean v : new boolean[] { true, false }) {
        query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':" + v + "() }"));
      }
    }
    final String[] sopt = { "language", "stopwords" };
    for(final String k : sopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':'' }"));
    }

    error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
  }
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index f437c4c..7219b2b 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,7 +6,7 @@ public static synchronized Data create(final IO source, final boolean single,
       throw new BaseXException(RES_NOT_FOUND_X, source);
 
     // default: create a main memory instance
-    if(!ctx.options.is(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);
+    if(!ctx.options.bool(MainOptions.FORCECREATE)) return CreateDB.mainMem(source, ctx);
 
     // otherwise, create a persistent database instance
     final String nm = source.dbname();

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index d32cb35..f4f1522 100644
--- a/old_test.java
+++ b/new_test.java
@@ -71,7 +71,7 @@
       query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
       query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
     }
-    assertEquals(context.options.is(MainOptions.UPDINDEX), false);
+    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);
 
     final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
     for(final String k : nopt) {

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index b96c4b0..beb3802 100644
--- a/old_product.java
+++ b/new_product.java
@@ -5,8 +5,8 @@ public static synchronized Data create(final String name, final Parser parser,
     if(!ctx.user.has(Perm.CREATE)) throw new BaseXException(PERM_REQUIRED_X, Perm.CREATE);
 
     // create main memory database instance
-    final Options opts = ctx.options;
-    if(opts.is(Options.MAINMEM)) return MemBuilder.build(name, parser);
+    final MainOptions opts = ctx.options;
+    if(opts.is(MainOptions.MAINMEM)) return MemBuilder.build(name, parser);
 
     // database is currently locked by another process
     if(ctx.pinned(name)) throw new BaseXException(DB_PINNED_X, name);

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 3ed5d7f..d32cb35 100644
--- a/old_test.java
+++ b/new_test.java
@@ -71,7 +71,7 @@
       query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
       query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
     }
-    assertEquals(context.options.is(Options.UPDINDEX), false);
+    assertEquals(context.options.is(MainOptions.UPDINDEX), false);
 
     final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
     for(final String k : nopt) {

----------------------------------------------------------------
coverage: 0.5753424657534246
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
Given the changes in the production methods and the corresponding update in the test method, we note that the manner of checking options has changed from `.is()` to `.bool()` for consistency or clarity within the codebase. This change reflects a development effort to standardize how boolean options are accessed in the application's configuration, specifically within the context of database creation and configuration scenarios.

Here's how the updated test method might account for these changes, with adjustments highlighted based on the observed changes and following the pattern established in the sample changes:

```java
<new_test>
@Test
public void create() {
    // non-existing DB name
    final String dbname = NAME + "DBCreate";

    // create DB without initial content
    query(_DB_CREATE.args(dbname));
    query(_DB_EXISTS.args(dbname), true);

    // create DB w/ initial content
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content via document constructor
    query(_DB_CREATE.args(dbname, " document { <dummy/> }", "t2.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content given as string
    query(_DB_CREATE.args(dbname, "\"<dummy/>\"", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content multiple times
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // try to create DB twice during the same query
    error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);

    // create DB from file
    query(_DB_CREATE.args(dbname, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(dbname + "/in/input.xml") + "/html"), "1");

    // create DB from folder
    query(_DB_CREATE.args(dbname, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(dbname + "/test/dir")), NFLDR);

    // create DB w/ more than one input
    query(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "('1.xml','2.xml')"));
    query(_DB_CREATE.args(dbname, "(<a/>,'" + FILE + "')", "('1.xml','2.xml')"));

    error(_DB_CREATE.args(dbname, "()", "1.xml"), Err.BXDB_CREATEARGS);
    error(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "1.xml"), Err.BXDB_CREATEARGS);

    // create and drop more than one database
    query("for $i in 1 to 5 return " + _DB_CREATE.args(" '" + dbname + "' || $i"));
    query("for $i in 1 to 5 return " + _DB_DROP.args(" '" + dbname + "' || $i"));

    error(_DB_CREATE.args(dbname, ""), Err.WHICHRES);

    // create DB with initial EMPTY content
    error(_DB_CREATE.args(""), Err.BXDB_NAME);

    // try to access non-existing DB (create is supposed to be called last)
    query(_DB_DROP.args(dbname));
    error(_DB_CREATE.args(dbname) + "," + _DB_DROP.args(dbname), Err.BXDB_OPEN);

    // run update on existing DB then drop it and create a new one
    query(_DB_CREATE.args(dbname, "<a/>", "a.xml"));
    query("insert node <dummy/> into " + _DB_OPEN.args(dbname));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml") +
        ", insert node <dummy/> into " + _DB_OPEN.args(dbname) + "," +
        _DB_DROP.args(dbname));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // eventually drop database
    query(_DB_DROP.args(dbname));

    // specify additional index options
    for(final boolean b : new boolean[] { false, true }) {
      query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
      query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
    }
    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);

    final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
    for(final String k : nopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':1 }"));
    }
    final String[] bopt = { "textindex", "attrindex", "ftindex", "stemming",
        "casesens", "diacritics" };
    for(final String k : bopt) {
      for(final boolean v : new boolean[] { true, false }) {
        query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':" + v + "() }"));
      }
    }
    final String[] sopt = { "language", "stopwords" };
    for(final String k : sopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':'' }"));
    }

    error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
}
</new_test>
```
----------------------------------------------------------------
generated test
@Test
public void create() {
    // non-existing DB name
    final String dbname = NAME + "DBCreate";

    // create DB without initial content
    query(_DB_CREATE.args(dbname));
    query(_DB_EXISTS.args(dbname), true);

    // create DB w/ initial content
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content via document constructor
    query(_DB_CREATE.args(dbname, " document { <dummy/> }", "t2.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content given as string
    query(_DB_CREATE.args(dbname, "\"<dummy/>\"", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content multiple times
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // try to create DB twice during the same query
    error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);

    // create DB from file
    query(_DB_CREATE.args(dbname, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(dbname + "/in/input.xml") + "/html"), "1");

    // create DB from folder
    query(_DB_CREATE.args(dbname, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(dbname + "/test/dir")), NFLDR);

    // create DB w/ more than one input
    query(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "('1.xml','2.xml')"));
    query(_DB_CREATE.args(dbname, "(<a/>,'" + FILE + "')", "('1.xml','2.xml')"));

    error(_DB_CREATE.args(dbname, "()", "1.xml"), Err.BXDB_CREATEARGS);
    error(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "1.xml"), Err.BXDB_CREATEARGS);

    // create and drop more than one database
    query("for $i in 1 to 5 return " + _DB_CREATE.args(" '" + dbname + "' || $i"));
    query("for $i in 1 to 5 return " + _DB_DROP.args(" '" + dbname + "' || $i"));

    error(_DB_CREATE.args(dbname, ""), Err.WHICHRES);

    // create DB with initial EMPTY content
    error(_DB_CREATE.args(""), Err.BXDB_NAME);

    // try to access non-existing DB (create is supposed to be called last)
    query(_DB_DROP.args(dbname));
    error(_DB_CREATE.args(dbname) + "," + _DB_DROP.args(dbname), Err.BXDB_OPEN);

    // run update on existing DB then drop it and create a new one
    query(_DB_CREATE.args(dbname, "<a/>", "a.xml"));
    query("insert node <dummy/> into " + _DB_OPEN.args(dbname));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml") +
        ", insert node <dummy/> into " + _DB_OPEN.args(dbname) + "," +
        _DB_DROP.args(dbname));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // eventually drop database
    query(_DB_DROP.args(dbname));

    // specify additional index options
    for(final boolean b : new boolean[] { false, true }) {
      query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
      query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
    }
    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);

    final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
    for(final String k : nopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':1 }"));
    }
    final String[] bopt = { "textindex", "attrindex", "ftindex", "stemming",
        "casesens", "diacritics" };
    for(final String k : bopt) {
      for(final boolean v : new boolean[] { true, false }) {
        query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':" + v + "() }"));
      }
    }
    final String[] sopt = { "language", "stopwords" };
    for(final String k : sopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':'' }"));
    }

    error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test
-  public void create() {
+public void create() {
     // non-existing DB name
     final String dbname = NAME + "DBCreate";
 
@@ -24,7 +24,7 @@

     query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
     query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");
 
-    // try to create DB twice during same query
+    // try to create DB twice during the same query
     error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);
 
     // create DB from file
@@ -71,7 +71,7 @@

       query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
       query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
     }
-    assertEquals(context.options.is(MainOptions.UPDINDEX), false);
+    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);
 
     final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
     for(final String k : nopt) {
@@ -92,4 +92,4 @@

     error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
-  }
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.5753424657534246
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test
public void create() {
    // non-existing DB name
    final String dbname = NAME + "DBCreate";

    // create DB without initial content
    query(_DB_CREATE.args(dbname));
    query(_DB_EXISTS.args(dbname), true);

    // create DB w/ initial content
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content via document constructor
    query(_DB_CREATE.args(dbname, " document { <dummy/> }", "t2.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content given as string
    query(_DB_CREATE.args(dbname, "\"<dummy/>\"", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // create DB w/ initial content multiple times
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // try to create DB twice during the same query
    error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);

    // create DB from file
    query(_DB_CREATE.args(dbname, FILE, "in/"));
    query(COUNT.args(COLLECTION.args(dbname + "/in/input.xml") + "/html"), "1");

    // create DB from folder
    query(_DB_CREATE.args(dbname, FLDR, "test/dir"));
    query(COUNT.args(COLLECTION.args(dbname + "/test/dir")), NFLDR);

    // create DB w/ more than one input
    query(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "('1.xml','2.xml')"));
    query(_DB_CREATE.args(dbname, "(<a/>,'" + FILE + "')", "('1.xml','2.xml')"));

    error(_DB_CREATE.args(dbname, "()", "1.xml"), Err.BXDB_CREATEARGS);
    error(_DB_CREATE.args(dbname, "(<a/>,<b/>)", "1.xml"), Err.BXDB_CREATEARGS);

    // create and drop more than one database
    query("for $i in 1 to 5 return " + _DB_CREATE.args(" '" + dbname + "' || $i"));
    query("for $i in 1 to 5 return " + _DB_DROP.args(" '" + dbname + "' || $i"));

    error(_DB_CREATE.args(dbname, ""), Err.WHICHRES);

    // create DB with initial EMPTY content
    error(_DB_CREATE.args(""), Err.BXDB_NAME);

    // try to access non-existing DB (create is supposed to be called last)
    query(_DB_DROP.args(dbname));
    error(_DB_CREATE.args(dbname) + "," + _DB_DROP.args(dbname), Err.BXDB_OPEN);

    // run update on existing DB then drop it and create a new one
    query(_DB_CREATE.args(dbname, "<a/>", "a.xml"));
    query("insert node <dummy/> into " + _DB_OPEN.args(dbname));
    query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml") +
        ", insert node <dummy/> into " + _DB_OPEN.args(dbname) + "," +
        _DB_DROP.args(dbname));
    query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");

    // eventually drop database
    query(_DB_DROP.args(dbname));

    // specify additional index options
    for(final boolean b : new boolean[] { false, true }) {
      query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
      query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
    }
    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);

    final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
    for(final String k : nopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':1 }"));
    }
    final String[] bopt = { "textindex", "attrindex", "ftindex", "stemming",
        "casesens", "diacritics" };
    for(final String k : bopt) {
      for(final boolean v : new boolean[] { true, false }) {
        query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':" + v + "() }"));
      }
    }
    final String[] sopt = { "language", "stopwords" };
    for(final String k : sopt) {
      query(_DB_CREATE.args(dbname, "()", "()", " { '" + k + "':'' }"));
    }

    error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
    error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test
-  public void create() {
+public void create() {
     // non-existing DB name
     final String dbname = NAME + "DBCreate";
 
@@ -24,7 +24,7 @@

     query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
     query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");
 
-    // try to create DB twice during same query
+    // try to create DB twice during the same query
     error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);
 
     // create DB from file
@@ -71,7 +71,7 @@

       query(_DB_CREATE.args(dbname, "()", "()", " { 'updindex':" + b + "() }"));
       query(_DB_INFO.args(dbname) + "//updindex/text()", b ? "ON" : "OFF");
     }
-    assertEquals(context.options.is(MainOptions.UPDINDEX), false);
+    assertEquals(context.options.bool(MainOptions.UPDINDEX), false);
 
     final String[] nopt = { "maxcats", "maxlen", "indexsplitsize", "ftindexsplitsize" };
     for(final String k : nopt) {
@@ -92,4 +92,4 @@

     error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
-  }
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test
-public void create() {
+  public void create() {
     // non-existing DB name
     final String dbname = NAME + "DBCreate";
 
@@ -24,7 +24,7 @@

     query(_DB_CREATE.args(dbname, "<dummy/>", "t1.xml"));
     query(_DB_OPEN.args(dbname) + "/root()", "<dummy/>");
 
-    // try to create DB twice during the same query
+    // try to create DB twice during same query
     error(_DB_CREATE.args(dbname) + "," + _DB_CREATE.args(dbname), Err.BXDB_CREATE);
 
     // create DB from file
@@ -92,4 +92,4 @@

     error(_DB_CREATE.args(dbname, "()", "()", " { 'xyz':'abc' }"), Err.BASX_OPTIONS);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':-1 }"), Err.BASX_VALUE);
     error(_DB_CREATE.args(dbname, "()", "()", " { 'maxlen':'a' }"), Err.BASX_VALUE);
-}
+  }

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.5753424657534246
--------------------------------------------------------------------------------------------------------------------------------
