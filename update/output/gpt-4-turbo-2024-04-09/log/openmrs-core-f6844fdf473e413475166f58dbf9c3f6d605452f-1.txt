--------------------------------------------------------------------------------------------------------------------------------
new state: 3
----------------------------------------------------------------
new description: 测试通过，覆盖率：0.0
----------------------------------------------------------------
new message

--------------------------------------------------------------------------------------------------------------------------------
old state: 0
----------------------------------------------------------------
old description: 编译报错
----------------------------------------------------------------
old message
COMPILATION ERROR : 
/E:/1/openmrs-core/api/src/test/java/org/openmrs/api/UserServiceTest.java:[709,71] E:\1\openmrs-core\api\src\test\java\org\openmrs\api\UserServiceTest.java:709: 找不到符号
Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project openmrs-api: Compilation failure
/E:/1/openmrs-core/api/src/test/java/org/openmrs/api/UserServiceTest.java:[709,71] E:\1\openmrs-core\api\src\test\java\org\openmrs\api\UserServiceTest.java:709: 找不到符号
符号： 变量 OpenmrsConstants
位置： 类 org.openmrs.api.UserServiceTest
-> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.

For more information about the errors and possible solutions, please read the following articles:
[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException

After correcting the problems, you can resume the build with the command
  mvn <goals> -rf :openmrs-api

--------------------------------------------------------------------------------------------------------------------------------
old product
@Authorized( { OpenmrsConstants.PRIV_PURGE_PRIVILEGES })
	public void purgePrivilege(Privilege privilege) throws APIException;
----------------------------------------------------------------
old test
@Test(expected = APIException.class)
	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
		Context.getUserService().purgePrivilege(new Privilege(OpenmrsConstants.PRIV_ADD_COHORTS));
	}
----------------------------------------------------------------
new product
@Authorized( { PrivilegeConstants.PURGE_PRIVILEGES })
	public void purgePrivilege(Privilege privilege) throws APIException;
----------------------------------------------------------------
new test
@Test(expected = APIException.class)
	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
		Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
	}
----------------------------------------------------------------
diff product
diff --git a/old_product.java b/new_product.java
index 89fb886..c760634 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,2 +1,2 @@
-@Authorized( { OpenmrsConstants.PRIV_PURGE_PRIVILEGES })
+@Authorized( { PrivilegeConstants.PURGE_PRIVILEGES })
 	public void purgePrivilege(Privilege privilege) throws APIException;
\ No newline at end of file

----------------------------------------------------------------
diff test
diff --git a/old_test.java b/new_test.java
index 964f706..7f1f502 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test(expected = APIException.class)
 	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
 	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
-		Context.getUserService().purgePrivilege(new Privilege(OpenmrsConstants.PRIV_ADD_COHORTS));
+		Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
 	}
\ No newline at end of file

--------------------------------------------------------------------------------------------------------------------------------
sample diff product
diff --git a/old_product.java b/new_product.java
index 6b5b92b..a5027bf 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,2 +1,2 @@
-@Authorized( { OpenmrsConstants.PRIV_PURGE_ROLES })
+@Authorized( { PrivilegeConstants.PURGE_ROLES })
 	public void purgeRole(Role role) throws APIException;
\ No newline at end of file

----------------------------------------------------------------
sample diff test
diff --git a/old_test.java b/new_test.java
index 0bb4e06..605cbc7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,6 +1,6 @@
 @Test(expected = APIException.class)
 	@Verifies(value = "should throw error when role is a core role", method = "purgeRole(Role)")
 	public void purgeRole_shouldThrowErrorWhenRoleIsACoreRole() throws Exception {
-		Role role = new Role(OpenmrsConstants.ANONYMOUS_ROLE);
+		Role role = new Role(RoleConstants.ANONYMOUS);
 		Context.getUserService().purgeRole(role);
 	}
\ No newline at end of file

----------------------------------------------------------------
coverage: 0.0
--------------------------------------------------------------------------------------------------------------------------------
now time: 1
----------------------------------------------------------------
llm output
<new_test>
@Test(expected = APIException.class)
@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
}
</new_test>
----------------------------------------------------------------
generated test
@Test(expected = APIException.class)
@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
}
----------------------------------------------------------------
last generated diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test(expected = APIException.class)
-	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
-	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
-		Context.getUserService().purgePrivilege(new Privilege(OpenmrsConstants.PRIV_ADD_COHORTS));
-	}
+@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
+public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
+    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
+}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.0
----------------------------------------------------------------
message

--------------------------------------------------------------------------------------------------------------------------------
total times: 1
----------------------------------------------------------------
generated test
@Test(expected = APIException.class)
@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
}
----------------------------------------------------------------
old generated diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test(expected = APIException.class)
-	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
-	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
-		Context.getUserService().purgePrivilege(new Privilege(OpenmrsConstants.PRIV_ADD_COHORTS));
-	}
+@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
+public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
+    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
+}

----------------------------------------------------------------
generated new diff test
--- 

+++ 

@@ -1,5 +1,5 @@

 @Test(expected = APIException.class)
-@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
-public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
-    Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
-}
+	@Verifies(value = "should throw error when privilege is core privilege", method = "purgePrivilege(Privilege)")
+	public void purgePrivilege_shouldThrowErrorWhenPrivilegeIsCorePrivilege() throws Exception {
+		Context.getUserService().purgePrivilege(new Privilege(PrivilegeConstants.ADD_COHORTS));
+	}

----------------------------------------------------------------
state: 3
----------------------------------------------------------------
description: 测试通过，覆盖率：0.0
--------------------------------------------------------------------------------------------------------------------------------
