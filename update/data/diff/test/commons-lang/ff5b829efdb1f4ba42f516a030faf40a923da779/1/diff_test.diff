diff --git a/old_test.java b/new_test.java
index fdea2ae..352a639 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,51 +1,51 @@
 @Test
-    public void testHexDigitToBoolArray() {
-        assertBoolArrayEquals(
-            new boolean[]{false, false, false, false}, Conversion.hexDigitToBoolArray('0'));
-        assertBoolArrayEquals(
-            new boolean[]{true, false, false, false}, Conversion.hexDigitToBoolArray('1'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, false, false}, Conversion.hexDigitToBoolArray('2'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, false, false}, Conversion.hexDigitToBoolArray('3'));
-        assertBoolArrayEquals(
-            new boolean[]{false, false, true, false}, Conversion.hexDigitToBoolArray('4'));
-        assertBoolArrayEquals(
-            new boolean[]{true, false, true, false}, Conversion.hexDigitToBoolArray('5'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, true, false}, Conversion.hexDigitToBoolArray('6'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, true, false}, Conversion.hexDigitToBoolArray('7'));
-        assertBoolArrayEquals(
-            new boolean[]{false, false, false, true}, Conversion.hexDigitToBoolArray('8'));
-        assertBoolArrayEquals(
-            new boolean[]{true, false, false, true}, Conversion.hexDigitToBoolArray('9'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('A'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('a'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('B'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('b'));
-        assertBoolArrayEquals(
-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('C'));
-        assertBoolArrayEquals(
-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('c'));
-        assertBoolArrayEquals(
-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('D'));
-        assertBoolArrayEquals(
-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('d'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('E'));
-        assertBoolArrayEquals(
-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('e'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('F'));
-        assertBoolArrayEquals(
-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('f'));
+    public void testHexDigitToBinary() {
+        assertBinaryEquals(
+            new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0'));
+        assertBinaryEquals(
+            new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1'));
+        assertBinaryEquals(
+            new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2'));
+        assertBinaryEquals(
+            new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3'));
+        assertBinaryEquals(
+            new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4'));
+        assertBinaryEquals(
+            new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5'));
+        assertBinaryEquals(
+            new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6'));
+        assertBinaryEquals(
+            new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7'));
+        assertBinaryEquals(
+            new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8'));
+        assertBinaryEquals(
+            new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9'));
+        assertBinaryEquals(
+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A'));
+        assertBinaryEquals(
+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a'));
+        assertBinaryEquals(
+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B'));
+        assertBinaryEquals(
+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b'));
+        assertBinaryEquals(
+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C'));
+        assertBinaryEquals(
+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c'));
+        assertBinaryEquals(
+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D'));
+        assertBinaryEquals(
+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d'));
+        assertBinaryEquals(
+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E'));
+        assertBinaryEquals(
+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e'));
+        assertBinaryEquals(
+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F'));
+        assertBinaryEquals(
+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f'));
         try {
-            Conversion.hexDigitToBoolArray('G');
+            Conversion.hexDigitToBinary('G');
             fail("Thrown " + IllegalArgumentException.class.getName() + " expected");
         } catch (final IllegalArgumentException e) {
             // OK
