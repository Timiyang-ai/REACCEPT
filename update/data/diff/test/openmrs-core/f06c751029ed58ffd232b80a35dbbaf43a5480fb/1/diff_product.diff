diff --git a/old_product.java b/new_product.java
index 9d590e6..d3d2a7f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -3,10 +3,10 @@ public void validate(Object obj, Errors errors) {
 			throw new IllegalArgumentException("The parameter obj should not be null and must be of type" + OrderType.class);
 		} else {
 			OrderType orderType = (OrderType) obj;
-			
 			String name = orderType.getName();
 			if (!StringUtils.hasText(name)) {
 				errors.rejectValue("name", "error.name");
+				return;
 			}
 			
 			OrderType duplicate = Context.getOrderService().getOrderTypeByName(name);
@@ -16,15 +16,23 @@ public void validate(Object obj, Errors errors) {
 			
 			for (OrderType ot : Context.getOrderService().getOrderTypes(true)) {
 				if (ot != null) {
+					//If this was an edit, skip past the order we are actually validating 
+					if (orderType.equals(ot)) {
+						continue;
+					}
 					if (OpenmrsUtil.nullSafeEquals(orderType.getJavaClassName(), ot.getJavaClassName())) {
-						errors.rejectValue("javaClassName", "OrderType.duplicate.javaClass",
-						    "Duplicate order type java class: " + ot.getJavaClassName());
+						errors.rejectValue("javaClassName", "OrderType.duplicate", new Object[] {
+						        orderType.getJavaClassName(), orderType.getName() }, ot.getJavaClassName()
+						        + " is already associated to another order type:" + orderType.getName());
 					} else {
+						int index = 0;
 						for (ConceptClass cc : ot.getConceptClasses()) {
 							if (cc != null && orderType.getConceptClasses().contains(cc)) {
-								errors.rejectValue("conceptClasses", "OrderType.duplicate.conceptClass",
-								    "Duplicate order type concept class: " + cc.getName());
+								errors.rejectValue("conceptClasses[" + index + "]", "OrderType.duplicate", new Object[] {
+								        cc.getName(), orderType.getName() }, cc.getName()
+								        + " is already associated to another order type:" + orderType.getName());
 							}
+							index++;
 						}
 					}
 				}
