diff --git a/old_test.java b/new_test.java
index 542b7e2..d5a4859 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,25 +1,18 @@
 @Test public void intersectTest() {
+    // functions
     final SeqType
-        // function(xs:boolean) as xs:decimal?
-        f = FuncType.get(DEC_ZO, BLN).seqType(),
-        // function(xs:boolean) as xs:nonNegativeInteger
-        f2 = FuncType.get(AtomType.NNI.seqType(), BLN).seqType(),
-        // function(xs:boolean, xs:boolean) as xs:nonNegativeInteger
-        f3 = FuncType.get(AtomType.NNI.seqType(), BLN, BLN).seqType(),
-        // function(xs:integer) as xs:nonNegativeInteger
-        f4 = FuncType.get(AtomType.NNI.seqType(), ITR).seqType(),
-        // function(xs:boolean) as xs:integer
-        f5 = FuncType.get(ITR, BLN).seqType(),
-        // function(xs:boolean) as xs:boolean
-        f6 = FuncType.get(BLN, BLN).seqType(),
-        // map(xs:anyAtomicType, xs:integer)
-        m = MapType.get(AtomType.AAT, ITR).seqType(),
-        // map(xs:boolean, xs:integer)
-        m2 = MapType.get(AtomType.BLN, ITR).seqType(),
-        // map(xs:boolean, xs:nonNegativeInteger)
-        m3 = MapType.get(AtomType.BLN, AtomType.NNI.seqType()).seqType(),
-        // map(xs:integer, xs:integer)
-        m4 = MapType.get(AtomType.ITR, ITR).seqType();
+      // function(xs:boolean) as xs:decimal?
+      f = FuncType.get(DEC_ZO, BLN).seqType(),
+      // function(xs:boolean) as xs:nonNegativeInteger
+      f2 = FuncType.get(AtomType.NNI.seqType(), BLN).seqType(),
+      // function(xs:boolean, xs:boolean) as xs:nonNegativeInteger
+      f3 = FuncType.get(AtomType.NNI.seqType(), BLN, BLN).seqType(),
+      // function(xs:integer) as xs:nonNegativeInteger
+      f4 = FuncType.get(AtomType.NNI.seqType(), ITR).seqType(),
+      // function(xs:boolean) as xs:integer
+      f5 = FuncType.get(ITR, BLN).seqType(),
+      // function(xs:boolean) as xs:boolean
+      f6 = FuncType.get(BLN, BLN).seqType();
 
     intersect(get(AtomType.ITEM, 0), ITEM, null);
     intersect(ATT, ATT, ATT);
@@ -29,11 +22,23 @@
     intersect(f, ITR, null);
     intersect(f, f, f);
     intersect(f, f2, f2);
-    intersect(m, f, m);
     intersect(f, f5, f5);
     intersect(f, f4, FuncType.get(AtomType.NNI.seqType(), AAT).seqType());
     intersect(f2, f3, null);
     intersect(f5, f6, null);
+
+    // maps
+    final SeqType
+      // map(xs:anyAtomicType, xs:integer)
+      m = MapType.get(AtomType.AAT, ITR).seqType(),
+      // map(xs:boolean, xs:integer)
+      m2 = MapType.get(AtomType.BLN, ITR).seqType(),
+      // map(xs:boolean, xs:nonNegativeInteger)
+      m3 = MapType.get(AtomType.BLN, AtomType.NNI.seqType()).seqType(),
+      // map(xs:integer, xs:integer)
+      m4 = MapType.get(AtomType.ITR, ITR).seqType();
+
+    intersect(m, f, m);
     intersect(m, ITEM, m);
     intersect(m, ITR, null);
     intersect(m, m2, m);
@@ -46,4 +51,29 @@
     intersect(m, f3, null);
     intersect(m, f6, null);
     intersect(m, FuncType.get(ITR, ITEM).seqType(), null);
+
+    /* arrays
+    final SeqType
+      // array(xs:integer)
+      a = ArrayType.get(ITR).seqType(),
+      // array(xs:integer)
+      a2 = ArrayType.get(ITR).seqType(),
+      // array(xs:nonNegativeInteger)
+      a3 = ArrayType.get(AtomType.NNI.seqType()).seqType(),
+      // array(xs:integer)
+      a4 = ArrayType.get(ITR).seqType();
+
+    intersect(a, ITEM, a);
+    intersect(a, ITR, null);
+    intersect(a, a2, a);
+    intersect(a, a3, ArrayType.get(AtomType.NNI.seqType()).seqType());
+    intersect(a2, a4, a);
+    intersect(a2, ArrayType.get(BLN).seqType(), null);
+    intersect(a, FUN_O, a);
+    intersect(a, f, a);
+    intersect(a4, f5, a);
+    intersect(a, f3, null);
+    intersect(a, f6, null);
+    intersect(a, FuncType.get(ITEM).seqType(), null);
+    */
   }
\ No newline at end of file
