diff --git a/old_test.java b/new_test.java
index eeb1baa..2128f0c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -12,29 +12,35 @@
     assertTrue(ELM.union(ELM).eq(ELM));
     assertTrue(ELM.union(STR).eq(ITEM));
 
+    // functions
     final SeqType
-        // function(xs:boolean) as xs:decimal?
-        f = FuncType.get(DEC_ZO, BLN).seqType(),
-        // function(xs:boolean) as xs:nonNegativeInteger
-        f2 = FuncType.get(AtomType.NNI.seqType(), BLN).seqType(),
-        // function(xs:boolean, xs:boolean) as xs:nonNegativeInteger
-        f3 = FuncType.get(AtomType.NNI.seqType(), BLN, BLN).seqType(),
-        // function(xs:integer) as xs:nonNegativeInteger
-        f4 = FuncType.get(AtomType.NNI.seqType(), ITR).seqType(),
-        // function(xs:boolean) as xs:integer
-        f5 = FuncType.get(ITR, BLN).seqType(),
-        // map(xs:anyAtomicType, xs:integer)
-        m = MapType.get(AtomType.AAT, ITR).seqType(),
-        // map(xs:boolean, xs:integer)
-        m2 = MapType.get(AtomType.BLN, ITR).seqType(),
-        // map(xs:boolean, xs:nonNegativeInteger)
-        m3 = MapType.get(AtomType.BLN, AtomType.NNI.seqType()).seqType(),
-        // map(xs:integer, xs:integer)
-        m4 = MapType.get(AtomType.ITR, ITR).seqType();
+      // function(xs:boolean) as xs:decimal?
+      f = FuncType.get(DEC_ZO, BLN).seqType(),
+      // function(xs:boolean) as xs:nonNegativeInteger
+      f2 = FuncType.get(AtomType.NNI.seqType(), BLN).seqType(),
+      // function(xs:boolean, xs:boolean) as xs:nonNegativeInteger
+      f3 = FuncType.get(AtomType.NNI.seqType(), BLN, BLN).seqType(),
+      // function(xs:integer) as xs:nonNegativeInteger
+      f4 = FuncType.get(AtomType.NNI.seqType(), ITR).seqType(),
+      // function(xs:boolean) as xs:integer
+      f5 = FuncType.get(ITR, BLN).seqType();
+
     union(f, ITR, ITEM);
     union(f, FUN_O, FUN_O);
     union(f2, f3, FUN_O);
     union(f2, f4, FUN_O);
+
+    // maps
+    final SeqType
+      // map(xs:anyAtomicType, xs:integer)
+      m = MapType.get(AtomType.AAT, ITR).seqType(),
+      // map(xs:boolean, xs:integer)
+      m2 = MapType.get(AtomType.BLN, ITR).seqType(),
+      // map(xs:boolean, xs:nonNegativeInteger)
+      m3 = MapType.get(AtomType.BLN, AtomType.NNI.seqType()).seqType(),
+      // map(xs:integer, xs:integer)
+      m4 = MapType.get(AtomType.ITR, ITR).seqType();
+
     union(MAP_O, m, MAP_O);
     union(m, ITR, ITEM);
     union(m, f, f);
@@ -42,4 +48,24 @@
     union(m, m2, m2);
     union(m, m3, m2);
     union(m2, m4, FUN_O);
+
+    /* arrays
+    final SeqType
+      // array(xs:integer)
+      a = ArrayType.get(ITR).seqType(),
+      // array(xs:integer)
+      a2 = ArrayType.get(ITR).seqType(),
+      // array(xs:nonNegativeInteger)
+      a3 = ArrayType.get(AtomType.NNI.seqType()).seqType(),
+      // array(xs:integer)
+      a4 = ArrayType.get(ITR).seqType();
+
+    union(ARRAY_O, a, ARRAY_O);
+    union(a, ITR, ITEM);
+    union(a, f, f);
+    union(a, f2, f5);
+    union(a, a2, a2);
+    union(a, a3, a2);
+    union(a2, a4, FUN_O);
+    */
   }
\ No newline at end of file
