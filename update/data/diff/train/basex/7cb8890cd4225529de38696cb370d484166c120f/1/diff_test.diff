diff --git a/old_test.java b/new_test.java
index b4b2858..23be710 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,4 +1,4 @@
-@Test public void instanceOfTest() {
+@Test public void instanceOf() {
     assertTrue(BLN.instanceOf(AAT_ZM));
     assertFalse(AAT_ZM.instanceOf(BLN));
     assertTrue(DBL.instanceOf(DBL_ZM));
@@ -16,23 +16,28 @@
     assertFalse(f.instanceOf(FuncType.get(BLN, BLN).seqType()));
 
     // maps
-    final SeqType m = MapType.get(AtomType.AAT, ITR).seqType();
-    assertTrue(m.instanceOf(f));
-    assertFalse(f.instanceOf(m));
-    assertFalse(MAP_O.instanceOf(m));
-    assertTrue(m.instanceOf(MAP_O));
-    assertFalse(m.instanceOf(MapType.get(AtomType.AAT, BLN).seqType()));
-    assertFalse(MapType.get(AtomType.BLN, ITR).seqType().instanceOf(m));
+    final MapType m = MapType.get(AtomType.STR, ITR);
+    assertTrue(m.instanceOf(m));
+    assertTrue(m.instanceOf(AtomType.ITEM));
+    assertTrue(m.instanceOf(FuncType.ANY_FUN));
+    assertTrue(m.instanceOf(MapType.ANY_MAP));
+    assertTrue(m.instanceOf(MapType.get(AtomType.ITEM, ITR)));
+    assertTrue(m.instanceOf(MapType.get(AtomType.STR, ITR)));
+    assertTrue(m.instanceOf(MapType.get(AtomType.STR, ITR_ZO)));
+    assertFalse(m.instanceOf(ArrayType.ANY_ARRAY));
+    assertFalse(m.instanceOf(MapType.get(AtomType.STR, BLN)));
+    assertFalse(m.instanceOf(MapType.get(AtomType.ITR, ITEM_ZM)));
 
-    /* arrays
-    final SeqType a = ArrayType.get(ITR).seqType();
-    assertTrue(a.instanceOf(f));
-    assertFalse(f.instanceOf(a));
-    assertFalse(ARRAY_O.instanceOf(a));
-    assertTrue(a.instanceOf(ARRAY_O));
-    assertFalse(a.instanceOf(ArrayType.get(BLN).seqType()));
-    assertFalse(ArrayType.get(ITR).seqType().instanceOf(a));
-    */
+    final ArrayType a = ArrayType.get(ITR);
+    assertTrue(a.instanceOf(a));
+    assertTrue(a.instanceOf(AtomType.ITEM));
+    assertTrue(a.instanceOf(FuncType.ANY_FUN));
+    assertTrue(a.instanceOf(ArrayType.ANY_ARRAY));
+    assertTrue(a.instanceOf(ArrayType.get(ITR)));
+    assertTrue(a.instanceOf(ArrayType.get(ITR)));
+    assertTrue(a.instanceOf(ArrayType.get(ITR_ZO)));
+    assertFalse(a.instanceOf(MapType.ANY_MAP));
+    assertFalse(a.instanceOf(ArrayType.get(BLN)));
 
     // nodes
     assertTrue(ATT.instanceOf(NOD));
