diff --git a/old_product.java b/new_product.java
index 6d6e4f0..23817b9 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,20 +1,22 @@
 protected final TokenList tokens(final QueryContext qc, final boolean all) throws QueryException {
-    final byte[] token = toToken(exprs[0], qc);
+    final Item item = exprs[0].atomItem(qc, info);
     final FtTokenizeOptions opts = toOptions(1, new FtTokenizeOptions(), qc);
 
-    final FTOpt opt = new FTOpt().assign(qc.ftOpt());
-    final FTDiacritics dc = opts.get(FtTokenizeOptions.DIACRITICS);
-    if(dc != null) opt.set(DC, dc == FTDiacritics.SENSITIVE);
-    final Boolean st = opts.get(FtTokenizeOptions.STEMMING);
-    if(st != null) opt.set(ST, st);
-    final String ln = opts.get(FtTokenizeOptions.LANGUAGE);
-    if(ln != null) opt.ln = Language.get(ln);
-    final FTCase cs = opts.get(FtTokenizeOptions.CASE);
-    if(cs != null) opt.cs = cs;
-
     final TokenList tl = new TokenList();
-    final FTLexer lexer = new FTLexer(opt).init(token);
-    if(all) lexer.all();
-    while(lexer.hasNext()) tl.add(lexer.nextToken());
+    if(item != null) {
+      final FTOpt opt = new FTOpt().assign(qc.ftOpt());
+      final FTDiacritics dc = opts.get(FtTokenizeOptions.DIACRITICS);
+      if(dc != null) opt.set(DC, dc == FTDiacritics.SENSITIVE);
+      final Boolean st = opts.get(FtTokenizeOptions.STEMMING);
+      if(st != null) opt.set(ST, st);
+      final String ln = opts.get(FtTokenizeOptions.LANGUAGE);
+      if(ln != null) opt.ln = Language.get(ln);
+      final FTCase cs = opts.get(FtTokenizeOptions.CASE);
+      if(cs != null) opt.cs = cs;
+
+      final FTLexer lexer = new FTLexer(opt).init(toToken(item));
+      if(all) lexer.all();
+      while(lexer.hasNext()) tl.add(lexer.nextToken());
+    }
     return tl;
   }
\ No newline at end of file
