diff --git a/old_product.java b/new_product.java
index a7d3d98..fe2979b 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,7 +1,7 @@
 private Item updateEntries(final QueryContext ctx) throws QueryException {
     // check argument
     final ANode elm = (ANode) checkType(expr[0].item(ctx, info), NodeType.ELM);
-    if(!elm.qname().eq(E_FILE)) ZIPUNKNOWN.thrw(info, elm.qname());
+    if(!elm.qname().eq(E_FILE)) ZIP_UNKNOWN.thrw(info, elm.qname());
 
     // sorted paths in original file
     final String in = attribute(elm, A_HREF, true);
@@ -14,7 +14,7 @@ private Item updateEntries(final QueryContext ctx) throws QueryException {
     } while(out.exists());
 
     // open zip file
-    if(!new IOFile(in).exists()) ZIPNOTFOUND.thrw(info, in);
+    if(!new IOFile(in).exists()) ZIP_NOTFOUND.thrw(info, in);
     ZipFile zf = null;
     boolean ok = true;
     try {
@@ -30,12 +30,12 @@ private Item updateEntries(final QueryContext ctx) throws QueryException {
         zos.close();
       } catch(final IOException ex) {
         ok = false;
-        ZIPFAIL.thrw(info, ex.getMessage());
+        ZIP_FAIL.thrw(info, ex.getMessage());
       } finally {
         if(fos != null) try { fos.close(); } catch(final IOException ex) { }
       }
     } catch(final IOException ex) {
-      throw ZIPFAIL.thrw(info, ex.getMessage());
+      throw ZIP_FAIL.thrw(info, ex.getMessage());
     } finally {
       if(zf != null) try { zf.close(); } catch(final IOException e) { }
       if(ok) {
