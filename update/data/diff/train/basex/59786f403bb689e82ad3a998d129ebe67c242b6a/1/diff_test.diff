diff --git a/old_test.java b/new_test.java
index 26f492a..0a10d4a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,50 +1,50 @@
 @Test public void instanceOf() {
-    assertTrue(BLN.instanceOf(AAT_ZM));
-    assertFalse(AAT_ZM.instanceOf(BLN));
-    assertTrue(DBL.instanceOf(DBL_ZM));
-    assertFalse(DBL_ZM.instanceOf(DBL));
+    assertTrue(BLN_O.instanceOf(AAT_ZM));
+    assertFalse(AAT_ZM.instanceOf(BLN_O));
+    assertTrue(DBL_O.instanceOf(DBL_ZM));
+    assertFalse(DBL_ZM.instanceOf(DBL_O));
 
     // functions
-    final SeqType f = FuncType.get(DEC_ZO, BLN).seqType();
-    assertFalse(f.instanceOf(ITR));
-    assertTrue(f.instanceOf(ITEM));
+    final SeqType f = FuncType.get(DEC_ZO, BLN_O).seqType();
+    assertFalse(f.instanceOf(ITR_O));
+    assertTrue(f.instanceOf(ITEM_O));
     assertTrue(f.instanceOf(f));
     assertTrue(f.instanceOf(FUN_OZ));
     assertFalse(FUN_O.instanceOf(f));
-    assertFalse(f.instanceOf(FuncType.get(DEC_ZO, BLN, ITR).seqType()));
-    assertFalse(f.instanceOf(FuncType.get(DEC_ZO, AAT).seqType()));
-    assertFalse(f.instanceOf(FuncType.get(BLN, BLN).seqType()));
+    assertFalse(f.instanceOf(FuncType.get(DEC_ZO, BLN_O, ITR_O).seqType()));
+    assertFalse(f.instanceOf(FuncType.get(DEC_ZO, AAT_O).seqType()));
+    assertFalse(f.instanceOf(FuncType.get(BLN_O, BLN_O).seqType()));
 
     // maps
-    final MapType m = MapType.get(AtomType.STR, ITR);
+    final MapType m = MapType.get(AtomType.STR, ITR_O);
     assertTrue(m.instanceOf(m));
     assertTrue(m.instanceOf(AtomType.ITEM));
     assertTrue(m.instanceOf(ANY_FUN));
     assertTrue(m.instanceOf(ANY_MAP));
-    assertTrue(m.instanceOf(MapType.get(AtomType.ITEM, ITR)));
-    assertTrue(m.instanceOf(MapType.get(AtomType.STR, ITR)));
+    assertTrue(m.instanceOf(MapType.get(AtomType.ITEM, ITR_O)));
+    assertTrue(m.instanceOf(MapType.get(AtomType.STR, ITR_O)));
     assertTrue(m.instanceOf(MapType.get(AtomType.STR, ITR_ZO)));
     assertFalse(m.instanceOf(ANY_ARRAY));
-    assertFalse(m.instanceOf(MapType.get(AtomType.STR, BLN)));
+    assertFalse(m.instanceOf(MapType.get(AtomType.STR, BLN_O)));
     assertFalse(m.instanceOf(MapType.get(AtomType.ITR, ITEM_ZM)));
 
-    final ArrayType a = ArrayType.get(ITR);
+    final ArrayType a = ArrayType.get(ITR_O);
     assertTrue(a.instanceOf(a));
     assertTrue(a.instanceOf(AtomType.ITEM));
     assertTrue(a.instanceOf(ANY_FUN));
     assertTrue(a.instanceOf(ANY_ARRAY));
-    assertTrue(a.instanceOf(ArrayType.get(ITR)));
-    assertTrue(a.instanceOf(ArrayType.get(ITR)));
+    assertTrue(a.instanceOf(ArrayType.get(ITR_O)));
+    assertTrue(a.instanceOf(ArrayType.get(ITR_O)));
     assertTrue(a.instanceOf(ArrayType.get(ITR_ZO)));
     assertFalse(a.instanceOf(ANY_MAP));
-    assertFalse(a.instanceOf(ArrayType.get(BLN)));
+    assertFalse(a.instanceOf(ArrayType.get(BLN_O)));
 
     // nodes
-    assertTrue(ATT.instanceOf(NOD));
-    assertTrue(ATT.instanceOf(ATT));
-    assertFalse(ATT.instanceOf(ELM));
-    assertFalse(ELM.instanceOf(f));
-    assertFalse(NOD.instanceOf(ELM));
-    assertFalse(ITEM.instanceOf(ELM));
-    assertTrue(ELM.instanceOf(ITEM));
+    assertTrue(ATT_O.instanceOf(NOD_O));
+    assertTrue(ATT_O.instanceOf(ATT_O));
+    assertFalse(ATT_O.instanceOf(ELM_O));
+    assertFalse(ELM_O.instanceOf(f));
+    assertFalse(NOD_O.instanceOf(ELM_O));
+    assertFalse(ITEM_O.instanceOf(ELM_O));
+    assertTrue(ELM_O.instanceOf(ITEM_O));
   }
\ No newline at end of file
