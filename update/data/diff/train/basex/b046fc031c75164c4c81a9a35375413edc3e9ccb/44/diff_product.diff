diff --git a/old_product.java b/new_product.java
index f5327b1..9aa3a28 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,12 +1,10 @@
 private B64 update(final QueryContext qc) throws QueryException {
-    final B64 archive = (B64) checkType(checkItem(exprs[0], qc), AtomType.B64);
+    final B64 archive = toB64(exprs[0], qc, false);
     // entries to be updated
     final TokenObjMap<Item[]> hm = new TokenObjMap<>();
 
-    final Iter entr = qc.iter(exprs[1]);
-    final Iter cont = qc.iter(exprs[2]);
-    int e = 0;
-    int c = 0;
+    final Iter entr = qc.iter(exprs[1]), cont = qc.iter(exprs[2]);
+    int e = 0, c = 0;
     Item en, cn;
     while(true) {
       en = entr.next();
@@ -19,13 +17,13 @@ private B64 update(final QueryContext qc) throws QueryException {
     // count remaining entries
     if(cn != null) do c++; while(cont.next() != null);
     if(en != null) do e++; while(entr.next() != null);
-    if(e != c) throw ARCH_DIFF.get(info, e, c);
+    if(e != c) throw ARCH_DIFF_X_X.get(info, e, c);
 
     final ArchiveIn in = ArchiveIn.get(archive.input(info), info);
     final ArchiveOut out = ArchiveOut.get(in.format(), info);
     try {
       if(in instanceof GZIPIn)
-        throw ARCH_MODIFY.get(info, in.format().toUpperCase(Locale.ENGLISH));
+        throw ARCH_MODIFY_X.get(info, in.format().toUpperCase(Locale.ENGLISH));
       // delete entries to be updated
       while(in.more()) if(!hm.contains(token(in.entry().getName()))) out.write(in);
       // add new and updated entries
@@ -35,7 +33,7 @@ private B64 update(final QueryContext qc) throws QueryException {
         add(it[0], it[1], out, ZipEntry.DEFLATED, qc);
       }
     } catch(final IOException ex) {
-      throw ARCH_FAIL.get(info, ex);
+      throw ARCH_FAIL_X.get(info, ex);
     } finally {
       in.close();
       out.close();
