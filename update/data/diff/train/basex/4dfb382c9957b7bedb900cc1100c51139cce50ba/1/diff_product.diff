diff --git a/old_product.java b/new_product.java
index 096f9d7..96249cc 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,28 +1,28 @@
-public static Serializer get(final OutputStream os, final SerializerProp props)
+public static Serializer get(final OutputStream os, final SerializerOptions opts)
       throws IOException {
 
-    // no properties given: serialize as XML
-    if(props == null) return get(os);
+    // no parameters given: serialize as XML
+    if(opts == null) return get(os);
 
     // standard types: XHTML, HTML, text
-    final String m = props.check(S_METHOD, METHODS);
-    if(M_XHTML.equals(m)) return new XHTMLSerializer(os, props);
-    if(M_HTML.equals(m)) return new HTMLSerializer(os, props);
-    if(M_TEXT.equals(m)) return new TextSerializer(os, props);
+    final String m = opts.check(S_METHOD, METHODS);
+    if(M_XHTML.equals(m)) return new XHTMLSerializer(os, opts);
+    if(M_HTML.equals(m)) return new HTMLSerializer(os, opts);
+    if(M_TEXT.equals(m)) return new TextSerializer(os, opts);
 
     // serialize as raw data
-    if(M_RAW.equals(m)) return new RawSerializer(os, props);
+    if(M_RAW.equals(m)) return new RawSerializer(os, opts);
 
     // serialize as CSV
-    if(M_CSV.equals(m)) return new CsvSerializer(os, props);
+    if(M_CSV.equals(m)) return new CsvSerializer(os, opts);
 
     // serialize as JSON
     if(M_JSON.equals(m)) {
-      final JsonProp jp = new JsonProp(props.get(S_JSON));
-      return jp.format() == JsonFormat.DEFAULT ? new JsonDefaultSerializer(os, props) :
-        new JsonMLSerializer(os, props);
+      final JsonOptions jp = new JsonOptions(opts.get(S_JSON));
+      return jp.format() == JsonFormat.DEFAULT ? new JsonDefaultSerializer(os, opts) :
+        new JsonMLSerializer(os, opts);
     }
 
     // otherwise, serialize as XML (default)
-    return new XMLSerializer(os, props);
+    return new XMLSerializer(os, opts);
   }
\ No newline at end of file
