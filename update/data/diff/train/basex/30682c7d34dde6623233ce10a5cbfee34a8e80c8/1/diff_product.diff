diff --git a/old_product.java b/new_product.java
index a1e53ed..89610c0 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,33 +1,21 @@
 private ANode entries(final QueryContext ctx) throws QueryException {
-    //final Uri uri = (Uri) checkType(expr[0].item(ctx, input), Type.URI);
     final String file = string(checkStr(expr[0], ctx));
-    if(!IO.get(file).exists()) ZIPNOTFOUND.thrw(input, file);
 
-    // traverse all zip entries and create intermediate map,
-    // as zip entries are not sorted
-    final TreeMap<String, FElem> map = new TreeMap<String, FElem>();
+    // check file path
+    final IO path = IO.get(file);
+    if(!path.exists()) ZIPNOTFOUND.thrw(input, file);
+    // loop through file
     ZipFile zf = null;
     try {
       zf = new ZipFile(file);
-      final Enumeration<? extends ZipEntry> en = zf.entries();
-      // loop through all files
-      while(en.hasMoreElements()) {
-        final ZipEntry ze = en.nextElement();
-        final FElem e = new FElem(ze.isDirectory() ? E_DIR : E_ENTRY, null);
-        final String name = ze.getName();
-        e.atts.add(new FAttr(A_NAME, token(name), e));
-        map.put(name, e);
-      }
+      // create result node
+      final FElem root = new FElem(E_FILE, ZIP, ZIPURI);
+      root.atts.add(new FAttr(A_HREF, token(path.path()), root));
+      createEntries(paths(zf).iterator(), root, "");
+      return root;
     } catch(final IOException ex) {
       throw ZIPFAIL.thrw(input, ex.getMessage());
     } finally {
       if(zf != null) try { zf.close(); } catch(final IOException e) { }
     }
-
-    // create result node
-    final FElem root = new FElem(E_FILE, ZIP, ZIPURI);
-    root.atts.add(new FAttr(A_HREF, token(file), root));
-    final Iterator<String> it = map.keySet().iterator();
-    createEntries(map, it, root, "");
-    return root;
   }
\ No newline at end of file
