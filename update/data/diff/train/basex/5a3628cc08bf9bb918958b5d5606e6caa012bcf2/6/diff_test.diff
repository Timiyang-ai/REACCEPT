diff --git a/old_test.java b/new_test.java
index 3c72c48..a9879ec 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,17 +3,17 @@
     query(_FILE_WRITE.args(PATH1, "abcd"));
     error(_FILE_LIST.args(PATH1), FILE_NO_DIR_X);
     error(_FILE_LIST.args(PATH1 + NAME), FILE_NO_DIR_X);
-    query(_FILE_WRITE.args(PATH1, "()"));
+    query(_FILE_WRITE.args(PATH1, " ()"));
     error(_FILE_LIST.args(PATH1), FILE_NO_DIR_X);
     query(_FILE_LIST.args(PATH), NAME);
-    contains(_FILE_LIST.args(PATH, "false()"), NAME);
-    contains(_FILE_LIST.args(PATH, "false()", NAME), NAME);
-    query(_FILE_LIST.args(PATH, "false()", "XXX"), "");
+    contains(_FILE_LIST.args(PATH, false), NAME);
+    contains(_FILE_LIST.args(PATH, false, NAME), NAME);
+    query(_FILE_LIST.args(PATH, false, "XXX"), "");
     query(_FILE_DELETE.args(PATH1));
     // check recursive paths
     query(_FILE_CREATE_DIR.args(PATH1));
     query(_FILE_CREATE_DIR.args(PATH3));
-    query(_FILE_WRITE.args(PATH4, "()"));
-    contains(_FILE_LIST.args(PATH1, "true()"), "y");
-    query(_FILE_LIST.args(PATH1, "true()", "x"), 'x' + File.separator);
+    query(_FILE_WRITE.args(PATH4, " ()"));
+    contains(_FILE_LIST.args(PATH1, true), "y");
+    query(_FILE_LIST.args(PATH1, true, "x"), 'x' + File.separator);
   }
\ No newline at end of file
