diff --git a/old_product.java b/new_product.java
index 6938b57..2349ff5 100644
--- a/old_product.java
+++ b/new_product.java
@@ -7,34 +7,37 @@ private Iter logs(final QueryContext ctx) throws QueryException {
         vb.add(new FElem(FILE).add(date).add(SIZE, Token.token(f.length())));
       }
     } else {
-      // return log file contents
+      // return content of single log file
+      final boolean merge = expr.length > 1 && checkBln(expr[1], ctx);
       final String name = Token.string(checkStr(expr[0], ctx)) + IO.LOGSUFFIX;
       final IOFile file = new IOFile(ctx.context.log.dir(), name);
-      if(file.exists()) {
-        try {
-          final NewlineInput nli = new NewlineInput(file);
-          try {
-            for(String l; (l = nli.readLine()) != null;) {
-              final FElem elem = new FElem(ENTRY);
-              final String[] cols = l.split("\t");
-              if(cols.length > 2 && (cols[1].matches(".*:\\d+") ||
-                  cols[1].equals(Log.SERVER))) {
-                // new format (more specific)
-                elem.add(TIME, cols[0]).add(ADDRESS, cols[1]).add(USER, cols[2]);
-                if(cols.length > 3) elem.add(TYPE, cols[3].toLowerCase(Locale.ENGLISH));
-                if(cols.length > 4) elem.add(cols[4]);
-                if(cols.length > 5) elem.add(MS, cols[5].replace(" ms", ""));
-              } else {
-                elem.add(l);
+      final ArrayList<LogEntry> logs = logs(file);
+      for(int s = 0; s < logs.size(); s++) {
+        final LogEntry l1 = logs.get(s);
+        final FElem elem = new FElem(ENTRY);
+        if(l1.address != null) {
+          if(merge && l1.ms.equals(BigDecimal.ZERO) && !Log.SERVER.equals(l1.address)) {
+            for(int l = s + 1; l < logs.size(); l++) {
+              final LogEntry l2 = logs.get(l);
+              if(l2 != null && l1.address.equals(l2.address)) {
+                if(l2.type.equals(Log.REQUEST)) continue;
+                if(l1.type.equals(Log.REQUEST)) l1.type = "";
+                l1.type = merge(l1.type, l2.type);
+                l1.message = merge(l1.message, l2.message);
+                l1.ms = l1.ms.add(l2.ms);
+                logs.remove(l--);
+                if(!l2.message.equals(Log.REQUEST)) break;
               }
-              vb.add(elem);
             }
-          } finally {
-            nli.close();
           }
-        } catch(final IOException ex) {
-          throw IOERR.get(info, ex);
+          elem.add(TIME, l1.time).add(ADDRESS, l1.address).add(USER, l1.user);
+          if(l1.type != null) elem.add(TYPE, l1.type);
+          if(!l1.ms.equals(BigDecimal.ZERO)) elem.add(MS, l1.ms.toString());
+          if(l1.message != null) elem.add(l1.message);
+        } else {
+          elem.add(l1.message);
         }
+        vb.add(elem);
       }
     }
     return vb;
