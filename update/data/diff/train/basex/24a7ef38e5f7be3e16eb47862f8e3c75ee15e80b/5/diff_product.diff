diff --git a/old_product.java b/new_product.java
index 06d0507..d9440d5 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,31 +1,21 @@
-private Item copy(final File src, final QueryContext ctx)
-      throws QueryException {
-
-    File trg = new File(string(checkStr(expr[1], ctx)));
-    // attach file name if target is a directory
-    if(trg.isDirectory()) {
-      trg = new File(trg, src.getName());
-    } else if(!trg.isFile()) {
-      final File par = trg.getParentFile();
-      if(!par.exists() || !par.isDirectory()) PATHINVALID.thrw(input, trg);
-    }
-
-    if(!src.exists()) PATHNOTEXISTS.thrw(input, src);
-    if(src.isDirectory()) PATHISDIR.thrw(input, src);
-
-    if(!src.equals(trg)) {
+private void copy(final File src, final File trg) throws QueryException {
+    if(src.isDirectory()) {
+      if(!trg.mkdir()) CANNOTCREATE.thrw(input, trg);
+      final File[] files = src.listFiles();
+      if(files == null) CANNOTLIST.thrw(input, src);
+      for(final File f : files) copy(f, new File(trg, f.getName()));
+    } else {
       FileChannel sc = null;
-      FileChannel dc = null;
+      FileChannel tc = null;
       try {
         sc = new FileInputStream(src).getChannel();
-        dc = new FileOutputStream(trg).getChannel();
-        dc.transferFrom(sc, 0, sc.size());
+        tc = new FileOutputStream(trg).getChannel();
+        tc.transferFrom(sc, 0, sc.size());
       } catch(final IOException ex) {
         FILEERROR.thrw(input, ex);
       } finally {
         if(sc != null) try { sc.close(); } catch(final IOException ex) { }
-        if(dc != null) try { dc.close(); } catch(final IOException ex) { }
+        if(tc != null) try { tc.close(); } catch(final IOException ex) { }
       }
     }
-    return null;
   }
\ No newline at end of file
