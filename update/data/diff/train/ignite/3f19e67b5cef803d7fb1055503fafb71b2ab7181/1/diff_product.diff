diff --git a/old_product.java b/new_product.java
index d89d9f1..55cc835 100644
--- a/old_product.java
+++ b/new_product.java
@@ -7,6 +7,8 @@
             (env, upstream, upstreamSize, ctx) -> {
                 double[] sums = null;
                 int[] counts = null;
+                double[] maxs = null;
+                double[] mins = null;
                 Map<Double, Integer>[] valuesByFreq = null;
 
                 while (upstream.hasNext()) {
@@ -15,11 +17,23 @@
 
                     switch (imputingStgy) {
                         case MEAN:
-                            sums = calculateTheSums(row, sums);
-                            counts = calculateTheCounts(row, counts);
+                            sums = updateTheSums(row, sums);
+                            counts = updateTheCounts(row, counts);
                             break;
                         case MOST_FREQUENT:
-                            valuesByFreq = calculateFrequencies(row, valuesByFreq);
+                            valuesByFreq = updateFrequenciesByGivenRow(row, valuesByFreq);
+                            break;
+                        case LEAST_FREQUENT:
+                            valuesByFreq = updateFrequenciesByGivenRow(row, valuesByFreq);
+                            break;
+                        case MAX:
+                            maxs = updateTheMaxs(row, maxs);
+                            break;
+                        case MIN:
+                            mins = updateTheMins(row, mins);
+                            break;
+                        case COUNT:
+                            counts = updateTheCounts(row, counts);
                             break;
                         default: throw new UnsupportedOperationException("The chosen strategy is not supported");
                     }
@@ -34,6 +48,18 @@
                     case MOST_FREQUENT:
                         partData = new ImputerPartitionData().withValuesByFrequency(valuesByFreq);
                         break;
+                    case LEAST_FREQUENT:
+                        partData = new ImputerPartitionData().withValuesByFrequency(valuesByFreq);
+                        break;
+                    case MAX:
+                        partData = new ImputerPartitionData().withMaxs(maxs);
+                        break;
+                    case MIN:
+                        partData = new ImputerPartitionData().withMins(mins);
+                        break;
+                    case COUNT:
+                        partData = new ImputerPartitionData().withCounts(counts);
+                        break;
                     default: throw new UnsupportedOperationException("The chosen strategy is not supported");
                 }
                 return partData;
@@ -47,7 +73,19 @@
                     imputingValues = VectorUtils.of(calculateImputingValuesBySumsAndCounts(dataset));
                     break;
                 case MOST_FREQUENT:
-                    imputingValues = VectorUtils.of(calculateImputingValuesByFrequencies(dataset));
+                    imputingValues = VectorUtils.of(calculateImputingValuesByTheMostFrequentValues(dataset));
+                    break;
+                case LEAST_FREQUENT:
+                    imputingValues = VectorUtils.of(calculateImputingValuesByTheLeastFrequentValues(dataset));
+                    break;
+                case MAX:
+                    imputingValues = VectorUtils.of(calculateImputingValuesByMaxValues(dataset));
+                    break;
+                case MIN:
+                    imputingValues = VectorUtils.of(calculateImputingValuesByMinValues(dataset));
+                    break;
+                case COUNT:
+                    imputingValues = VectorUtils.of(calculateImputingValuesByCounts(dataset));
                     break;
                 default: throw new UnsupportedOperationException("The chosen strategy is not supported");
             }
