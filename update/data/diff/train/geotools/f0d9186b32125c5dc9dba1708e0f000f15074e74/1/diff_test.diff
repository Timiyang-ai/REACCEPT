diff --git a/old_test.java b/new_test.java
index 4347029..3f41c76 100644
--- a/old_test.java
+++ b/new_test.java
@@ -14,7 +14,7 @@
          * No hints. The fist factory should be selected.
          */
         hints   = null;
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("No preferences; should select the first factory. ", factory1, factory);
         /*
          * A hint compatible with one of our factories. Factory #1 declares explicitly that it uses
@@ -22,7 +22,7 @@
          * indifferent. Since factory #1 is the first one in the list, it should be selected.
          */
         hints   = new Hints(Hints.KEY_INTERPOLATION, Hints.VALUE_INTERPOLATION_BILINEAR);
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("First factory matches; it should be selected. ", factory1, factory);
         /*
          * A hint incompatible with all our factories. Factory #1 is the only one to defines
@@ -31,7 +31,7 @@
          */
         hints = new Hints(Hints.KEY_INTERPOLATION, Hints.VALUE_INTERPOLATION_BICUBIC);
         try {
-            factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+            factory = registry.getFactory(DummyFactory.class, null, hints, key);
             fail("Found factory "+factory+", while the hint should have been rejected.");
         } catch (FactoryNotFoundException exception) {
             // This is the expected exception. Continue...
@@ -42,9 +42,9 @@
          * this one doesn't have any dependency toward factory #1.
          */
         final DummyFactory factory4 = new DummyFactory.Example4();
-        registry.registerServiceProvider(factory4);
+        registry.registerFactory(factory4);
         assertTrue(registry.setOrdering(DummyFactory.class, factory1, factory4));
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("The new factory should be selected. ", factory4, factory);
 
         // ----------------------------
@@ -55,13 +55,13 @@
          */
         DummyFactory explicit = new DummyFactory.Example3();
         hints   = new Hints(DummyFactory.DUMMY_FACTORY, explicit);
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("The user-specified factory should have been selected. ", explicit, factory);
         /*
          * User specifies the expected implementation class rather than an instance.
          */
         hints   = new Hints(DummyFactory.DUMMY_FACTORY, DummyFactory.Example2.class);
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("Factory of class #2 were requested. ", factory2, factory);
         /*
          * Same as above, but with classes specified in an array.
@@ -70,7 +70,7 @@
             DummyFactory.Example3.class,
             DummyFactory.Example2.class
         });
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("Factory of class #3 were requested. ", factory3, factory);
         /*
          * The following hint should be ignored by factory #1, since this factory doesn't have
@@ -78,7 +78,7 @@
          * it should be selected.
          */
         hints   = new Hints(DummyFactory.INTERNAL_FACTORY, DummyFactory.Example2.class);
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("Expected factory #1. ", factory1, factory);
         /*
          * If the user really wants some factory that do have a dependency to factory #2, he should
@@ -103,6 +103,6 @@
          */
         hints = new Hints(DummyFactory.INTERNAL_FACTORY, DummyFactory.Example1.class);
         hints.add(implementations);
-        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
+        factory = registry.getFactory(DummyFactory.class, null, hints, key);
         assertSame("Expected a factory using #1 internally. ", factory2, factory);
     }
\ No newline at end of file
