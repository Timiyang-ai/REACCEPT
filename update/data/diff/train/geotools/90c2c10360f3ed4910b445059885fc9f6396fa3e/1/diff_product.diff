diff --git a/old_product.java b/new_product.java
index 22cbef9..c32b691 100644
--- a/old_product.java
+++ b/new_product.java
@@ -128,6 +128,15 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
          */
         PlanarImage sourceImage = PlanarImage.wrapRenderedImage(sourceCoverage.getRenderedImage());
         assert sourceCoverage.getCoordinateReferenceSystem() == sourceCRS : sourceCoverage;
+        
+        // Getting optional ROI and NoData as properties
+        Map sourceProps = sourceCoverage.getProperties();
+        sourceProps = sourceProps != null ? new HashMap<>(sourceProps) : new HashMap<>();
+        Object roiProp = sourceProps.get("GC_ROI");
+        NoDataContainer nodataProp = CoverageUtilities.getNoDataProperty(sourceCoverage);
+        ROI roi = (roiProp != null && roiProp instanceof ROI) ? (ROI)roiProp : null;
+        Range nodata = nodataProp != null ? nodataProp.getAsRange() : null;
+        
         // From this point, consider 'sourceCoverage' as final.
 
         ////////////////////////////////////////////////////////////////////////////////////////
@@ -327,15 +336,22 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
          * delegates the work to a "Crop" operation.
          */
         final String operation;
-        final ParameterBlock paramBlk = new ParameterBlock().addSource(sourceImage);
+
+        // Using ImageWorker instead
+        ImageWorker w = new ImageWorker(sourceImage);
+        w.setROI(roi);
+        w.setBackground(background);
+        w.setNoData(nodata);
+        w.setRenderingHints(targetHints);
+        ROI newROI = null;
+        Range newNoData = null;
         final Map<String, Object> imageProperties = new HashMap<String, Object>();
         Warp warp = null;
         if (allSteps.isIdentity() || (allSteps instanceof AffineTransform &&
                 XAffineTransform.isIdentity((AffineTransform) allSteps, EPS)))
         {
             sourceImage = PlanarImage.wrapRenderedImage(sourceCoverage.getRenderedImage());
-            paramBlk.removeSources();
-            paramBlk.addSource(sourceImage);
+            w.setImage(sourceImage);
             if (targetBB.equals(sourceBB)) {
                 /*
                  * Optimization in case we have nothing to do, not even a crop. Reverts to the
@@ -346,18 +362,26 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
                  */
                 
                 sourceImage = PlanarImage.wrapRenderedImage(sourceCoverage.getRenderedImage());
-                return create(sourceCoverage, sourceImage, targetGG, null, null, hints);
+                return create(sourceCoverage, sourceImage, targetGG, null, null, hints, sourceProps);
             }
             if (sourceBB.contains(targetBB)) {
+                w.crop(Float.valueOf(targetBB.x), 
+                        Float.valueOf(targetBB.y), 
+                        Float.valueOf(targetBB.width), 
+                        Float.valueOf(targetBB.height));
+                newROI = w.getROI();
+                newNoData = w.getNoData();
+                CoverageUtilities.setROIProperty(sourceProps, newROI);
+                CoverageUtilities.setNoDataProperty(sourceProps, newNoData);
                 operation = "Crop";
-                paramBlk.add(Float.valueOf(targetBB.x))
-                        .add(Float.valueOf(targetBB.y))
-                        .add(Float.valueOf(targetBB.width))
-                        .add(Float.valueOf(targetBB.height));
             } else {
+                w.setNoData(null);
+                w.mosaic(new RenderedImage[]{sourceImage}, MosaicDescriptor.MOSAIC_TYPE_OVERLAY, null, new ROI[]{roi}, null, nodata != null ? new Range[]{nodata} : null);
+                newROI = w.getROI();
+                newNoData = w.getNoData();
+                CoverageUtilities.setROIProperty(sourceProps, newROI);
+                CoverageUtilities.setNoDataProperty(sourceProps, newNoData);
                 operation = "Mosaic";
-                paramBlk.add(MosaicDescriptor.MOSAIC_TYPE_OVERLAY)
-                        .add(null).add(null).add(null).add(background);
             }
         } else {
             /*
@@ -390,12 +414,16 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
                      * using heuristic rules. Only the constructor with a MathTransform argument
                      * is fully accurate.
                      */
-                    return create(sourceCoverage, sourceImage, targetGG, null, null, hints);
+                    return create(sourceCoverage, sourceImage, targetGG, null, null, hints, sourceProps);
                 }
                 // More general approach: apply the affine transform.
-                operation = "Affine";
                 final AffineTransform affine = (AffineTransform) allSteps.inverse();
-                paramBlk.add(affine).add(interpolation).add(background);
+                w.affine(affine, interpolation, backgroundValues);
+                operation = "Affine";
+                newROI = w.getROI();
+                newNoData = w.getNoData();
+                CoverageUtilities.setROIProperty(sourceProps, newROI);
+                CoverageUtilities.setNoDataProperty(sourceProps, newNoData);
             } else {
                 /*
                  * General case: constructs the warp transform.
@@ -442,10 +470,14 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
                 // it with affine transforms down the chain
                 imageProperties.put("MathTransform", transform);
                 imageProperties.put("SourceBoundingBox", sourceBB);
-                paramBlk.add(warp).add(interpolation).add(background);
+                w.warp(warp, interpolation);
+                newROI = w.getROI();
+                newNoData = w.getNoData();
+                CoverageUtilities.setROIProperty(sourceProps, newROI);
+                CoverageUtilities.setNoDataProperty(sourceProps, newNoData);
             }
         }
-        final RenderedOp targetImage = getJAI(hints).createNS(operation, paramBlk, targetHints);
+        final RenderedOp targetImage = w.getRenderedOperation();//getJAI(hints).createNS(operation, paramBlk, targetHints);
         for (Map.Entry<String, Object> entry : imageProperties.entrySet()) {
             targetImage.setProperty(entry.getKey(), entry.getValue());
         }
@@ -483,7 +515,7 @@ public static GridCoverage2D reproject(GridCoverage2D            sourceCoverage,
          *     is "Warp" with "Nearest" interpolation on geophysics pixels values. Background
          *     value is 255.
          */
-        targetCoverage = create(sourceCoverage, targetImage, targetGG, operation, warp, hints);
+        targetCoverage = create(sourceCoverage, targetImage, targetGG, operation, warp, hints, sourceProps);
         assert CRS.equalsIgnoreMetadata(targetCoverage.getCoordinateReferenceSystem(), targetCRS) : targetGG;
         assert targetCoverage.getGridGeometry().getGridRange2D().equals(targetImage.getBounds())  : targetGG;
         if (CoverageProcessor.LOGGER.isLoggable(LOGGING_LEVEL)) {
