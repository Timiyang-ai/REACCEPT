diff --git a/old_test.java b/new_test.java
index bc9eaf4..cf920bc 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,9 +2,9 @@
     public void testBuild() throws Exception {
         final DrlParser parser = new DrlParser(LanguageLevelOption.DRL5);
 
-        final PackageBuilder pkgBuilder = new PackageBuilder();
-        pkgBuilder.addPackage( new PackageDescr( "org.drools" ) );
-        Package pkg = pkgBuilder.getPackage();
+        final KnowledgeBuilderImpl kBuilder = new KnowledgeBuilderImpl();
+        kBuilder.addPackage(new PackageDescr("org.drools"));
+        InternalKnowledgePackage pkg = kBuilder.getPackage();
 
         final PackageDescr pkgDescr = parser.parse( new InputStreamReader( getClass().getResourceAsStream( "nestedConditionalElements.drl" ) ) );
 
@@ -12,20 +12,20 @@
         assertFalse( parser.getErrors().toString(),
                             parser.hasErrors() );
         
-        pkg.addGlobal( "results", List.class );
+        pkg.addGlobal("results", List.class);
 
         final RuleDescr ruleDescr = pkgDescr.getRules().get( 0 );
         final String ruleClassName = "RuleClassName.java";
         ruleDescr.setClassName( ruleClassName );
-        ruleDescr.addAttribute( new AttributeDescr( "dialect",
-                                                    "java" ) );
+        ruleDescr.addAttribute(new AttributeDescr("dialect",
+                                                  "java"));
         
-        pkgBuilder.addPackage( pkgDescr );
+        kBuilder.addPackage(pkgDescr);
 
-        assertTrue( pkgBuilder.getErrors().toString(),
-                    pkgBuilder.getErrors().isEmpty() );
+        assertTrue(kBuilder.getErrors().toString(),
+                   kBuilder.getErrors().isEmpty());
 
-        final Rule rule = pkgBuilder.getPackage().getRule( "test nested CEs" );
+        final RuleImpl rule = kBuilder.getPackage().getRule( "test nested CEs" );
 
         assertEquals( "There should be 2 rule level declarations",
                       2,
