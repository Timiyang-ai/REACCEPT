diff --git a/old_test.java b/new_test.java
index c24345f..70049aa 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,46 +1,46 @@
 @Test
-    public void testGetUsagePerApp() throws Exception {
+    public void testGetUsagePerClient() throws Exception {
         ESMetricsAccessor metrics = new ESMetricsAccessor();
         metrics.setEsClient(client);
 
         // data exists - all data for JBossOverlord/s-ramp-api:1.0
-        UsagePerAppBean usagePerApp = metrics.getUsagePerApp("JBossOverlord", "s-ramp-api", "1.0",
+        UsagePerClientBean usagePerClient = metrics.getUsagePerClient("JBossOverlord", "s-ramp-api", "1.0",
                 parseDate("2015-01-01"), new DateTime().withZone(DateTimeZone.UTC));
-        Assert.assertNotNull(usagePerApp);
+        Assert.assertNotNull(usagePerClient);
         Map<String, Long> expectedData = new HashMap<>();
         expectedData.put("dtgov", 29L);
         expectedData.put("rtgov", 14L);
-        Assert.assertEquals(expectedData, usagePerApp.getData());
+        Assert.assertEquals(expectedData, usagePerClient.getData());
 
         // data exists - all data for Test/echo:1.0
-        usagePerApp = metrics.getUsagePerApp("Test", "echo", "1.0",
+        usagePerClient = metrics.getUsagePerClient("Test", "echo", "1.0",
                 parseDate("2015-01-01"), new DateTime().withZone(DateTimeZone.UTC));
-        Assert.assertNotNull(usagePerApp);
+        Assert.assertNotNull(usagePerClient);
         expectedData.clear();
-        expectedData.put("my-app", 136L);
-        expectedData.put("app1", 78L);
-        Assert.assertEquals(expectedData, usagePerApp.getData());
+        expectedData.put("my-client", 136L);
+        expectedData.put("client1", 78L);
+        Assert.assertEquals(expectedData, usagePerClient.getData());
 
         // Test/echo:1.0 bounded by a different date range
-        usagePerApp = metrics.getUsagePerApp("Test", "echo", "1.0",
+        usagePerClient = metrics.getUsagePerClient("Test", "echo", "1.0",
                 parseDate("2015-06-18"), new DateTime().withZone(DateTimeZone.UTC));
-        Assert.assertNotNull(usagePerApp);
+        Assert.assertNotNull(usagePerClient);
         expectedData.clear();
-        Assert.assertEquals(expectedData, usagePerApp.getData());
+        Assert.assertEquals(expectedData, usagePerClient.getData());
 
         // data exists - all data for Test/echo:1.0
-        usagePerApp = metrics.getUsagePerApp("Test", "echo", "1.0",
+        usagePerClient = metrics.getUsagePerClient("Test", "echo", "1.0",
                 parseDate("2015-06-01"),
                 parseDate("2015-06-17"));
-        Assert.assertNotNull(usagePerApp);
+        Assert.assertNotNull(usagePerClient);
         expectedData.clear();
-        expectedData.put("my-app", 136L);
-        expectedData.put("app1", 78L);
-        Assert.assertEquals(expectedData, usagePerApp.getData());
+        expectedData.put("my-client", 136L);
+        expectedData.put("client1", 78L);
+        Assert.assertEquals(expectedData, usagePerClient.getData());
 
         // No data for API
-        usagePerApp = metrics.getUsagePerApp("NA", "NA", "NA", parseDate("2015-01-01"), new DateTime().withZone(DateTimeZone.UTC));
-        Assert.assertNotNull(usagePerApp);
+        usagePerClient = metrics.getUsagePerClient("NA", "NA", "NA", parseDate("2015-01-01"), new DateTime().withZone(DateTimeZone.UTC));
+        Assert.assertNotNull(usagePerClient);
         expectedData.clear();
-        Assert.assertEquals(expectedData, usagePerApp.getData());
+        Assert.assertEquals(expectedData, usagePerClient.getData());
     }
\ No newline at end of file
