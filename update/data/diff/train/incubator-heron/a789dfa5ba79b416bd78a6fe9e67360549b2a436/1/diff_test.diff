diff --git a/old_test.java b/new_test.java
index 43b5b6c..29a0a91 100644
--- a/old_test.java
+++ b/new_test.java
@@ -13,9 +13,9 @@
     Mockito.doReturn(connection).when(client).createHttpConnection(Mockito.any(Command.class));
 
     // Failed to send http post request
-    PowerMockito.spy(HttpUtils.class);
+    PowerMockito.spy(NetworkUtils.class);
     PowerMockito.doReturn(false).
-        when(HttpUtils.class, "sendHttpPostRequest",
+        when(NetworkUtils.class, "sendHttpPostRequest",
             Mockito.eq(connection), Mockito.any(byte[].class));
     Assert.assertFalse(
         client.requestSchedulerService(
@@ -24,11 +24,11 @@
 
     // Received non-ok response
     PowerMockito.doReturn(true).
-        when(HttpUtils.class, "sendHttpPostRequest",
+        when(NetworkUtils.class, "sendHttpPostRequest",
             Mockito.eq(connection), Mockito.any(byte[].class));
     Scheduler.SchedulerResponse notOKResponse = SchedulerUtils.constructSchedulerResponse(false);
     PowerMockito.doReturn(notOKResponse.toByteArray()).
-        when(HttpUtils.class, "readHttpResponse", Mockito.eq(connection));
+        when(NetworkUtils.class, "readHttpResponse", Mockito.eq(connection));
     Assert.assertFalse(
         client.requestSchedulerService(
             Mockito.any(Command.class), Mockito.any(byte[].class)));
@@ -37,7 +37,7 @@
     // Received ok response -- success case
     Scheduler.SchedulerResponse oKResponse = SchedulerUtils.constructSchedulerResponse(true);
     PowerMockito.doReturn(oKResponse.toByteArray()).
-        when(HttpUtils.class, "readHttpResponse", Mockito.eq(connection));
+        when(NetworkUtils.class, "readHttpResponse", Mockito.eq(connection));
     Assert.assertTrue(
         client.requestSchedulerService(
             Mockito.any(Command.class), Mockito.any(byte[].class)));
