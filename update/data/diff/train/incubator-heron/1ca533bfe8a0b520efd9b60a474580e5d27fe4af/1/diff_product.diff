diff --git a/old_product.java b/new_product.java
index ef9dda3..fa98566 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,39 +1,18 @@
-public boolean killTopology() {
+protected boolean killTopology() {
 
     // Setup connection
     String deploymentURI = String.format(
-        "%s/api/v1/namespaces/default/pods?labelSelector=topology%%3D%s",
-        this.kubernetesURI,
+        "%s?labelSelector=topology%%3D%s",
+        this.baseUriPath,
         this.topologyName);
 
-    LOG.log(Level.INFO, deploymentURI);
-    HttpURLConnection conn = NetworkUtils.getHttpConnection(deploymentURI);
-    if (conn == null) {
-      LOG.log(Level.SEVERE, "Failed to find k8s deployment API");
-      return false;
-    }
-
+    // send the delete request to the scheduler
+    HttpJsonClient jsonAPIClient = new HttpJsonClient(deploymentURI);
     try {
-      if (!NetworkUtils.sendHttpDeleteRequest(conn)) {
-        LOG.log(Level.SEVERE, "Failed to send delete request to k8s deployment API");
-        return false;
-      }
-
-      // check response
-      boolean success = NetworkUtils.checkHttpResponseCode(conn, HttpURLConnection.HTTP_OK);
-
-      if (success) {
-        LOG.log(Level.SEVERE, "Successfully killed topology deployments");
-        return true;
-      } else {
-        LOG.log(Level.SEVERE, "Failure to delete topology deployments");
-        return false;
-      }
-
-    } finally {
-      // Disconnect to release resources
-      conn.disconnect();
+      jsonAPIClient.delete(HttpURLConnection.HTTP_OK);
+    } catch (IOException ioe) {
+      LOG.log(Level.SEVERE, "Problem sending delete request: " + deploymentURI, ioe);
+      return false;
     }
-
-
+    return true;
   }
\ No newline at end of file
