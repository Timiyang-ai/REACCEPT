diff --git a/old_test.java b/new_test.java
index 00f0ed0..f6d01f1 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,87 +1,16 @@
 @Test
   public void testSubmitTopology() throws Exception {
-    HttpURLConnection httpURLConnection = Mockito.mock(HttpURLConnection.class);
-    final String[] appConf = {"{pod1: conf}", "{pod2: conf}"};
 
-    // Failed to get connection
-    PowerMockito.spy(NetworkUtils.class);
-    PowerMockito.doReturn(null).when(NetworkUtils.class, "getHttpConnection", Mockito.anyString());
-    Assert.assertFalse(controller.submitTopology(appConf));
-    PowerMockito.verifyStatic();
-    NetworkUtils.getHttpConnection(Mockito.anyString());
+    HttpJsonClient httpJsonClient = PowerMockito.spy(new HttpJsonClient(""));
+    PowerMockito.whenNew(HttpJsonClient.class).withAnyArguments().thenReturn(httpJsonClient);
 
-    // Failed to send request
-    PowerMockito.spy(NetworkUtils.class);
-    PowerMockito.doReturn(httpURLConnection)
-        .when(NetworkUtils.class, "getHttpConnection", Mockito.anyString());
-    PowerMockito.doReturn(false)
-        .when(NetworkUtils.class, "sendHttpPostRequest",
-            Mockito.any(HttpURLConnection.class),
-            Mockito.anyString(),
-            Mockito.any(byte[].class));
-    Assert.assertFalse(controller.submitTopology(appConf));
-    PowerMockito.verifyStatic();
-    NetworkUtils.getHttpConnection(Mockito.anyString());
-    NetworkUtils.sendHttpPostRequest(
-        Mockito.any(HttpURLConnection.class),
-        Mockito.anyString(),
-        Mockito.any(byte[].class));
+    // Test a bad POST
+    PowerMockito.doThrow(new IOException()).when(httpJsonClient).post(Mockito.anyString(),
+        Mockito.anyInt());
+    Assert.assertFalse(controller.submitTopology(DEPLOY_CONFS));
 
-    // Failed to get response
-    PowerMockito.spy(NetworkUtils.class);
-    PowerMockito.doReturn(httpURLConnection)
-        .when(NetworkUtils.class, "getHttpConnection", Mockito.anyString());
-    PowerMockito.doReturn(true)
-        .when(NetworkUtils.class, "sendHttpPostRequest",
-            Mockito.any(HttpURLConnection.class),
-            Mockito.anyString(),
-            Mockito.any(byte[].class));
-    PowerMockito.doReturn(false)
-        .when(NetworkUtils.class, "checkHttpResponseCode",
-            Mockito.any(HttpURLConnection.class), Mockito.anyInt());
-    Assert.assertFalse(controller.submitTopology(appConf));
-    PowerMockito.verifyStatic();
-    NetworkUtils.getHttpConnection(Mockito.anyString());
-    NetworkUtils.sendHttpPostRequest(
-        Mockito.any(HttpURLConnection.class),
-        Mockito.anyString(),
-        Mockito.any(byte[].class));
-    NetworkUtils.checkHttpResponseCode(Mockito.any(HttpURLConnection.class), Mockito.anyInt());
+    // Test a good path
+    PowerMockito.doNothing().when(httpJsonClient).post(Mockito.anyString(), Mockito.anyInt());
+    Assert.assertTrue(controller.submitTopology(DEPLOY_CONFS));
 
-    // Success
-    PowerMockito.spy(NetworkUtils.class);
-    PowerMockito.doReturn(httpURLConnection)
-        .when(NetworkUtils.class, "getHttpConnection", Mockito.anyString());
-    PowerMockito.doReturn(true)
-        .when(NetworkUtils.class, "sendHttpPostRequest",
-            Mockito.any(HttpURLConnection.class),
-            Mockito.anyString(),
-            Mockito.any(byte[].class));
-    PowerMockito.doReturn(true)
-        .when(NetworkUtils.class, "checkHttpResponseCode",
-            Mockito.any(HttpURLConnection.class), Mockito.anyInt());
-
-    // Sample app conf with 2 pods -- verify it ran twice
-    PowerMockito.spy(NetworkUtils.class);
-    PowerMockito.doReturn(httpURLConnection)
-        .when(NetworkUtils.class, "getHttpConnection", Mockito.anyString());
-    PowerMockito.doReturn(true)
-        .when(NetworkUtils.class, "sendHttpPostRequest",
-            Mockito.any(HttpURLConnection.class),
-            Mockito.anyString(),
-            Mockito.any(byte[].class));
-    PowerMockito.doReturn(true)
-        .when(NetworkUtils.class, "checkHttpResponseCode",
-            Mockito.any(HttpURLConnection.class), Mockito.anyInt());
-
-    Assert.assertTrue(controller.submitTopology(appConf));
-
-    // Verify 2 times
-    PowerMockito.verifyStatic(times(2));
-    NetworkUtils.getHttpConnection(Mockito.anyString());
-    NetworkUtils.sendHttpPostRequest(
-        Mockito.any(HttpURLConnection.class),
-        Mockito.anyString(),
-        Mockito.any(byte[].class));
-    NetworkUtils.checkHttpResponseCode(Mockito.any(HttpURLConnection.class), Mockito.anyInt());
   }
\ No newline at end of file
