diff --git a/old_product.java b/new_product.java
index 97409b7..7f647d4 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,23 +1,19 @@
 public static List<ProcessedGradeItem> processImportedGrades(final ImportedGradeWrapper importedGradeWrapper,
 			final List<Assignment> assignments, final List<GbStudentGradeInfo> currentGrades) {
 
-		//setup
-		final List<ProcessedGradeItem> processedGradeItems = new ArrayList<>();
-		final Map<String, Assignment> assignmentNameMap = new HashMap<>();
+		// setup
+		// TODO this will ensure dupes can't be added. Provide a report to the user that dupes were added. There would need to be a step before this though
 		final Map<String, ProcessedGradeItem> assignmentProcessedGradeItemMap = new HashMap<>();
 
 		// process grades
 		final Map<Long, AssignmentStudentGradeInfo> transformedGradeMap = transformCurrentGrades(currentGrades);
 
-
-		// Map the assignment name back to the Id
-		for (final Assignment assignment : assignments) {
-			assignmentNameMap.put(assignment.getName(), assignment);
-		}
+		// Map assignment name to assignment
+		final Map<String, Assignment> assignmentNameMap = assignments.stream().collect(Collectors.toMap(Assignment::getName, a -> a));
 
 		//for every column, setup the data
 		for (final ImportColumn column : importedGradeWrapper.getColumns()) {
-			boolean needsAdded = false;
+			boolean needsToBeAdded = false;
 
 			final String columnTitle = StringUtils.trim(column.getColumnTitle()); // trim whitespace so we can match properly
 
@@ -25,7 +21,7 @@ public static List<ProcessedGradeItem> processImportedGrades(final ImportedGrade
 			ProcessedGradeItem processedGradeItem = assignmentProcessedGradeItemMap.get(columnTitle);
 			if (processedGradeItem == null) {
 				processedGradeItem = new ProcessedGradeItem();
-				needsAdded = true;
+				needsToBeAdded = true;
 
 				//default to gb_item
 				//overridden if a comment type
@@ -80,12 +76,15 @@ public static List<ProcessedGradeItem> processImportedGrades(final ImportedGrade
 			}
 			processedGradeItem.setProcessedGradeItemDetails(processedGradeItemDetails);
 
-			if (needsAdded) {
-				processedGradeItems.add(processedGradeItem);
+			// add to list
+			if (needsToBeAdded) {
 				assignmentProcessedGradeItemMap.put(columnTitle, processedGradeItem);
 			}
 		}
 
+		// get just a list
+		final List<ProcessedGradeItem> processedGradeItems = new ArrayList<>(assignmentProcessedGradeItemMap.values());
+
 		// comment columns must have an associated gb item column
 		// this ensures we have a processed grade item for each one
 		final List<ProcessedGradeItem> commentColumns = processedGradeItems.stream().filter(p -> p.getType() == ProcessedGradeItem.Type.COMMENT).collect(Collectors.toList());
