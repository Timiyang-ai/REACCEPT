diff --git a/old_product.java b/new_product.java
index 5d4c5e4..7ebd762 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,29 +1,27 @@
 private InputStream convertDocument(final File document, final String mediaType,
-			final ConversionTarget conversionTarget) {
+      final ConversionTarget conversionTarget) {
 
-		if (document == null || !document.exists())
-			throw new IllegalArgumentException("document cannot be null and must exist");
+    if (document == null || !document.exists())
+      throw new IllegalArgumentException("document cannot be null and must exist");
 
-		String type = mediaType != null ? mediaType : ConversionUtils.getMediaTypeFromFile(document);
-		if (type == null)
-			throw new RuntimeException("mediaType cannot be null or empty");
-		else if (!ConversionUtils.isValidMediaType(type))
-			throw new IllegalArgumentException("file with the given media type is not supported");
+    final String type =
+        mediaType != null ? mediaType : ConversionUtils.getMediaTypeFromFile(document);
+    if (type == null)
+      throw new RuntimeException("mediaType cannot be null or empty");
+    else if (!ConversionUtils.isValidMediaType(type))
+      throw new IllegalArgumentException("file with the given media type is not supported");
 
-		try {
-			MultipartEntity reqEntity = new MultipartEntity();
-			reqEntity.addPart(FILE, new FileBody(document, type));
-			JsonObject configJson = new JsonObject();
-			configJson.addProperty(CONVERSION_TARGET, conversionTarget.toString());
-			String json = configJson.toString();
-			reqEntity.addPart(CONFIG, new StringBody(json, MediaType.APPLICATION_JSON, Charset.forName("UTF-8")));
+    final JsonObject configJson = new JsonObject();
+    configJson.addProperty(CONVERSION_TARGET, conversionTarget.toString());
 
-			HttpRequestBase request = Request.Post(CONVERT_DOCUMENT_PATH).withEntity(reqEntity).build();
+    final RequestBody body =
+        new MultipartBuilder()
+            .addFormDataPart(CONFIG, configJson.toString())
+            .addFormDataPart(FILE, document.getName(),
+                RequestBody.create(MediaType.parse(type), document)).build();
 
-			HttpResponse response = execute(request);
-			InputStream is = ResponseUtil.getInputStream(response);
-			return is;
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-	}
\ No newline at end of file
+    final Request request = RequestBuilder.post(CONVERT_DOCUMENT_PATH).withBody(body).build();
+
+    final Response response = execute(request);
+    return ResponseUtil.getInputStream(response);
+  }
\ No newline at end of file
