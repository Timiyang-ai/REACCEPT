diff --git a/old_test.java b/new_test.java
index a029151..da209c0 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,28 +1,32 @@
 @Test
-	public void testRecognize() throws URISyntaxException {
+  public void testRecognize() throws URISyntaxException {
 
-		SpeechResults speechResults = new SpeechResults();
-		speechResults.setResultIndex(0);
-		Transcript transcript = new Transcript();
-		transcript.setFinal(true);
-		final SpeechAlternative speechAlternative = new SpeechAlternative();
-		speechAlternative.setTranscript("thunderstorms could produce large hail isolated tornadoes and heavy rain");
-		List<SpeechAlternative> speechAlternatives = new ArrayList<SpeechAlternative>();
-		speechAlternatives.add(speechAlternative);
-		
-		transcript.setAlternatives(speechAlternatives);
-		List<Transcript> transcripts = new ArrayList<Transcript>();
-		transcripts.add(transcript);
-		speechResults.setResults(transcripts);
+    final SpeechResults speechResults = new SpeechResults();
+    speechResults.setResultIndex(0);
+    final Transcript transcript = new Transcript();
+    transcript.setFinal(true);
+    final SpeechAlternative speechAlternative = new SpeechAlternative();
+    speechAlternative
+        .setTranscript("thunderstorms could produce large hail isolated tornadoes and heavy rain");
+    final List<SpeechAlternative> speechAlternatives = new ArrayList<SpeechAlternative>();
+    speechAlternatives.add(speechAlternative);
 
-		File audio = new File("src/test/resources/sample1.wav");
+    transcript.setAlternatives(speechAlternatives);
+    final List<Transcript> transcripts = new ArrayList<Transcript>();
+    transcripts.add(transcript);
+    speechResults.setResults(transcripts);
 
-		mockServer.when(request().withMethod("POST").withPath(RECOGNIZE_PATH).withHeaders(new Header(HttpHeaders.Names.CONTENT_TYPE, "audio/l16; rate=44100")))
+    final File audio = new File("src/test/resources/sample1.wav");
 
-				.respond(
-						response().withHeaders(new Header(HttpHeaders.Names.CONTENT_TYPE, MediaType.APPLICATION_JSON))
-								.withBody(GsonSingleton.getGson().toJson(speechResults)));
-		SpeechResults result = service.recognize(audio, "audio/l16; rate=44100");
-		Assert.assertNotNull(result);
-		Assert.assertEquals(result,speechResults);
-	}
\ No newline at end of file
+    mockServer.when(
+        request().withMethod("POST").withPath(RECOGNIZE_PATH)
+            .withHeaders(new Header(HttpHeaders.Names.CONTENT_TYPE, "audio/l16; rate=44100")))
+
+    .respond(
+        response().withHeaders(
+            new Header(HttpHeaders.Names.CONTENT_TYPE, HttpMediaType.APPLICATION_JSON)).withBody(
+            GsonSingleton.getGson().toJson(speechResults)));
+    final SpeechResults result = service.recognize(audio, "audio/l16; rate=44100");
+    Assert.assertNotNull(result);
+    Assert.assertEquals(result, speechResults);
+  }
\ No newline at end of file
