diff --git a/old_test.java b/new_test.java
index afa2935..10a2d1c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,18 +1,18 @@
 @Test
-	public void createClassifier() throws Exception {
-        Classifier createdClassifier = new Classifier();
-        createdClassifier.setId("testId2");
-        createdClassifier.setStatus(Classifier.Status.AVAILABLE);
-        createdClassifier.setUrl("http://gateway.watson.net/");
-        
-    	 mockServer.when(request().withMethod("POST").withPath(CLASSIFIERS_PATH))
-                 .respond(
-                         response().withHeaders(new Header(HttpHeaders.Names.CONTENT_TYPE, MediaType.APPLICATION_JSON))
-                                 .withBody(createdClassifier.toString()));
+  public void createClassifier() throws Exception {
+    final Classifier createdClassifier = new Classifier();
+    createdClassifier.setId("testId2");
+    createdClassifier.setStatus(Classifier.Status.AVAILABLE);
+    createdClassifier.setUrl("http://gateway.watson.net/");
 
-    	 List<TrainingData> training = new ArrayList<TrainingData>();
-    	 training.add(new TrainingData().withText("text1").withClasses("k1"));
-         Classifier classifier = service.createClassifier(null, null, training);
+    mockServer.when(request().withMethod("POST").withPath(CLASSIFIERS_PATH)).respond(
+        response().withHeaders(
+            new Header(HttpHeaders.Names.CONTENT_TYPE, HttpMediaType.APPLICATION_JSON)).withBody(
+            createdClassifier.toString()));
 
-         assertEquals(createdClassifier.toString(), classifier.toString());
-	}
\ No newline at end of file
+    final List<TrainingData> training = new ArrayList<TrainingData>();
+    training.add(new TrainingData().withText("text1").withClasses("k1"));
+    final Classifier classifier = service.createClassifier(null, null, training);
+
+    assertEquals(createdClassifier.toString(), classifier.toString());
+  }
\ No newline at end of file
