diff --git a/old_test.java b/new_test.java
index 5c3e07a..116705e 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,45 +1,42 @@
 @Test
-    public void testClassify() {
+  public void testClassify() {
 
-        Classification response = new Classification();
-        response.setId("testId");
-        response.setText("is it sunny?");
-        response.setUrl("http://www.ibm.com");
-        response.setTopClass("class2");
+    final Classification response = new Classification();
+    response.setId("testId");
+    response.setText("is it sunny?");
+    response.setUrl("http://www.ibm.com");
+    response.setTopClass("class2");
 
-        List<ClassifiedClass> classes = new ArrayList<ClassifiedClass>();
-        ClassifiedClass c1 = new ClassifiedClass();
-        c1.setConfidence(0.98189);
-        c1.setName("class1");
+    final List<ClassifiedClass> classes = new ArrayList<ClassifiedClass>();
+    final ClassifiedClass c1 = new ClassifiedClass();
+    c1.setConfidence(0.98189);
+    c1.setName("class1");
 
-        ClassifiedClass c2 = new ClassifiedClass();
-        c2.setConfidence(0.98188);
-        c2.setName("class2");
-        classes.add(c1);
-        classes.add(c2);
+    final ClassifiedClass c2 = new ClassifiedClass();
+    c2.setConfidence(0.98188);
+    c2.setName("class2");
+    classes.add(c1);
+    classes.add(c2);
 
-        response.setClasses(classes);
+    response.setClasses(classes);
 
-        StringBuilder text = new StringBuilder().append("is it sunny?");
+    final StringBuilder text = new StringBuilder().append("is it sunny?");
 
-        JsonObject contentJson = new JsonObject();
-        contentJson.addProperty("text", text.toString());
-        String path = String
-                .format(CLASSIFY_PATH, classifierId);
+    final JsonObject contentJson = new JsonObject();
+    contentJson.addProperty("text", text.toString());
+    final String path = String.format(CLASSIFY_PATH, classifierId);
 
-        mockServer.when(
-                request().withMethod("POST").withPath(path)
-                        .withBody(contentJson.toString())
+    mockServer.when(request().withMethod("POST").withPath(path).withBody(contentJson.toString())
 
-        )
-                .respond(
-                        response().withHeaders(new Header(HttpHeaders.Names.CONTENT_TYPE, MediaType.APPLICATION_JSON))
-                                .withBody(GsonSingleton.getGson().toJson(response)));
+    ).respond(
+        response().withHeaders(
+            new Header(HttpHeaders.Names.CONTENT_TYPE, HttpMediaType.APPLICATION_JSON)).withBody(
+            GsonSingleton.getGson().toJson(response)));
 
-        Classification c = service.classify(classifierId, text.toString());
+    final Classification c = service.classify(classifierId, text.toString());
 
-        assertNotNull(service.toString());
-        assertNotNull(c);
-        assertEquals(c, response);
+    assertNotNull(service.toString());
+    assertNotNull(c);
+    assertEquals(c, response);
 
-    }
\ No newline at end of file
+  }
\ No newline at end of file
