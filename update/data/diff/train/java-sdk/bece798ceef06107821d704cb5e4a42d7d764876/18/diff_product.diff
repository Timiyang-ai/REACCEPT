diff --git a/old_product.java b/new_product.java
index bb252b1..0ad64c8 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,22 +1,18 @@
 public Dialog createDialog(final String name, final File dialogFile) {
-		if (name == null || name.isEmpty())
-			throw new IllegalArgumentException("name can not be null or empty");
+    if (name == null || name.isEmpty())
+      throw new IllegalArgumentException("name cannot be null or empty");
 
-		if (dialogFile == null || !dialogFile.exists())
-			throw new IllegalArgumentException(
-					"dialogFile can not be null or empty");
+    if (dialogFile == null || !dialogFile.exists())
+      throw new IllegalArgumentException("dialogFile cannot be null or empty");
 
-		try {
-			MultipartEntity reqEntity = new MultipartEntity();
-			reqEntity.addPart("file", new FileBody(dialogFile));
-			reqEntity.addPart("name", new StringBody(name,Charset.forName("UTF-8")));
+    final RequestBody body =
+        new MultipartBuilder()
+            .type(MultipartBuilder.FORM)
+            .addFormDataPart(FILE, dialogFile.getName(),
+                RequestBody.create(HttpMediaType.BINARY_FILE, dialogFile))
+            .addFormDataPart(NAME, name).build();
 
-			HttpRequestBase request = Request.Post("/v1/dialogs")
-					.withEntity(reqEntity).build();
+    final Request request = RequestBuilder.post(PATH_DIALOGS).withBody(body).build();
 
-			HttpResponse response = execute(request);
-			return ResponseUtil.getObject(response, Dialog.class);
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-	}
\ No newline at end of file
+    return executeRequest(request, Dialog.class);
+  }
\ No newline at end of file
