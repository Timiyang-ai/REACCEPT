diff --git a/old_product.java b/new_product.java
index c289afd..b903e0e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,29 +1,21 @@
 public Job createJob(final String label, final String[] seeds) {
-		if (dataset == null)
-			throw new IllegalArgumentException("dataset can not be null or empty");
-		if (label == null)
-			throw new IllegalArgumentException("label can not be null or empty");
-		if (seeds == null || seeds.length == 0)
-			throw new IllegalArgumentException("seeds can not be null or empty");
+    if (dataset == null)
+      throw new IllegalArgumentException("dataset cannot be null or empty");
+    if (label == null)
+      throw new IllegalArgumentException("label cannot be null or empty");
+    if (seeds == null || seeds.length == 0)
+      throw new IllegalArgumentException("seeds cannot be null or empty");
 
-		try {
-			JsonArray seedJsonArray = new JsonArray();
-			for (String seed : seeds) {
-				seedJsonArray.add(new JsonPrimitive(seed));
-			}
+    final JsonArray seedJsonArray = new JsonArray();
+    for (final String seed : seeds) {
+      seedJsonArray.add(new JsonPrimitive(seed));
+    }
 
-			JsonObject payload = new JsonObject();
-			payload.addProperty(LABEL, label);
-			payload.addProperty(DATASET, dataset.getId());
-			payload.add(SEEDS,seedJsonArray);
+    final JsonObject payload = new JsonObject();
+    payload.addProperty(LABEL, label);
+    payload.addProperty(DATASET, dataset.getId());
+    payload.add(SEEDS, seedJsonArray);
 
-			HttpRequestBase request = Request.Post("/v1/upload")
-					.withContent(payload).build();
-
-			HttpResponse response = execute(request);
-			String jsonJob = ResponseUtil.getString(response);
-			return GsonSingleton.getGson().fromJson(jsonJob,Job.class);
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-	}
\ No newline at end of file
+    final Request request = RequestBuilder.post("/v1/upload").withBodyJson(payload).build();
+    return executeRequest(request, Job.class);
+  }
\ No newline at end of file
