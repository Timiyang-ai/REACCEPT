diff --git a/old_product.java b/new_product.java
index 8256af1..2bd2547 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,33 +1,34 @@
-public Concepts getGraphsRelatedConcepts(String graphName, List<String> concepts, String conceptName, RequestedFields conceptFields, int level, int limit) {
-        //TODO: we may need to divide this into 2 methods
-        Validate.notNull(graphName, "graphName can't be null");
-        if (concepts == null && conceptName == null)
-            throw new MissingFormatArgumentException("conceptName or concepts should be identified");
+public Concepts getGraphsRelatedConcepts(final Graph graph, final Map<String, Object> parameters) {
+		String graphId = IDValidator.getGraphId(graph, getAccountId());
+		// TODO: we may need to divide this into 2 methods
+		if (parameters.get(CONCEPTS) == null && parameters.get(CONCEPT) == null)
+			throw new MissingFormatArgumentException("concept or concepts should be identified");
 
-        Graph graph = new Graph(getAccountId(), graphName);
-        Map<String, Object> queryParameters = new HashMap<String, Object>();
-        if (level >= 0) {
-            queryParameters.put(LEVEL, level);
-        }
-        if (limit >= 0) {
-            queryParameters.put(LIMIT, limit);
-        }
-        if (conceptFields != null) {
-            if (conceptFields != null && conceptFields.getFields() != null && !conceptFields.getFields().isEmpty())
-                queryParameters.put(CONCEPT_FIELDS, conceptFields);
-        }
-        if (concepts != null) {
-            JsonObject contentJson = new JsonObject();
-            JsonArray conceptsJson = new JsonArray();
-            for (String value : concepts) {
-                conceptsJson.add(new JsonPrimitive(value));
-            }
-            contentJson.add(CONCEPTS, conceptsJson);
-            queryParameters.put(CONCEPTS, conceptsJson.toString());
-
-            return executeRequest(version + graph.getId() + RELATED_CONCEPTS_PATH, queryParameters, Concepts.class);
-        } else {
-            Concept concept = new Concept(graph, conceptName);
-            return executeRequest(version + concept.getId() + RELATED_CONCEPTS_PATH, queryParameters, Concepts.class);
-        }
-    }
\ No newline at end of file
+		Map<String, Object> queryParameters = new HashMap<String, Object>();
+		String[] queryParms = new String[] { LEVEL, LIMIT };
+		for (String param : queryParms) {
+			if (parameters.containsKey(param))
+				queryParameters.put(param, parameters.get(param));
+		}
+		if (parameters.get(CONCEPT_FIELDS) != null) {
+			RequestedFields fields = (RequestedFields) parameters.get(CONCEPT_FIELDS);
+			if (fields != null && !fields.isEmpty())
+				queryParameters.put(CONCEPT_FIELDS, fields.toString());
+		}
+		if (parameters.get(CONCEPTS) != null) {
+			JsonObject contentJson = new JsonObject();
+			JsonArray conceptsJson = new JsonArray();
+			@SuppressWarnings("unchecked")
+			List<String> concepts = (List<String>) parameters.get(CONCEPTS);
+			for (String value : concepts) {
+				conceptsJson.add(new JsonPrimitive(value));
+			}
+			contentJson.add(CONCEPTS, conceptsJson);
+			queryParameters.put(CONCEPTS, conceptsJson.toString());
+			return executeRequest(API_VERSION + graphId + RELATED_CONCEPTS_PATH, queryParameters, Concepts.class);
+		} else {
+			Concept concept = new Concept(graph, (String) parameters.get(CONCEPT));
+			return executeRequest(API_VERSION + concept.getId() + RELATED_CONCEPTS_PATH + RELATED_CONCEPTS_PATH,
+					queryParameters, Concepts.class);
+		}
+	}
\ No newline at end of file
