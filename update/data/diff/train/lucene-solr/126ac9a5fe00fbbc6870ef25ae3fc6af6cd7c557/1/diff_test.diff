diff --git a/old_test.java b/new_test.java
index a2ef327..7a8fe41 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,7 +3,23 @@
     BytesRefBuilder ref = new BytesRefBuilder();
     int num = atLeast(2);
     for (int j = 0; j < num; j++) {
-      SortedSet<String> strings = new TreeSet<>();
+
+      // Sorts by unicode code point order (is there a simple way, e.g. a Collator?)
+      SortedSet<String> strings = new TreeSet<>(new Comparator<String>() {
+          @Override
+          public int compare(String a, String b) {
+            int[] aCodePoints = codePoints(a);
+            int[] bCodePoints = codePoints(b);
+            for(int i=0;i<Math.min(aCodePoints.length, bCodePoints.length);i++) {
+              if (aCodePoints[i] < bCodePoints[i]) {
+                return -1;
+              } else if (aCodePoints[i] > bCodePoints[i]) {
+                return 1;
+              }
+            }
+            return aCodePoints.length - bCodePoints.length;
+          }
+        });
       for (int i = 0; i < 797; i++) {
         String str;
         do {
@@ -13,9 +29,7 @@
         hash.add(ref.get());
         strings.add(str);
       }
-      // We use the UTF-16 comparator here, because we need to be able to
-      // compare to native String.compareTo() [UTF-16]:
-      int[] sort = hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());
+      int[] sort = hash.sort();
       assertTrue(strings.size() < sort.length);
       int i = 0;
       BytesRef scratch = new BytesRef();
