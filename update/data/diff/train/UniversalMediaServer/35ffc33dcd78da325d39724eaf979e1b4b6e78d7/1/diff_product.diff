diff --git a/old_product.java b/new_product.java
index 0199f14..028c9d6 100644
--- a/old_product.java
+++ b/new_product.java
@@ -3,6 +3,7 @@ public static String getFileNameWithRewriting(String f, File file) {
 		String formattedName;
 		String formattedNameTemp;
 		String searchFormattedName;
+		String edition = "";
 		boolean loopedOnce = false;
 
 		// These are false unless we recognize that we could use some info on the video from IMDB
@@ -16,9 +17,9 @@ public static String getFileNameWithRewriting(String f, File file) {
 
 		String commonFileEnds = "[\\s\\.]AC3.*|[\\s\\.]REPACK.*|[\\s\\.]480p.*|[\\s\\.]720p.*|[\\s\\.]m-720p.*|[\\s\\.]900p.*|[\\s\\.]1080p.*|[\\s\\.]2160p.*|[\\s\\.]WEB-DL.*|[\\s\\.]HDTV.*|[\\s\\.]DSR.*|[\\s\\.]PDTV.*|[\\s\\.]WS.*|[\\s\\.]HQ.*|[\\s\\.]DVDRip.*|[\\s\\.]TVRiP.*|[\\s\\.]BDRip.*|[\\s\\.]BRRip.*|[\\s\\.]WEBRip.*|[\\s\\.]BluRay.*|[\\s\\.]Blu-ray.*|[\\s\\.]SUBBED.*|[\\s\\.]x264.*|[\\s\\.]Dual[\\s\\.]Audio.*|[\\s\\.]HSBS.*|[\\s\\.]H-SBS.*|[\\s\\.]RERiP.*|[\\s\\.]DIRFIX.*|[\\s\\.]READNFO.*|[\\s\\.]60FPS.*";
 		String commonFileEndsMatch = ".*[\\s\\.]AC3.*|.*[\\s\\.]REPACK.*|.*[\\s\\.]480p.*|.*[\\s\\.]720p.*|.*[\\s\\.]m-720p.*|.*[\\s\\.]900p.*|.*[\\s\\.]1080p.*|.*[\\s\\.]2160p.*|.*[\\s\\.]WEB-DL.*|.*[\\s\\.]HDTV.*|.*[\\s\\.]DSR.*|.*[\\s\\.]PDTV.*|.*[\\s\\.]WS.*|.*[\\s\\.]HQ.*|.*[\\s\\.]DVDRip.*|.*[\\s\\.]TVRiP.*|.*[\\s\\.]BDRip.*|.*[\\s\\.]BRRip.*|.*[\\s\\.]WEBRip.*|.*[\\s\\.]BluRay.*|.*[\\s\\.]Blu-ray.*|.*[\\s\\.]SUBBED.*|.*[\\s\\.]x264.*|.*[\\s\\.]Dual[\\s\\.]Audio.*|.*[\\s\\.]HSBS.*|.*[\\s\\.]H-SBS.*|.*[\\s\\.]RERiP.*|.*[\\s\\.]DIRFIX.*|.*[\\s\\.]READNFO.*|.*[\\s\\.]60FPS.*";
-		String commonFileEndsCaseSensitive = "[\\s\\.]PROPER[\\s\\.].*|[\\s\\.]iNTERNAL[\\s\\.].*|[\\s\\.]LIMITED[\\s\\.].*|[\\s\\.]LiMiTED[\\s\\.].*|[\\s\\.]FESTiVAL[\\s\\.].*|[\\s\\.]NORDIC[\\s\\.].*|[\\s\\.]REAL[\\s\\.].*|[\\s\\.]SUBBED[\\s\\.].*|[\\s\\.]RETAIL[\\s\\.].*|[\\s\\.]EXTENDED[\\s\\.].*";
+		String commonFileEndsCaseSensitive = "[\\s\\.]PROPER[\\s\\.].*|[\\s\\.]iNTERNAL[\\s\\.].*|[\\s\\.]LIMITED[\\s\\.].*|[\\s\\.]LiMiTED[\\s\\.].*|[\\s\\.]FESTiVAL[\\s\\.].*|[\\s\\.]NORDIC[\\s\\.].*|[\\s\\.]REAL[\\s\\.].*|[\\s\\.]SUBBED[\\s\\.].*|[\\s\\.]RETAIL[\\s\\.].*|[\\s\\.]EXTENDED[\\s\\.].*|[\\s\\.]NEWEDIT[\\s\\.].*";
 
-		String commonFileMiddle = "(?i)(?!\\()(Special[\\s\\.]Edition|Unrated|Final[\\s\\.]Cut|Remastered|Extended[\\s\\.]Cut|IMAX[\\s\\.]Edition|Uncensored|Directors[\\s\\.]Cut)(?!\\))";
+		String commonFileMiddle = "(?i)(?!\\()(Special[\\s\\.]Edition|Unrated|Final[\\s\\.]Cut|Remastered|Extended[\\s\\.]Cut|IMAX[\\s\\.]Edition|Uncensored|Directors[\\s\\.]Cut|Uncut)(?!\\))";
 
 		if (formattedName.matches(".*[sS]0\\d[eE]\\d\\d[eE]\\d\\d.*")) {
 			// This matches scene and most p2p TV episodes within the first 9 seasons that are double or triple episodes
@@ -28,16 +29,22 @@ public static String getFileNameWithRewriting(String f, File file) {
 			formattedName = formattedName.replaceAll("(?i)[\\s\\.]S0(\\d)E(\\d)(\\d)E(\\d)(\\d)(" + commonFileEnds + ")", " - $1$2$3-$1$4$5");
 			formattedName = formattedName.replaceAll("[\\s\\.]S0(\\d)E(\\d)(\\d)E(\\d)(\\d)(" + commonFileEndsCaseSensitive + ")", " - $1$2$3-$1$4$5");
 
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = " (" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
+
 			// If it matches this then it didn't match the previous one, which means there is probably an episode title in the filename
 			formattedNameTemp = formattedName.replaceAll("(?i)[\\s\\.]S0(\\d)E(\\d)(\\d)E(\\d)(\\d)[\\s\\.]", " - $1$2$3-$1$4$5 - ");
-
 			if (PMS.getConfiguration().isUseInfoFromIMDB() && formattedName.equals(formattedNameTemp)) {
 				isEpisodeToLookup = true;
 			}
-
-			// Wrap edition information in brackets
-			formattedName = formattedNameTemp.replaceAll(" - " + commonFileMiddle, " ($1)");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			formattedName = formattedNameTemp;
 
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
@@ -66,16 +73,22 @@ public static String getFileNameWithRewriting(String f, File file) {
 			formattedName = formattedName.replaceAll("(?i)[\\s\\.]S([1-9]\\d)E(\\d)(\\d)E(\\d)(\\d)(" + commonFileEnds + ")", " - $1$2$3-$1$4$5");
 			formattedName = formattedName.replaceAll("[\\s\\.]S([1-9]\\d)E(\\d)(\\d)E(\\d)(\\d)(" + commonFileEndsCaseSensitive + ")", " - $1$2$3-$1$4$5");
 
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
+
 			// If it matches this then it didn't match the previous one, which means there is probably an episode title in the filename
 			formattedNameTemp = formattedName.replaceAll("(?i)[\\s\\.]S([1-9]\\d)E(\\d)(\\d)E(\\d)(\\d)[\\s\\.]", " - $1$2$3-$1$4$5 - ");
-
 			if (PMS.getConfiguration().isUseInfoFromIMDB() && formattedName.equals(formattedNameTemp)) {
 				isEpisodeToLookup = true;
 			}
-
-			// Wrap edition information in brackets
-			formattedName = formattedNameTemp.replaceAll(" - " + commonFileMiddle, " ($1)");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			formattedName = formattedNameTemp;
 
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
@@ -100,6 +113,16 @@ public static String getFileNameWithRewriting(String f, File file) {
 		} else if (formattedName.matches(".*[sS]0\\d[eE]\\d\\d.*")) {
 			// This matches scene and most p2p TV episodes within the first 9 seasons
 
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
+
 			// Rename the season/episode numbers. For example, "S01E01" changes to " - 101"
 			// Then strip the end of the episode if it does not have the episode name in the title
 			formattedName = formattedName.replaceAll("(?i)[\\s\\.]S0(\\d)E(\\d)(\\d)(" + commonFileEnds + ")", " - $1$2$3");
@@ -107,14 +130,10 @@ public static String getFileNameWithRewriting(String f, File file) {
 
 			// If it matches this then it didn't match the previous one, which means there is probably an episode title in the filename
 			formattedNameTemp = formattedName.replaceAll("(?i)[\\s\\.]S0(\\d)E(\\d)(\\d)[\\s\\.]", " - $1$2$3 - ");
-
 			if (PMS.getConfiguration().isUseInfoFromIMDB() && formattedName.equals(formattedNameTemp)) {
 				isEpisodeToLookup = true;
 			}
-
-			// Wrap edition information in brackets
-			formattedName = formattedNameTemp.replaceAll(" - " + commonFileMiddle, " ($1)");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			formattedName = formattedNameTemp;
 
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
@@ -143,16 +162,22 @@ public static String getFileNameWithRewriting(String f, File file) {
 			formattedName = formattedName.replaceAll("(?i)[\\s\\.]S([1-9]\\d)E(\\d)(\\d)(" + commonFileEnds + ")", " - $1$2$3");
 			formattedName = formattedName.replaceAll("[\\s\\.]S([1-9]\\d)E(\\d)(\\d)(" + commonFileEndsCaseSensitive + ")", " - $1$2$3");
 
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
+
 			// If it matches this then it didn't match the previous one, which means there is probably an episode title in the filename
 			formattedNameTemp = formattedName.replaceAll("(?i)[\\s\\.]S([1-9]\\d)E(\\d)(\\d)[\\s\\.]", " - $1$2$3 - ");
-
 			if (PMS.getConfiguration().isUseInfoFromIMDB() && formattedName.equals(formattedNameTemp)) {
 				isEpisodeToLookup = true;
 			}
-
-			// Wrap edition information in brackets
-			formattedName = formattedNameTemp.replaceAll(" - " + commonFileMiddle, " ($1)");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			formattedName = formattedNameTemp;
 
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
@@ -181,16 +206,22 @@ public static String getFileNameWithRewriting(String f, File file) {
 			formattedName = formattedName.replaceAll("(?i)[\\s\\.](19|20)(\\d\\d)[\\s\\.]([0-1]\\d)[\\s\\.]([0-3]\\d)(" + commonFileEnds + ")", " - $1$2/$3/$4");
 			formattedName = formattedName.replaceAll("[\\s\\.](19|20)(\\d\\d)[\\s\\.]([0-1]\\d)[\\s\\.]([0-3]\\d)(" + commonFileEndsCaseSensitive + ")", " - $1$2/$3/$4");
 
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
+
 			// If it matches this then it didn't match the previous one, which means there is probably an episode title in the filename
 			formattedNameTemp = formattedName.replaceAll("(?i)[\\s\\.](19|20)(\\d\\d)[\\s\\.]([0-1]\\d)[\\s\\.]([0-3]\\d)[\\s\\.]", " - $1$2/$3/$4 - ");
-
 			if (PMS.getConfiguration().isUseInfoFromIMDB() && formattedName.equals(formattedNameTemp)) {
 				isEpisodeToLookup = true;
 			}
-
-			// Wrap edition information in brackets
-			formattedName = formattedNameTemp.replaceAll(" - " + commonFileMiddle, " ($1)");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			formattedName = formattedNameTemp;
 
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
@@ -222,7 +253,15 @@ public static String getFileNameWithRewriting(String f, File file) {
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
 			formattedName = formattedName.replaceAll("(?i)" + commonFileEnds, "");
 
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
@@ -273,7 +312,16 @@ public static String getFileNameWithRewriting(String f, File file) {
 			// Remove stuff at the end of the filename like release group, quality, source, etc.
 			formattedName = formattedName.replaceAll(commonFileEndsCaseSensitive, "");
 			formattedName = formattedName.replaceAll("(?i)" + commonFileEnds, "");
-			formattedName = formattedName.replaceAll(commonFileMiddle, "($1)");
+
+			// Remove and save edition information to be added later
+			Pattern r = Pattern.compile(commonFileMiddle);
+			Matcher m = r.matcher(formattedName);
+			if (m.find()) {
+				edition = m.group().replaceAll("\\.", " ");
+				edition = "(" + WordUtils.capitalizeFully(edition) + ")";
+				formattedName = formattedName.replaceAll(" - " + commonFileMiddle, "");
+				formattedName = formattedName.replaceAll(commonFileMiddle, "");
+			}
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
@@ -352,6 +400,9 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 		}
 
+		// Remove extra spaces
+		formattedName = formattedName.replaceAll("  ", " ");
+
 		// Add episode name (if not there)
 		if (file != null && (isEpisodeToLookup || isMovieToLookup)) {
 			InfoDb.InfoDbData info = PMS.get().infoDb().get(file);
@@ -364,5 +415,15 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 		}
 
+		// Add the edition information if it exists
+		if (!edition.isEmpty()) {
+			formattedName = formattedName.trim();
+			String substr = formattedName.substring(Math.max(0, formattedName.length() - 2));
+			if (" -".equals(substr)) {
+				formattedName = formattedName.substring(0, formattedName.length() - 2);
+			}
+			formattedName += " " + edition;
+		}
+
 		return formattedName;
 	}
\ No newline at end of file
