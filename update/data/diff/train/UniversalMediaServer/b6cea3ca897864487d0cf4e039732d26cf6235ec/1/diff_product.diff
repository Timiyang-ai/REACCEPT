diff --git a/old_product.java b/new_product.java
index 1aa871e..733dd3a 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,4 @@
-public static String getFileNameWithRewriting(String f, File file) {
+public static String getFileNamePrettified(String f, File file) {
 		String fileNameWithoutExtension;
 		formattedName = "";
 		String formattedNameTemp;
@@ -31,12 +31,12 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 
 			formattedName = formattedNameTemp;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter(loopedOnce);
+			convertFormattedNameToTitleCase(loopedOnce);
 		} else if (formattedName.matches(".*[sS][1-9]\\d[eE]\\d\\d[eE]\\d\\d.*")) {
 			// This matches scene and most p2p TV episodes after their first 9 seasons that are double episodes
 
@@ -52,12 +52,12 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 
 			formattedName = formattedNameTemp;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter(loopedOnce);
+			convertFormattedNameToTitleCase(loopedOnce);
 		} else if (formattedName.matches(".*[sS]0\\d[eE]\\d\\d.*")) {
 			// This matches scene and most p2p TV episodes within the first 9 seasons
 			removeAndSaveEditionToBeAddedLater();
@@ -74,12 +74,12 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 
 			formattedName = formattedNameTemp;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter(loopedOnce);
+			convertFormattedNameToTitleCase(loopedOnce);
 		} else if (formattedName.matches(".*[sS][1-9]\\d[eE]\\d\\d.*")) {
 			// This matches scene and most p2p TV episodes after their first 9 seasons
 
@@ -95,12 +95,12 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 
 			formattedName = formattedNameTemp;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter(loopedOnce);
+			convertFormattedNameToTitleCase(loopedOnce);
 		} else if (formattedName.matches(".*[\\s\\.](19|20)\\d\\d[\\s\\.][0-1]\\d[\\s\\.][0-3]\\d[\\s\\.].*")) {
 			// This matches scene and most p2p TV episodes that release several times per week
 
@@ -116,24 +116,24 @@ public static String getFileNameWithRewriting(String f, File file) {
 			}
 
 			formattedName = formattedNameTemp;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter(loopedOnce);
+			convertFormattedNameToTitleCase(loopedOnce);
 		} else if (formattedName.matches(".*[\\s\\.](19|20)\\d\\d[\\s\\.].*")) {
 			// This matches scene and most p2p movies
 
 			// Rename the year. For example, "2013" changes to " (2013)"
 			formattedName = formattedName.replaceAll("[\\s\\.](19|20)(\\d\\d)", " ($1$2)");
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 			removeAndSaveEditionToBeAddedLater();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter();
+			convertFormattedNameToTitleCase();
 		} else if (formattedName.matches(".*\\[(19|20)\\d\\d\\].*")) {
 			// This matches rarer types of movies
 
@@ -143,21 +143,21 @@ public static String getFileNameWithRewriting(String f, File file) {
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter();
+			convertFormattedNameToTitleCase();
 		} else if (formattedName.matches(".*\\((19|20)\\d\\d\\).*")) {
 			// This matches rarer types of movies
-			removeStuffAtTheEndOfFilename();
-			capitalizeFirstLetter();
+			removeFilenameEndMetadata();
+			convertFormattedNameToTitleCase();
 		} else if (formattedName.matches(commonFileEndsMatch)) {
 			// This is probably a movie that doesn't specify a year
 			isMovieToLookup = true;
-			removeStuffAtTheEndOfFilename();
+			removeFilenameEndMetadata();
 			removeAndSaveEditionToBeAddedLater();
 
 			// Replace periods with spaces
 			formattedName = formattedName.replaceAll("\\.", " ");
 
-			capitalizeFirstLetter();
+			convertFormattedNameToTitleCase();
 		} else if (formattedName.matches(".*\\[[0-9a-zA-Z]{8}\\]$")) {
 			// This matches anime with a hash at the end of the name
 
@@ -173,7 +173,7 @@ public static String getFileNameWithRewriting(String f, File file) {
 				searchFormattedName = formattedName.substring(0, formattedName.length() - 2) + "S01E" + formattedName.substring(formattedName.length() - 2);
 			}
 
-			capitalizeFirstLetter();
+			convertFormattedNameToTitleCase();
 		} else if (formattedName.matches(".*\\[BD\\].*|.*\\[720p\\].*|.*\\[1080p\\].*|.*\\[480p\\].*|.*\\[Blu-Ray.*|.*\\[h264.*")) {
 			// This matches anime without a hash in the name
 
@@ -189,7 +189,7 @@ public static String getFileNameWithRewriting(String f, File file) {
 				searchFormattedName = formattedName.substring(0, formattedName.length() - 2) + "S01E" + formattedName.substring(formattedName.length() - 2);
 			}
 
-			capitalizeFirstLetter();
+			convertFormattedNameToTitleCase();
 		}
 
 		// Remove extra spaces
