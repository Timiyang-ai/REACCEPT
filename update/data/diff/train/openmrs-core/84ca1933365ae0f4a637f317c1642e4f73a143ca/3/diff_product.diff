diff --git a/old_product.java b/new_product.java
index 6d590a3..4a02069 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,33 +1,22 @@
 @Override
 	public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,
 	        String[] propertyNames, Type[] types) throws CallbackException {
+		boolean objectWasChanged = false;
+		
+		objectWasChanged = setCreatorAndDateCreatedIfNull(entity, currentState, propertyNames);
 		
 		if (entity instanceof Auditable && propertyNames != null) {
 			if (log.isDebugEnabled())
 				log.debug("Setting changed by fields on " + entity);
 			
-			// the return value
-			boolean objectWasChanged = false;
-			
-			// loop over the properties and only change the changedBy and dateChanged fields
-			Date currentDate = new Date();
-			
-			User authenticatedUser = Context.getAuthenticatedUser();
-			for (int x = 0; x < propertyNames.length; x++) {
-				if (propertyNames[x].equals("changedBy") && previousState != null && previousState[x] != authenticatedUser) {
-					currentState[x] = authenticatedUser;
-					objectWasChanged = true;
-				} else if (propertyNames[x].equals("dateChanged") && previousState != null
-				        && previousState[x] != currentDate) {
-					currentState[x] = currentDate;
-					objectWasChanged = true;
-				}
+			if (setValue(currentState, propertyNames, "changedBy", Context.getAuthenticatedUser(), false)) {
+				objectWasChanged = true;
 			}
 			
-			// tell hibernate that we've changed this object
-			return objectWasChanged;
+			if (setValue(currentState, propertyNames, "dateChanged", new Date(), false)) {
+				objectWasChanged = true;
+			}
 		}
 		
-		// if we get here it means we didn't change anything
-		return false;
+		return objectWasChanged;
 	}
\ No newline at end of file
