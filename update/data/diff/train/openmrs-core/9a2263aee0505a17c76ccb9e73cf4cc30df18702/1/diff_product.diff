diff --git a/old_product.java b/new_product.java
index 4591dc7..7941097 100644
--- a/old_product.java
+++ b/new_product.java
@@ -22,20 +22,20 @@ public void validate(Object obj, Errors errors) {
 				//Set to store to keep track of unique valid state and start date combinations
 				Set<String> statesAndStartDates = new HashSet<String>();
 				PatientState latestState = null;
-				Set<Date> uniqueStartDates = new HashSet<Date>();
 				boolean foundCurrentPatientState = false;
 				for (PatientState patientState : patientStates) {
 					if (patientState.isVoided())
 						continue;
 					
 					String missingRequiredFieldCode = null;
-					if (patientState.getStartDate() == null)
+					//only the intial state can have a null start date
+					if (patientState.getStartDate() == null && !patientState.getState().getInitial())
 						missingRequiredFieldCode = "general.dateStart";
 					else if (patientState.getState() == null)
 						missingRequiredFieldCode = "State.state";
 					
 					if (missingRequiredFieldCode != null) {
-						errors.reject("PatientState.error.requiredField", new Object[] { mss
+						errors.rejectValue("states", "PatientState.error.requiredField", new Object[] { mss
 						        .getMessage(missingRequiredFieldCode) }, null);
 						return;
 					}
@@ -50,7 +50,8 @@ public void validate(Object obj, Errors errors) {
 					}
 					
 					if (!isValidPatientState) {
-						errors.reject("PatientState.error.invalidPatientState", new Object[] { patientState }, null);
+						errors.rejectValue("states", "PatientState.error.invalidPatientState",
+						    new Object[] { patientState }, null);
 						return;
 					}
 					
@@ -59,12 +60,12 @@ public void validate(Object obj, Errors errors) {
 						continue;
 					
 					if (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {
-						errors.reject("PatientState.error.endDateCannotBeBeforeStartDate");
+						errors.rejectValue("states", "PatientState.error.endDateCannotBeBeforeStartDate");
 						return;
 					} else if (statesAndStartDates.contains(patientState.getState().getId() + ""
 					        + patientState.getStartDate())) {
 						// we already have a patient state with the same work flow state and start date
-						errors.reject("PatientState.error.duplicatePatientStates");
+						errors.rejectValue("states", "PatientState.error.duplicatePatientStates");
 						return;
 					}
 					
@@ -72,25 +73,22 @@ public void validate(Object obj, Errors errors) {
 					if (!foundCurrentPatientState && patientState.getEndDate() == null)
 						foundCurrentPatientState = true;
 					else if (foundCurrentPatientState && patientState.getEndDate() == null) {
-						errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+						errors.rejectValue("states", "PatientProgram.error.cannotBeInMultipleStates");
 						return;
 					}
 					
 					if (latestState == null)
 						latestState = patientState;
 					else {
-						if (OpenmrsUtil.compare(patientState.getStartDate(), latestState.getStartDate()) == 0
-						        || uniqueStartDates.contains(patientState.getStartDate())) {
-							errors.reject("PatientProgram.error.foundStatesWithSameStartDates");
-							return;
-						} else if (patientState.compareTo(latestState) > 0) {
+						if (patientState.compareTo(latestState) > 0) {
 							//patient should have already left this state since it is older
 							if (latestState.getEndDate() == null) {
-								errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+								errors.rejectValue("states", "PatientProgram.error.cannotBeInMultipleStates");
 								return;
-							} else if (OpenmrsUtil.compare(patientState.getStartDate(), latestState.getEndDate()) < 0) {
+							} else if (OpenmrsUtil.compareWithNullAsEarliest(patientState.getStartDate(), latestState
+							        .getEndDate()) < 0) {
 								//current state was started before a previous state was ended
-								errors.reject("PatientProgram.error.foundOverlappingStates", new Object[] {
+								errors.rejectValue("states", "PatientProgram.error.foundOverlappingStates", new Object[] {
 								        patientState.getStartDate(), latestState.getEndDate() }, null);
 								return;
 							}
@@ -98,17 +96,17 @@ public void validate(Object obj, Errors errors) {
 						} else if (patientState.compareTo(latestState) < 0) {
 							//patient should have already left this state since it is older
 							if (patientState.getEndDate() == null) {
-								errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+								errors.rejectValue("states", "PatientProgram.error.cannotBeInMultipleStates");
 								return;
-							} else if (OpenmrsUtil.compare(latestState.getStartDate(), patientState.getEndDate()) < 0) {
+							} else if (OpenmrsUtil.compareWithNullAsEarliest(latestState.getStartDate(), patientState
+							        .getEndDate()) < 0) {
 								//latest state was started before a previous state was ended
-								errors.reject("PatientProgram.error.foundOverlappingStates");
+								errors.rejectValue("states", "PatientProgram.error.foundOverlappingStates");
 								return;
 							}
 						}
 					}
 					
-					uniqueStartDates.add(patientState.getStartDate());
 					statesAndStartDates.add(patientState.getState().getId() + "" + patientState.getStartDate());
 				}
 			}
