diff --git a/old_product.java b/new_product.java
index ea5c7c0..9e41be0 100644
--- a/old_product.java
+++ b/new_product.java
@@ -8,36 +8,15 @@ public List<Object> findBatchOfConcepts(String phrase, boolean includeRetired, L
 		
 		// TODO add localization for messages
 		
-		User currentUser = Context.getAuthenticatedUser();
-		
 		Locale defaultLocale = Context.getLocale();
 		
-		// get the list of locales to search on from the user's
-		// defined proficient locales (if applicable)
-		List<Locale> localesToSearchOn = null;
-		if (currentUser != null)
-			localesToSearchOn = currentUser.getProficientLocales();
-		
-		if (localesToSearchOn == null)
-			// we're working with an anonymous user right now or
-			// with a user that has not defined any proficient locales
-			localesToSearchOn = new Vector<Locale>();
-		
-		// add the user's locale
-		if (localesToSearchOn.size() == 0) {
-			localesToSearchOn.add(defaultLocale);
-			
-			// if country is specified, also add the generic language locale
-			if (!"".equals(defaultLocale.getCountry())) {
-				localesToSearchOn.add(new Locale(defaultLocale.getLanguage()));
-			}
-			
-		}
+		// get the list of locales to search on
+		List<Locale> searchLocales = Context.getAdministrationService().getSearchLocales();
 		
 		// debugging output
 		if (log.isDebugEnabled()) {
 			StringBuffer searchLocalesString = new StringBuffer();
-			for (Locale loc : localesToSearchOn) {
+			for (Locale loc : searchLocales) {
 				searchLocalesString.append(loc.toString() + " ");
 			}
 			log.debug("searching locales: " + searchLocalesString);
@@ -106,8 +85,8 @@ public List<Object> findBatchOfConcepts(String phrase, boolean includeRetired, L
 						excludeDatatypes.add(cs.getConceptDatatypeByName(name));
 				
 				// perform the search
-				searchResults.addAll(cs.getConcepts(phrase, localesToSearchOn, includeRetired, includeClasses,
-				    excludeClasses, includeDatatypes, excludeDatatypes, null, start, length));
+				searchResults.addAll(cs.getConcepts(phrase, searchLocales, includeRetired, includeClasses, excludeClasses,
+				    includeDatatypes, excludeDatatypes, null, start, length));
 				
 				//TODO Should we still include drugs, if yes, smartly harmonize the paging between the two different DB tables
 				//look ups to match the values of start and length not to go over the value of count of matches returned to the search widget
@@ -118,10 +97,8 @@ public List<Object> findBatchOfConcepts(String phrase, boolean includeRetired, L
 			}
 			
 			if (searchResults.size() < 1) {
-				objectList.add(Context.getMessageSourceService()
-				        .getMessage("general.noMatchesFoundInLocale",
-				            new Object[] { "<b>" + phrase + "</b>", OpenmrsUtil.join(localesToSearchOn, ", ") },
-				            Context.getLocale()));
+				objectList.add(Context.getMessageSourceService().getMessage("general.noMatchesFoundInLocale",
+				    new Object[] { "<b>" + phrase + "</b>", OpenmrsUtil.join(searchLocales, ", ") }, Context.getLocale()));
 			} else {
 				// turn searchResults into concept list items
 				// if user wants drug concepts included, append those
