diff --git a/old_product.java b/new_product.java
index 869ac36..4b46b97 100644
--- a/old_product.java
+++ b/new_product.java
@@ -140,21 +140,23 @@ public void validate(Object obj, Errors errors) throws APIException, DuplicateCo
 					    "The concept reference term property is required for a concept map");
 					return;
 				} else if (map.getConceptReferenceTerm().getConceptReferenceTermId() == null) {
-					//Should pick from existing terms
-					errors.rejectValue("conceptMappings[" + index + "].conceptReferenceTerm",
-					    "ConceptReferenceTerm.term.notInDatabase", "Only existing concept reference terms can be mapped");
-					return;
-				} else if (map.getConceptMapType() == null) {
+					//if this term is getting created on the fly e.g. from old legacy code, validate it
+					try {
+						errors.pushNestedPath("conceptMappings[" + index + "].conceptReferenceTerm");
+						ValidationUtils.invokeValidator(new ConceptReferenceTermValidator(), map.getConceptReferenceTerm(),
+						    errors);
+					}
+					finally {
+						errors.popNestedPath();
+					}
+					
+				}
+				/*if (map.getConceptMapType() == null) {
 					errors.rejectValue("conceptMappings[" + index + "].conceptMapType", "Concept.map.typeRequired",
 					    "The concept map type is required for a concept map");
 					return;
-				} else if (map.getConceptMapType().getConceptMapTypeId() == null) {
-					//Should pick from existing map types
-					errors.rejectValue("conceptMappings[" + index + "].conceptMapType",
-					    "ConceptReferenceTerm.mapType.notInDatabase", "Only existing concept map types can be used");
-					return;
-				}
-				
+				}*/
+
 				//don't proceed to the next maps since the current one already has errors
 				if (errors.hasErrors())
 					return;
