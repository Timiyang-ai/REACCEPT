diff --git a/old_test.java b/new_test.java
index f045fe4..4878e77 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,17 +1,23 @@
 @Test
-	@Verifies(value = "should fail if the start date for any patient state is null and is not the first", method = "validate(Object,Errors)")
-	public void validate_shouldFailIfTheStartDateForAnyPatientStateIsNullAndIsNotTheFirst() throws Exception {
-		PatientProgram program = Context.getProgramWorkflowService().getPatientProgram(1);
-		PatientState firstState = program.getStates().iterator().next();
+	@Verifies(value = "should fail if there is more than one state with a null start date in the same workflow", method = "validate(Object,Errors)")
+	public void validate_shouldFailIfThereIsMoreThanOneStateWithANullStartDateInTheSameWorkflow() throws Exception {
+		ProgramWorkflowService pws = Context.getProgramWorkflowService();
+		Patient patient = Context.getPatientService().getPatient(6);
+		PatientProgram pp = new PatientProgram();
+		pp.setPatient(patient);
+		pp.setProgram(pws.getProgram(1));
+		ProgramWorkflow testWorkflow = pp.getProgram().getWorkflow(1);
 		
-		//Add a state that comes after patientState1 with a null date
-		PatientState newPatientState = new PatientState();
-		//set the state to be that of the current state 
-		newPatientState.setState(firstState.getState().getProgramWorkflow().getState(4));
-		Assert.assertNotSame(firstState.getState(), newPatientState.getState());//sanity check
-		program.getStates().add(newPatientState);
+		//Add 2 other patient states with null start date
+		PatientState newPatientState1 = new PatientState();
+		newPatientState1.setState(testWorkflow.getState(1));
+		pp.getStates().add(newPatientState1);
 		
-		BindException errors = new BindException(program, "");
-		new PatientProgramValidator().validate(program, errors);
+		PatientState newPatientState2 = new PatientState();
+		newPatientState2.setState(testWorkflow.getState(2));
+		pp.getStates().add(newPatientState2);
+		
+		BindException errors = new BindException(pp, "");
+		new PatientProgramValidator().validate(pp, errors);
 		Assert.assertEquals(true, errors.hasFieldErrors("states"));
 	}
\ No newline at end of file
