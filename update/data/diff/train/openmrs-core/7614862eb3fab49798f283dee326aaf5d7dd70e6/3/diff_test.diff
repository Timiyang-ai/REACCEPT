diff --git a/old_test.java b/new_test.java
index d4420e5..fb1ac2e 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,18 +1,13 @@
 @Test
-	@Verifies(value = "getBestShortName should not return voided conceptName, should return non-voided concept in other locale even if not short", method = "getBestShortName(Locale)")
-	public void getBestShortName_shouldReturnNonVoidedConceptName() throws Exception {
-		Locale localeToSearch = new Locale("en");
-		Locale nonMatchingNameLocale = new Locale("fr");
+	@Verifies(value = "should replace the old short name with a current one", method = "addName(ConceptName)")
+	public void addName_shouldReplaceTheOldShortNameWithACurrentOne() throws Exception {
 		Concept concept = new Concept();
-		
-		ConceptName conceptName = new ConceptName("some name", localeToSearch);
-		conceptName.setVoided(true);
-		concept.setShortName(localeToSearch, conceptName);
-		
-		ConceptName conceptNameOther = new ConceptName("some other name", nonMatchingNameLocale);
-		concept.addName(conceptNameOther);
-		
-		ConceptName cn = concept.getBestShortName(localeToSearch);
-		Assert.assertEquals(cn.getLocale(), nonMatchingNameLocale);
-		Assert.assertEquals(cn.getName(), "some other name");
+		ConceptName oldShortName = new ConceptName("some name", Context.getLocale());
+		oldShortName.setConceptNameType(ConceptNameType.SHORT);
+		concept.addName(oldShortName);
+		ConceptName newShortName = new ConceptName("new name", Context.getLocale());
+		newShortName.setConceptNameType(ConceptNameType.SHORT);
+		concept.addName(newShortName);
+		Assert.assertEquals(false, oldShortName.isShort());
+		Assert.assertEquals("new name", concept.getShortNameInLocale(Context.getLocale()).getName());
 	}
\ No newline at end of file
