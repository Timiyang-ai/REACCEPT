diff --git a/old_product.java b/new_product.java
index ccd9de0..af32e35 100644
--- a/old_product.java
+++ b/new_product.java
@@ -4,43 +4,114 @@ public void validate(Object obj, Errors errors) {
 		
 		if (obj == null)
 			throw new IllegalArgumentException("The parameter obj should not be null");
+		MessageSourceService mss = Context.getMessageSourceService();
+		PatientProgram patientProgram = (PatientProgram) obj;
+		ValidationUtils.rejectIfEmpty(errors, "patient", "error.required",
+		    new Object[] { mss.getMessage("general.patient") });
+		ValidationUtils.rejectIfEmpty(errors, "program", "error.required",
+		    new Object[] { mss.getMessage("Program.program") });
 		
-		PatientProgram program = (PatientProgram) obj;
-		ValidationUtils.rejectIfEmpty(errors, "patient", "error.required", Context.getMessageSourceService().getMessage(
-		    "general.patient"));
+		if (errors.hasErrors())
+			return;
 		
-		Set<PatientState> patientStates = program.getStates();
-		if (patientStates != null) {
-			//map to keep track of valid unique state and start date combinations
-			Map<ProgramWorkflowState, Date> stateStartDateMap = null;
-			//check for duplicate states
-			for (PatientState patientState : patientStates) {
-				if (patientState.isVoided())
-					continue;
-				
-				if (patientState.getStartDate() != null) {
+		Set<ProgramWorkflow> workFlows = patientProgram.getProgram().getWorkflows();
+		//Patient state validation is specific to a work flow
+		for (ProgramWorkflow workFlow : workFlows) {
+			Set<PatientState> patientStates = patientProgram.getStates();
+			if (patientStates != null) {
+				//Set to store to keep track of unique valid state and start date combinations
+				Set<String> statesAndStartDates = new HashSet<String>();
+				PatientState latestState = null;
+				Set<Date> uniqueStartDates = new HashSet<Date>();
+				boolean foundCurrentPatientState = false;
+				for (PatientState patientState : patientStates) {
+					if (patientState.isVoided())
+						continue;
+					
+					String missingRequiredFieldCode = null;
+					if (patientState.getStartDate() == null)
+						missingRequiredFieldCode = "general.dateStart";
+					else if (patientState.getState() == null)
+						missingRequiredFieldCode = "State.state";
+					
+					if (missingRequiredFieldCode != null) {
+						errors.reject("PatientState.error.requiredField", new Object[] { mss
+						        .getMessage(missingRequiredFieldCode) }, null);
+						return;
+					}
+					
+					//state should belong to one of the workflows in the program
+					boolean isValidPatientState = false;
+					for (ProgramWorkflow wf : workFlows) {
+						if (wf.getStates().contains(patientState.getState())) {
+							isValidPatientState = true;
+							break;
+						}
+					}
+					
+					if (!isValidPatientState) {
+						errors.reject("PatientState.error.invalidPatientState", new Object[] { patientState }, null);
+						return;
+					}
+					
+					//will validate it with other states in its workflow
+					if (!patientState.getState().getProgramWorkflow().equals(workFlow))
+						continue;
+					
 					if (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {
 						errors.reject("PatientState.error.endDateCannotBeBeforeEndDate");
 						return;
+					} else if (statesAndStartDates.contains(patientState.getState().getId() + ""
+					        + patientState.getStartDate())) {
+						// we already have a patient state with the same work flow state and start date
+						errors.reject("PatientState.error.duplicatePatientStates");
+						return;
 					}
+					
+					//Ensure that the patient is only in one state at a given time
+					if (!foundCurrentPatientState && patientState.getEndDate() == null)
+						foundCurrentPatientState = true;
+					else if (foundCurrentPatientState && patientState.getEndDate() == null) {
+						errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+						return;
+					}
+					
+					if (latestState == null)
+						latestState = patientState;
+					else {
+						if (OpenmrsUtil.compare(patientState.getStartDate(), latestState.getStartDate()) == 0
+						        || uniqueStartDates.contains(patientState.getStartDate())) {
+							errors.reject("PatientProgram.error.foundStatesWithSameStartDates");
+							return;
+						} else if (patientState.compareTo(latestState) > 0) {
+							//patient should have already left this state since it is older
+							if (latestState.getEndDate() == null) {
+								errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+								return;
+							} else if (OpenmrsUtil.compare(patientState.getStartDate(), latestState.getEndDate()) < 0) {
+								//current state was started before a previous state was ended
+								errors.reject("PatientProgram.error.foundOverlappingStates", new Object[] {
+								        patientState.getStartDate(), latestState.getEndDate() }, null);
+								return;
+							}
+							latestState = patientState;
+						} else if (patientState.compareTo(latestState) < 0) {
+							//patient should have already left this state since it is older
+							if (patientState.getEndDate() == null) {
+								errors.reject("PatientProgram.error.cannotBeInMultipleStates");
+								return;
+							} else if (OpenmrsUtil.compare(latestState.getStartDate(), patientState.getEndDate()) < 0) {
+								//latest state was started before a previous state was ended
+								errors.reject("PatientProgram.error.foundOverlappingStates");
+								return;
+							}
+						}
+					}
+					
+					uniqueStartDates.add(patientState.getStartDate());
+					statesAndStartDates.add(patientState.getState().getId() + "" + patientState.getStartDate());
 				}
-				
-				if (stateStartDateMap == null)
-					stateStartDateMap = new HashMap<ProgramWorkflowState, Date>();
-				
-				//check if we already have a patient state with the same work flow state and start date
-				//note that we can have null start dates, meaning we won't allow multiple patient states with
-				//the same work flow states and null start dates
-				if (stateStartDateMap.containsKey(patientState.getState())
-				        && OpenmrsUtil.nullSafeEquals(stateStartDateMap.get(patientState.getState()), patientState
-				                .getStartDate())) {
-					errors.reject("PatientState.error.duplicatePatientStates");
-					return;
-				}
-				
-				stateStartDateMap.put(patientState.getState(), patientState.getStartDate());
 			}
 		}
-		
-		//TODO validate other fields
+		//
 	}
\ No newline at end of file
