diff --git a/old_test.java b/new_test.java
index 5f21652..005cbf3 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,9 +1,8 @@
 @Test
-	@Verifies(value = "should unvoid the orders and encounters associated with the patient", method = "handle(Patient,User,Date,String)")
-	public void handle_shouldUnvoidTheOrdersAndEncountersAssociatedWithThePatient() throws Exception {
+	public void handle_shouldUnvoidTheOrdersAndEncountersAssociatedWithThePatient() {
 		Patient patient = Context.getPatientService().getPatient(7);
 		patient = Context.getPatientService().voidPatient(patient, "Void Reason");
-		Assert.assertTrue(patient.isVoided());
+		assertTrue(patient.getVoided());
 		
 		EncounterService es = Context.getEncounterService();
 		EncounterSearchCriteria encounterSearchCriteria = new EncounterSearchCriteriaBuilder()
@@ -11,24 +10,24 @@
 			.setIncludeVoided(true)
 			.createEncounterSearchCriteria();
 		List<Encounter> encounters = es.getEncounters(encounterSearchCriteria);
-		Assert.assertTrue(CollectionUtils.isNotEmpty(encounters));
+		assertTrue(CollectionUtils.isNotEmpty(encounters));
 		//all encounters void related fields should be null
 		for (Encounter encounter : encounters) {
-			Assert.assertTrue(encounter.isVoided());
-			Assert.assertNotNull(encounter.getDateVoided());
-			Assert.assertNotNull(encounter.getVoidedBy());
-			Assert.assertNotNull(encounter.getVoidReason());
+			assertTrue(encounter.getVoided());
+			assertNotNull(encounter.getDateVoided());
+			assertNotNull(encounter.getVoidedBy());
+			assertNotNull(encounter.getVoidReason());
 		}
 		
 		OrderService os = Context.getOrderService();
 		List<Order> orders = os.getAllOrdersByPatient(patient);
-		Assert.assertFalse(orders.isEmpty());
+		assertFalse(orders.isEmpty());
 		//all order void related fields should be null
 		for (Order order : orders) {
-			Assert.assertTrue(order.isVoided());
-			Assert.assertNotNull(order.getDateVoided());
-			Assert.assertNotNull(order.getVoidedBy());
-			Assert.assertNotNull(order.getVoidReason());
+			assertTrue(order.getVoided());
+			assertNotNull(order.getDateVoided());
+			assertNotNull(order.getVoidedBy());
+			assertNotNull(order.getVoidReason());
 		}
 		
 		User user = Context.getUserService().getUser(1);
@@ -36,15 +35,15 @@
 		
 		//check that the voided related fields were set null 
 		for (Encounter encounter : encounters) {
-			Assert.assertFalse(encounter.isVoided());
-			Assert.assertNull(encounter.getDateVoided());
-			Assert.assertNull(encounter.getVoidedBy());
-			Assert.assertNull(encounter.getVoidReason());
+			assertFalse(encounter.getVoided());
+			assertNull(encounter.getDateVoided());
+			assertNull(encounter.getVoidedBy());
+			assertNull(encounter.getVoidReason());
 		}
 		for (Order order : orders) {
-			Assert.assertFalse(order.isVoided());
-			Assert.assertNull(order.getDateVoided());
-			Assert.assertNull(order.getVoidedBy());
-			Assert.assertNull(order.getVoidReason());
+			assertFalse(order.getVoided());
+			assertNull(order.getDateVoided());
+			assertNull(order.getVoidedBy());
+			assertNull(order.getVoidReason());
 		}
 	}
\ No newline at end of file
