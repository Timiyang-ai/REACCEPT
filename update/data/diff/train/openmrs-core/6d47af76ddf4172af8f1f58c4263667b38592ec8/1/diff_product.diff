diff --git a/old_product.java b/new_product.java
index 9e8a2ea..6b49116 100644
--- a/old_product.java
+++ b/new_product.java
@@ -8,11 +8,6 @@ public synchronized Order saveOrder(Order order, OrderContext orderContext) thro
 		//Reject if there is an active order for the same orderable
 		boolean isDrugOrder = DrugOrder.class.isAssignableFrom(getActualType(order));
 		Concept concept = order.getConcept();
-		if (concept == null && isDrugOrder) {
-			concept = ((DrugOrder) order).getDrug().getConcept();
-			order.setConcept(concept);
-		}
-		
 		if (!isDiscontinueOrReviseOrder(order)) {
 			List<Order> activeOrders = getActiveOrders(order.getPatient(), null, order.getCareSetting(), null);
 			for (Order o : activeOrders) {
@@ -88,10 +83,10 @@ public synchronized Order saveOrder(Order order, OrderContext orderContext) thro
 				throw new APIException("Cannot change the patient of an order");
 			} else if (!rowData.get(1).equals(previousOrder.getCareSetting().getCareSettingId())) {
 				throw new APIException("Cannot change the careSetting of an order");
-			} else if (!rowData.get(2).equals(previousOrder.getConcept().getConceptId())) {
-				throw new APIException("Cannot change the concept of an order");
 			} else if (isPreviousDrugOrder && !rowData.get(3).equals(((DrugOrder) previousOrder).getDrug().getDrugId())) {
 				throw new APIException("Cannot change the drug of a drug order");
+			} else if (!rowData.get(2).equals(previousOrder.getConcept().getConceptId())) {
+				throw new APIException("Cannot change the concept of an order");
 			}
 			
 			//concept should be the same as on previous order, same applies to drug for drug orders
