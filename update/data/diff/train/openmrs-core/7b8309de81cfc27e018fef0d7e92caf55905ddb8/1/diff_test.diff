diff --git a/old_test.java b/new_test.java
index 71113da..9d610a2 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,20 +2,11 @@
 	@Verifies(value = "should unvoid the orders and encounters associated with the patient", method = "handle(Patient,User,Date,String)")
 	public void handle_shouldUnvoidTheOrdersAndEncountersAssociatedWithThePatient() throws Exception {
 		Patient patient = Context.getPatientService().getPatient(7);
-		OrderService os = Context.getOrderService();
-		List<Patient> patients = new ArrayList<Patient>();
-		patients.add(patient);
-		//should have some un voided orders
-		Assert.assertTrue(CollectionUtils
-		        .isNotEmpty(os.getOrders(Order.class, patients, null, null, null, null, null, null)));
-		
 		patient = Context.getPatientService().voidPatient(patient, "Void Reason");
 		Assert.assertTrue(patient.isVoided());
-		//all orders should have been voided
-		Assert.assertTrue(CollectionUtils.isEmpty(os.getOrders(Order.class, patients, null, null, null, null, null, null)));
 		
 		EncounterService es = Context.getEncounterService();
-		List<Encounter> encounters = es.getEncounters(patient, null, null, null, null, null, null, null, null, true);
+		List<Encounter> encounters = es.getEncounters(patient, null, null, null, null, null, null, true);
 		Assert.assertTrue(CollectionUtils.isNotEmpty(encounters));
 		//all encounters void related fields should be null
 		for (Encounter encounter : encounters) {
@@ -25,6 +16,19 @@
 			Assert.assertNotNull(encounter.getVoidReason());
 		}
 		
+		OrderService os = Context.getOrderService();
+		List<Patient> patients = new ArrayList<Patient>();
+		patients.add(patient);
+		List<Order> orders = os.getOrders(Order.class, patients, null, ORDER_STATUS.ANY, null, null, null);
+		Assert.assertTrue(CollectionUtils.isNotEmpty(orders));
+		//all order void related fields should be null
+		for (Order order : orders) {
+			Assert.assertTrue(order.isVoided());
+			Assert.assertNotNull(order.getDateVoided());
+			Assert.assertNotNull(order.getVoidedBy());
+			Assert.assertNotNull(order.getVoidReason());
+		}
+		
 		User user = Context.getUserService().getUser(1);
 		new PatientDataUnvoidHandler().handle(patient, user, patient.getDateVoided(), null);
 		
@@ -35,8 +39,6 @@
 			Assert.assertNull(encounter.getVoidedBy());
 			Assert.assertNull(encounter.getVoidReason());
 		}
-		
-		List<Order> orders = os.getOrders(Order.class, patients, null, null, null, null, null, null);
 		for (Order order : orders) {
 			Assert.assertFalse(order.isVoided());
 			Assert.assertNull(order.getDateVoided());
