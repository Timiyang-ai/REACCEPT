diff --git a/old_test.java b/new_test.java
index a7721c0..fe57118 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,17 +1,10 @@
-@Transactional(readOnly = true)
-	@Test
-	@Verifies(value = "should get empty form with valid user", method = "formBackingObject(HttpServletRequest)")
-	public void formBackingObject_shouldGetEmptyFormWithValidUser() throws Exception {
-		MockHttpServletRequest request = new MockHttpServletRequest("GET", "");
-		request.setParameter("userId", "1");
-		
-		HttpServletResponse response = new MockHttpServletResponse();
-		
-		UserFormController controller = (UserFormController) applicationContext.getBean("userForm");
-		
-		ModelAndView modelAndView = controller.handleRequest(request, response);
-		
-		// make sure there is a "userId" filled in on the concept
-		User command = (User) modelAndView.getModel().get("user");
-		Assert.assertNotNull(command.getUserId());
-	}
\ No newline at end of file
+@Test
+    @Verifies(value = "should work for an example", method = "handleSubmission(WebRequest,HttpSession,String,String,String,null,User,BindingResult)")
+    public void handleSubmission_shouldWorkForAnExample() throws Exception {
+	    UserFormController controller = new UserFormController();
+	    WebRequest request = new ServletWebRequest(new MockHttpServletRequest());
+	    User user = controller.formBackingObject(request, null);
+	    user.addName(new PersonName("This", "is", "Test"));
+	    user.getPerson().setGender("F");
+	    controller.handleSubmission(request, new MockHttpSession(), new ModelMap(), "Save User", "pass123", "pass123", new String[0], user, new BindException(user, "user"));
+    }
\ No newline at end of file
