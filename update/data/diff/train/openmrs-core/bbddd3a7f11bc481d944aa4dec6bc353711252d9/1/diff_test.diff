diff --git a/old_test.java b/new_test.java
index a99d5eb..0265639 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,6 +1,6 @@
 @Test
-	public void saveOrder_shouldFailForRevisionOrderIfAnActiveOrderForTheSameConceptAndCareSettingExists() throws Exception {
-		//sanity check that we have an active order
+	public void saveOrder_shouldPassForRevisionOrderIfAnActiveTestOrderForTheSameConceptAndCareSettingsExists()
+	        throws Exception {
 		final Patient patient = patientService.getPatient(2);
 		final Concept cd4Count = conceptService.getConcept(5497);
 		TestOrder activeOrder = new TestOrder();
@@ -13,7 +13,7 @@
 		activeOrder.setAutoExpireDate(DateUtils.addDays(new Date(), 10));
 		orderService.saveOrder(activeOrder, null);
 		
-		//New Drug order in future for same concept
+		//New order in future for same concept
 		TestOrder secondOrder = new TestOrder();
 		secondOrder.setPatient(activeOrder.getPatient());
 		secondOrder.setConcept(activeOrder.getConcept());
@@ -25,13 +25,13 @@
 		secondOrder.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);
 		orderService.saveOrder(secondOrder, null);
 		
-		//Revise Second Order to have scheduled date overlapping with active order
+		//Revise second order to have scheduled date overlapping with active order
 		TestOrder revision = secondOrder.cloneForRevision();
 		revision.setScheduledDate(DateUtils.addDays(activeOrder.getEffectiveStartDate(), 2));
 		revision.setEncounter(encounterService.getEncounter(6));
 		revision.setOrderer(providerService.getProvider(1));
 		
-		expectedException.expect(APIException.class);
-		expectedException.expectMessage("Cannot have more than one active order for the same orderable and care setting");
-		orderService.saveOrder(revision, null);
+		Order savedSecondOrder = orderService.saveOrder(revision, null);
+		
+		assertNotNull(orderService.getOrder(savedSecondOrder.getOrderId()));
 	}
\ No newline at end of file
