diff --git a/old_product.java b/new_product.java
index b9e4c24..cbc5ab7 100644
--- a/old_product.java
+++ b/new_product.java
@@ -5,7 +5,6 @@ public synchronized Order saveOrder(Order order, OrderContext orderContext) thro
 		if (order.getDateActivated() == null) {
 			order.setDateActivated(new Date());
 		}
-		//Reject if there is an active order for the same orderable with overlapping schedule
 		boolean isDrugOrder = DrugOrder.class.isAssignableFrom(getActualType(order));
 		Concept concept = order.getConcept();
 		if (concept == null && isDrugOrder) {
@@ -117,11 +116,9 @@ public synchronized Order saveOrder(Order order, OrderContext orderContext) thro
 		if (DISCONTINUE != order.getAction()) {
 			List<Order> activeOrders = getActiveOrders(order.getPatient(), null, order.getCareSetting(), null);
 			for (Order activeOrder : activeOrders) {
-				if (order.hasSameOrderableAs(activeOrder)
-				        && !OpenmrsUtil.nullSafeEquals(order.getPreviousOrder(), activeOrder)
-				        && OrderUtil.checkScheduleOverlap(order, activeOrder)) {
-					throw new APIException(
-					        "Cannot have more than one active order for the same orderable and care setting at same time");
+				//Reject if there is an active drug order for the same orderable with overlapping schedule
+				if (areDrugOrdersOfSameOrderableAndOverlappingSchedule(order, activeOrder)) {
+					throw new APIException("Cannot have more than one active order for the same orderable and care setting");
 				}
 			}
 		}
