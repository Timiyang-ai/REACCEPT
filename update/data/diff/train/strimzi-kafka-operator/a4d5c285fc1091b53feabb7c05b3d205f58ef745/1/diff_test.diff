diff --git a/old_test.java b/new_test.java
index 24afc78..b834e0b 100644
--- a/old_test.java
+++ b/new_test.java
@@ -11,9 +11,9 @@
         mockKafka.setUpdateTopicResponse(topicName -> Future.succeededFuture());
 
         KafkaTopic topic = TopicSerialization.toTopicResource(kubeTopic, resourcePredicate);
-        mockK8s.setCreateResponse(topicName.asMapName(), null);
+        mockK8s.setCreateResponse(topicName.asKubeName(), null);
         mockK8s.createResource(topic, ar -> async0.countDown());
-        mockK8s.setModifyResponse(topicName.asMapName(), null);
+        mockK8s.setModifyResponse(topicName.asKubeName(), null);
         mockTopicStore.setCreateTopicResponse(topicName, null);
         async0.await();
 
@@ -21,14 +21,14 @@
         topicOperator.reconcile(topic, kubeTopic, kafkaTopic, privateTopic, reconcileResult -> {
             assertSucceeded(context, reconcileResult);
             mockTopicStore.assertExists(context, topicName);
-            mockK8s.assertExists(context, topicName.asMapName());
+            mockK8s.assertExists(context, topicName.asKubeName());
             mockKafka.assertExists(context, topicName);
             mockTopicStore.read(topicName, readResult -> {
                 assertSucceeded(context, readResult);
                 context.assertEquals(mergedTopic, readResult.result());
                 async.countDown();
             });
-            mockK8s.getFromName(topicName.asMapName(), readResult -> {
+            mockK8s.getFromName(topicName.asKubeName(), readResult -> {
                 assertSucceeded(context, readResult);
                 context.assertEquals(mergedTopic, TopicSerialization.fromTopicResource(readResult.result()));
                 async.countDown();
