diff --git a/old_test.java b/new_test.java
index 477cc53..1dbf1ee 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,25 +1,26 @@
 @Test
     public void testReconcile_withCm_noKafka_withPrivate(TestContext context) {
 
-        Topic kubeTopic = new Topic.Builder(topicName.toString(), 10, (short)2, map("foo", "bar")).build();
+        Topic kubeTopic = new Topic.Builder(topicName.toString(), 10, (short)2, map("cleanup.policy", "bar")).build();
         Topic kafkaTopic = null;
         Topic privateTopic = kubeTopic;
 
+        Async async0 = context.async(2);
         mockK8s.setCreateResponse(mapName, null)
-                .createConfigMap(TopicSerialization.toConfigMap(kubeTopic, cmPredicate), ar -> {});
+                .createConfigMap(TopicSerialization.toConfigMap(kubeTopic, cmPredicate), ar -> async0.countDown());
         mockK8s.setDeleteResponse(topicName, null);
         mockTopicStore.setCreateTopicResponse(topicName, null)
-                .create(privateTopic, ar-> {});
+                .create(privateTopic, ar-> async0.countDown());
         mockTopicStore.setDeleteTopicResponse(topicName, null);
 
-
         Async async = context.async();
 
-        op.reconcile(null, kubeTopic, kafkaTopic, privateTopic, reconcileResult -> {
+        controller.reconcile(null, kubeTopic, kafkaTopic, privateTopic, reconcileResult -> {
             assertSucceeded(context, reconcileResult);
             mockKafka.assertNotExists(context, kubeTopic.getTopicName());
             mockTopicStore.assertNotExists(context, kubeTopic.getTopicName());
             mockK8s.assertNotExists(context, kubeTopic.getMapName());
+            mockK8s.assertNoEvents(context);
             async.complete();
         });
     }
\ No newline at end of file
