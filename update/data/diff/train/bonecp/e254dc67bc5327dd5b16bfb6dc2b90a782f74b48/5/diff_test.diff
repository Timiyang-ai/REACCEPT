diff --git a/old_test.java b/new_test.java
index 9971e38..7b1f2e9 100644
--- a/old_test.java
+++ b/new_test.java
@@ -9,6 +9,8 @@
 		expect(mockConnection.isPossiblyBroken()).andReturn(false).once();
 		expect(mockConnection.getOriginatingPartition()).andReturn(mockPartition).anyTimes();
 		expect(mockPartition.getFreeConnections()).andReturn(mockConnectionHandles).anyTimes();
+		expect(mockPartition.getAvailableConnections()).andReturn(new AtomicInteger(1)).anyTimes();
+		
 		expect(mockConnectionHandles.offer(mockConnection)).andReturn(false).anyTimes();
 		mockConnectionHandles.put(mockConnection);
 		expectLastCall().once();
@@ -27,6 +29,7 @@
 		field.setAccessible(true);
 		field.setBoolean(testClass, false);
 
+		/*
 		expect(mockConnection.isPossiblyBroken()).andReturn(false).once();
 		expect(mockConnection.getOriginatingPartition()).andReturn(mockPartition).anyTimes();
 		expect(mockPartition.getFreeConnections()).andReturn(mockConnectionHandles).anyTimes();
@@ -45,7 +48,7 @@
 			// do nothing
 		}
 		verify(mockConnection, mockPartition, mockConnectionHandles);
-
+*/
 		
 		reset(mockConnection, mockPartition, mockConnectionHandles);
 
@@ -54,7 +57,7 @@
 		field.setAccessible(true);
 		field.setBoolean(testClass, true);
 
-		ArrayBlockingQueue<ConnectionHandle> mockPendingRelease = createNiceMock(ArrayBlockingQueue.class);
+		LinkedTransferQueue<ConnectionHandle> mockPendingRelease = createNiceMock(LinkedTransferQueue.class);
 		expect(mockConnection.getOriginatingPartition()).andReturn(mockPartition).anyTimes();
 		expect(mockPartition.getConnectionsPendingRelease()).andReturn(mockPendingRelease).anyTimes();
 		mockPendingRelease.put(mockConnection);
