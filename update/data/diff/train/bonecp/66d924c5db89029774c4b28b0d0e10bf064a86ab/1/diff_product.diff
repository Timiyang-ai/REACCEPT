diff --git a/old_product.java b/new_product.java
index 6bb95bd..79766aa 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,62 +1,87 @@
-public void configure(Properties props)
-	throws HibernateException {
-		String connectionTestStatement = props.getProperty(CONFIG_TEST_STATEMENT);
+public void configure(Properties props) throws HibernateException {
+		this.config = new BoneCPConfig();
+		try {
+			// Use reflection to read in all possible properties of int, String or boolean.
+			for (Field field: BoneCPConfig.class.getDeclaredFields()){
+				if (!Modifier.isFinal(field.getModifiers())){ // avoid logger etc.
+					if (field.getType().equals(int.class)){
+						Method method = BoneCPConfig.class.getDeclaredMethod("set"+upFirst(field.getName()), int.class);
+						String val = props.getProperty("bonecp."+field.getName());
+						if (val != null) {
+							try{
+								method.invoke(this.config, Integer.parseInt(val));
+							} catch (NumberFormatException e){
+								// do nothing, use the default value
+							}
+						}
+					} if (field.getType().equals(long.class)){
+						Method method = BoneCPConfig.class.getDeclaredMethod("set"+upFirst(field.getName()), long.class);
+						String val = props.getProperty("bonecp."+field.getName());
+						if (val != null) {
+							try{
+								method.invoke(this.config, Long.parseLong(val));
+							} catch (NumberFormatException e){
+								// do nothing, use the default value
+							}
+						}
+					} else if (field.getType().equals(String.class)){
+						Method method = BoneCPConfig.class.getDeclaredMethod("set"+upFirst(field.getName()), String.class);
+						String val = props.getProperty("bonecp."+field.getName());
+						if (val != null) {
+							method.invoke(this.config, val);
+						}
+					} else if (field.getType().equals(boolean.class)){
+						Method method = BoneCPConfig.class.getDeclaredMethod("set"+upFirst(field.getName()), boolean.class);
+						String val = props.getProperty("bonecp."+field.getName());
+						if (val != null) {
+							if (val.toUpperCase().equals("TRUE") || val.toUpperCase().equals("FALSE")){
+								method.invoke(this.config, Boolean.parseBoolean(val));
+							} 
+						}
+					}
+				}
+			}
 
-		int statementCacheSize = configParseNumber(props, CONFIG_PREPARED_STATEMENT_CACHE_SIZE, 50);
-		if (statementCacheSize != 50){
-			statementCacheSize = configParseNumber(props, CONFIG_STATEMENT_CACHE_SIZE, 50);
-		}
-		int minsize = configParseNumber(props, CONFIG_MIN_CONNECTIONS_PER_PARTITION, 20);
-		int maxsize = configParseNumber(props, CONFIG_MAX_CONNECTIONS_PER_PARTITION, 50);
-		int acquireIncrement = configParseNumber(props, CONFIG_ACQUIRE_INCREMENT, 10);
-		int partcount = configParseNumber(props, CONFIG_PARTITION_COUNT, 3);
-		int releaseHelperThreads = configParseNumber(props, CONFIG_RELEASE_HELPER_THREADS, 3);
-		long idleMaxAge = configParseNumber(props, CONFIG_IDLE_MAX_AGE, 240);
-		long idleConnectionTestPeriod = configParseNumber(props, CONFIG_IDLE_CONNECTION_TEST_PERIOD, 60);
-		int acquireRetryDelay = configParseNumber(props, CONFIG_ACQUIRE_RETRY_DELAY, 100);
+			// old hibernate config
+			String url = props.getProperty(CONFIG_CONNECTION_URL);
+			String username = props.getProperty(CONFIG_CONNECTION_USERNAME);
+			String password = props.getProperty(CONFIG_CONNECTION_PASSWORD);
+			String driver = props.getProperty(CONFIG_CONNECTION_DRIVER_CLASS);
+			if (url == null){
+				url = props.getProperty(CONFIG_CONNECTION_URL_ALTERNATE);
+			}
+			if (username == null){
+				username = props.getProperty(CONFIG_CONNECTION_USERNAME_ALTERNATE);
+			}
+			if (password == null){
+				password = props.getProperty(CONFIG_CONNECTION_PASSWORD_ALTERNATE);
+			}
+			if (driver == null){
+				driver = props.getProperty(CONFIG_CONNECTION_DRIVER_CLASS_ALTERNATE);
+			}
 
-		String url = props.getProperty(CONFIG_CONNECTION_URL, "JDBC URL NOT SET IN CONFIG");
-		String username = props.getProperty(CONFIG_CONNECTION_USERNAME, "username not set");
-		String password = props.getProperty(CONFIG_CONNECTION_PASSWORD, "password not set");
-		String connectionHookClass = props.getProperty(CONFIG_CONNECTION_HOOK_CLASS);
-		String initSQL = props.getProperty(CONFIG_INIT_SQL);
-		boolean closeConnectionWatch = configParseBoolean(props, CONFIG_CLOSE_CONNECTION_WATCH, false);
-		boolean logStatementsEnabled = configParseBoolean(props, CONFIG_LOG_STATEMENTS_ENABLED, false);
-		boolean lazyInit = configParseBoolean(props, CONFIG_LAZY_INIT, false);
-		boolean transactionRecoveryEnabled = configParseBoolean(props, CONFIG_TRANSACTION_REPLAY_LOG, false);
+			if (url != null){
+				this.config.setJdbcUrl(url);
+			}
+			if (username != null){
+				this.config.setUsername(username);
+			}
+			if (password != null){
+				this.config.setPassword(password);
+			}
 
 
-		// Remember Isolation level
-		this.isolation = PropertiesHelper.getInteger(Environment.ISOLATION, props);
-		this.autocommit = PropertiesHelper.getBoolean(Environment.AUTOCOMMIT, props);
+			// Remember Isolation level
+			this.isolation = PropertiesHelper.getInteger(Environment.ISOLATION, props);
+			this.autocommit = PropertiesHelper.getBoolean(Environment.AUTOCOMMIT, props);
+
+			logger.debug(this.config.toString());
 
-		try {
-			String driver = props.getProperty(CONFIG_CONNECTION_DRIVER_CLASS);
 			if (driver != null && !driver.trim().equals("")){
 				loadClass(driver);
 			}
-			logger.debug(String.format(CONFIG_STATUS, url, username, minsize, maxsize, acquireIncrement, partcount, idleConnectionTestPeriod, idleMaxAge));
-			this.config = new BoneCPConfig();
-			this.config.setMinConnectionsPerPartition(minsize);
-			this.config.setMaxConnectionsPerPartition(maxsize);
-			this.config.setAcquireIncrement(acquireIncrement);
-			this.config.setPartitionCount(partcount);
-			this.config.setJdbcUrl(url);
-			this.config.setUsername(username);
-			this.config.setPassword(password);
-			this.config.setReleaseHelperThreads(releaseHelperThreads);
-			this.config.setIdleConnectionTestPeriod(idleConnectionTestPeriod);
-			this.config.setIdleMaxAge(idleMaxAge);
-			this.config.setConnectionTestStatement(connectionTestStatement);
-			this.config.setStatementsCacheSize(statementCacheSize);
-			this.config.setInitSQL(initSQL);
-			this.config.setCloseConnectionWatch(closeConnectionWatch);
-			this.config.setLogStatementsEnabled(logStatementsEnabled);
-			this.config.setAcquireRetryDelay(acquireRetryDelay);
-			this.config.setLazyInit(lazyInit);
-			this.config.setTransactionRecoveryEnabled(transactionRecoveryEnabled);
-			if (connectionHookClass != null){
-				Object hookClass = loadClass(connectionHookClass).newInstance();
+			if (this.config.getConnectionHookClassName() != null){
+				Object hookClass = loadClass(this.config.getConnectionHookClassName()).newInstance();
 				this.config.setConnectionHook((ConnectionHook) hookClass);
 			}
 			// create the connection pool
