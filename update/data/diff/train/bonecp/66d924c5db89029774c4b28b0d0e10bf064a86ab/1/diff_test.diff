diff --git a/old_test.java b/new_test.java
index 8fc462d..f241e2a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,23 +1,21 @@
 @Test
 	public void testConfigure() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException {
-		expect(mockProperties.getProperty(CONFIG_TEST_STATEMENT)).andReturn(null).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_PREPARED_STATEMENT_CACHE_SIZE)).andReturn("40").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_STATEMENT_CACHE_SIZE)).andReturn("40").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_STATEMENTS_CACHED_PER_CONNECTION)).andReturn("30").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_MIN_CONNECTIONS_PER_PARTITION)).andReturn("20").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_MAX_CONNECTIONS_PER_PARTITION)).andReturn("50").anyTimes(); 
-		expect(mockProperties.getProperty(CONFIG_ACQUIRE_INCREMENT)).andReturn("5").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_PARTITION_COUNT)).andReturn("5").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_RELEASE_HELPER_THREADS)).andReturn("3").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_IDLE_CONNECTION_TEST_PERIOD)).andReturn("60").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_IDLE_MAX_AGE)).andReturn("240").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_CONNECTION_URL, "JDBC URL NOT SET IN CONFIG")).andReturn(URL).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_CONNECTION_USERNAME, "username not set")).andReturn(USERNAME).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_CONNECTION_PASSWORD, "password not set")).andReturn(PASSWORD).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_CONNECTION_DRIVER_CLASS)).andReturn(DRIVER).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_CONNECTION_HOOK_CLASS)).andReturn("com.jolbox.bonecp.provider.CustomHook").anyTimes();
-		expect(mockProperties.getProperty(CONFIG_INIT_SQL)).andReturn(TEST_QUERY).anyTimes();
-		expect(mockProperties.getProperty(CONFIG_LOG_STATEMENTS_ENABLED)).andReturn("true").anyTimes();
+		expect(mockProperties.getProperty("bonecp.statementsCacheSize")).andReturn("40").anyTimes();
+		expect(mockProperties.getProperty("bonecp.minConnectionsPerPartition")).andReturn("20").anyTimes();
+		expect(mockProperties.getProperty("bonecp.maxConnectionsPerPartition")).andReturn("50").anyTimes(); 
+		expect(mockProperties.getProperty("bonecp.acquireIncrement")).andReturn("5").anyTimes();
+		expect(mockProperties.getProperty("bonecp.partitionCount")).andReturn("5").anyTimes();
+		expect(mockProperties.getProperty("bonecp.releaseHelperThreads")).andReturn("3").anyTimes();
+		expect(mockProperties.getProperty("bonecp.idleConnectionTestPeriod")).andReturn("60").anyTimes();
+		expect(mockProperties.getProperty("bonecp.idleMaxAge")).andReturn("240").anyTimes();
+		expect(mockProperties.getProperty("javax.persistence.jdbc.url")).andReturn(URL).anyTimes();
+		expect(mockProperties.getProperty("javax.persistence.jdbc.user")).andReturn(USERNAME).anyTimes();
+		expect(mockProperties.getProperty("javax.persistence.jdbc.password")).andReturn(PASSWORD).anyTimes();
+		expect(mockProperties.getProperty("javax.persistence.jdbc.driver")).andReturn(DRIVER).anyTimes();
+		expect(mockProperties.getProperty("bonecp.connectionHookClassName")).andReturn("com.jolbox.bonecp.provider.CustomHook").anyTimes();
+		expect(mockProperties.getProperty("bonecp.connectionTestStatement")).andReturn(TEST_QUERY).anyTimes();
+		expect(mockProperties.getProperty("bonecp.initSQL")).andReturn(TEST_QUERY).anyTimes();
+		expect(mockProperties.getProperty("bonecp.logStatementsEnabled")).andReturn("true").anyTimes();
 
 
 
