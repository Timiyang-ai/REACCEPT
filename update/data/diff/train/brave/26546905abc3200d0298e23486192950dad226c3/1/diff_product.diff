diff --git a/old_product.java b/new_product.java
index 2f8e24a..2533204 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,17 +1,15 @@
 void reportOrphanedSpans() {
     Reference<? extends TraceContext> reference;
+    // This is called on critical path of unrelated traced operations. If we have orphaned spans, be
+    // careful to not penalize the performance of the caller. It is better to cache time when
+    // flushing a span than hurt performance of unrelated operations by calling
+    // currentTimeMicroseconds N times
+    long flushTime = 0L;
     while ((reference = poll()) != null) {
-      TraceContext context = reference.get();
       MutableSpan value = delegate.remove(reference);
       if (value == null || noop.get()) continue;
-      try {
-        value.annotate(value.clock.currentTimeMicroseconds(), "brave.flush");
-        reporter.report(value.toSpan(endpoint));
-      } catch (RuntimeException e) {
-        // don't crash the caller if there was a problem reporting an unrelated span.
-        if (context != null && logger.isLoggable(Level.FINE)) {
-          logger.log(Level.FINE, "error flushing " + context, e);
-        }
-      }
+      if (flushTime == 0L) flushTime = clock.currentTimeMicroseconds();
+      value.annotate(flushTime, "brave.flush");
+      reporter.report(value.toSpan(endpoint));
     }
   }
\ No newline at end of file
