diff --git a/old_test.java b/new_test.java
index 682a5e9..2ece18a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -28,10 +28,21 @@
         boolean isReminderVisible = false;  // We don't have views here, so just fake it
         boolean isRouteFavorite = false;  // We'll fake this too, for our purposes
 
+        Occupancy occupancy = null;
+        OccupancyState occupancyState = null;
+        if (arrivalInfo.get(0).getInfo().getPredictedOccupancy() != null) {
+            occupancy = arrivalInfo.get(0).getInfo().getPredictedOccupancy();
+            occupancyState = OccupancyState.PREDICTED;
+        } else if (arrivalInfo.get(0).getInfo().getHistoricalOccupancy() != null) {
+            occupancy = arrivalInfo.get(0).getInfo().getHistoricalOccupancy();
+            occupancyState = OccupancyState.HISTORICAL;
+        }
+
         // HART has route schedule URLs in test data, so below options should allow the user to set
         // a reminder and view the route schedule
         List<String> options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
         assertEquals(options.get(0), "Add star to route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
@@ -39,12 +50,14 @@
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Show route schedule");
         assertEquals(options.get(6), "Report arrival time problem");
+        assertEquals(options.get(7), "Join discussion");
 
         isReminderVisible = true;
 
         // Now we should see route schedules and *edit* the reminder
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
         assertEquals(options.get(0), "Add star to route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
@@ -52,6 +65,7 @@
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Show route schedule");
         assertEquals(options.get(6), "Report arrival time problem");
+        assertEquals(options.get(7), "Join discussion");
 
         // Get a PSTA response - PSTA test data doesn't include route schedule URLs
         ObaArrivalInfoResponse response2 =
@@ -79,25 +93,29 @@
         // PSTA does not have route schedule URLs in test data, so below options should allow the
         // user to set a reminder but NOT view the route schedule
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(7, options.size());
         assertEquals(options.get(0), "Add star to route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
         assertEquals(options.get(3), "Set a reminder");
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
 
         isReminderVisible = true;
 
         // Now we should see *edit* the reminder, and still no route schedule
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(7, options.size());
         assertEquals(options.get(0), "Add star to route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
         assertEquals(options.get(3), "Edit this reminder");
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
 
         // Now change route to favorite, and do all the above over again
         isRouteFavorite = true;
@@ -108,7 +126,8 @@
         // HART has route schedule URLs in test data, so below options should allow the user to set
         // a reminder and view the route schedule
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
         assertEquals(options.get(0), "Remove star from route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
@@ -116,12 +135,14 @@
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Show route schedule");
         assertEquals(options.get(6), "Report arrival time problem");
+        assertEquals(options.get(7), "Join discussion");
 
         isReminderVisible = true;
 
         // Now we should see route schedules and *edit* the reminder
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
         assertEquals(options.get(0), "Remove star from route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
@@ -129,6 +150,7 @@
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Show route schedule");
         assertEquals(options.get(6), "Report arrival time problem");
+        assertEquals(options.get(7), "Join discussion");
 
         // PSTA
         isReminderVisible = false;  // We don't have views here, so just fake it
@@ -136,23 +158,76 @@
         // PSTA does not have route schedule URLs in test data, so below options should allow the
         // user to set a reminder but NOT view the route schedule
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(7, options.size());
         assertEquals(options.get(0), "Remove star from route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
         assertEquals(options.get(3), "Set a reminder");
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
 
         isReminderVisible = true;
 
         // Now we should see *edit* the reminder, and still no route schedule
         options = UIUtils
-                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible);
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(7, options.size());
+        assertEquals(options.get(0), "Remove star from route");
+        assertEquals(options.get(1), "Show route on map");
+        assertEquals(options.get(2), "Show trip status");
+        assertEquals(options.get(3), "Edit this reminder");
+        assertEquals(options.get(4), "Show only this route");
+        assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
+
+        //
+        // Test occupancy in the menu
+        //
+
+        // HISTORICAL
+        occupancy = Occupancy.EMPTY;
+        occupancyState = OccupancyState.HISTORICAL;
+        options = UIUtils
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
+        assertEquals(options.get(0), "Remove star from route");
+        assertEquals(options.get(1), "Show route on map");
+        assertEquals(options.get(2), "Show trip status");
+        assertEquals(options.get(3), "Edit this reminder");
+        assertEquals(options.get(4), "Show only this route");
+        assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
+        assertEquals(options.get(7), "About historical occupancy");
+
+        // PREDICTED
+        occupancy = Occupancy.EMPTY;
+        occupancyState = OccupancyState.PREDICTED;
+        options = UIUtils
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
+        assertEquals(options.get(0), "Remove star from route");
+        assertEquals(options.get(1), "Show route on map");
+        assertEquals(options.get(2), "Show trip status");
+        assertEquals(options.get(3), "Edit this reminder");
+        assertEquals(options.get(4), "Show only this route");
+        assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
+        assertEquals(options.get(7), "About occupancy");
+
+        // REALTIME (should be same as PREDICTED)
+        occupancy = Occupancy.EMPTY;
+        occupancyState = OccupancyState.REALTIME;
+        options = UIUtils
+                .buildTripOptions(getTargetContext(), isRouteFavorite, hasUrl2, isReminderVisible, occupancy, occupancyState);
+        assertEquals(8, options.size());
         assertEquals(options.get(0), "Remove star from route");
         assertEquals(options.get(1), "Show route on map");
         assertEquals(options.get(2), "Show trip status");
         assertEquals(options.get(3), "Edit this reminder");
         assertEquals(options.get(4), "Show only this route");
         assertEquals(options.get(5), "Report arrival time problem");
+        assertEquals(options.get(6), "Join discussion");
+        assertEquals(options.get(7), "About occupancy");
     }
\ No newline at end of file
