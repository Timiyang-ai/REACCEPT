diff --git a/old_test.java b/new_test.java
index 824c938..3e6dd26 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,10 +6,12 @@
       insertData(client, table, currentTimeMillis());
 
       Job job = Job.getInstance();
-      AccumuloInputFormat.setInputTableName(job, table);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setInputTableName(job, table);
       ClientInfo ci = getClientInfo();
-      AccumuloInputFormat.setZooKeeperInstance(job, ci.getInstanceName(), ci.getZooKeepers());
-      AccumuloInputFormat.setConnectorInfo(job, ci.getPrincipal(), ci.getAuthenticationToken());
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setZooKeeperInstance(job,
+          ci.getInstanceName(), ci.getZooKeepers());
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setConnectorInfo(job,
+          ci.getPrincipal(), ci.getAuthenticationToken());
 
       // split table
       TreeSet<Text> splitsToAdd = new TreeSet<>();
@@ -28,12 +30,12 @@
       List<Range> ranges = new ArrayList<>();
       for (Text text : actualSplits)
         ranges.add(new Range(text));
-      AccumuloInputFormat.setRanges(job, ranges);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setRanges(job, ranges);
       splits = inputFormat.getSplits(job);
       assertEquals(actualSplits.size(), splits.size());
 
       // offline mode
-      AccumuloInputFormat.setOfflineTableScan(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setOfflineTableScan(job, true);
       try {
         inputFormat.getSplits(job);
         fail("An exception should have been thrown");
@@ -48,57 +50,57 @@
       for (int i = 0; i < 5; i++)
         // overlapping ranges
         ranges.add(new Range(String.format("%09d", i), String.format("%09d", i + 2)));
-      AccumuloInputFormat.setRanges(job, ranges);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setRanges(job, ranges);
       splits = inputFormat.getSplits(job);
       assertEquals(2, splits.size());
 
-      AccumuloInputFormat.setAutoAdjustRanges(job, false);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setAutoAdjustRanges(job, false);
       splits = inputFormat.getSplits(job);
       assertEquals(ranges.size(), splits.size());
 
       // BatchScan not available for offline scans
-      AccumuloInputFormat.setBatchScan(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setBatchScan(job, true);
       // Reset auto-adjust ranges too
-      AccumuloInputFormat.setAutoAdjustRanges(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setAutoAdjustRanges(job, true);
 
-      AccumuloInputFormat.setOfflineTableScan(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setOfflineTableScan(job, true);
       try {
         inputFormat.getSplits(job);
         fail("An exception should have been thrown");
       } catch (IllegalArgumentException e) {}
 
       client.tableOperations().online(table, true);
-      AccumuloInputFormat.setOfflineTableScan(job, false);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setOfflineTableScan(job, false);
 
       // test for resumption of success
       splits = inputFormat.getSplits(job);
       assertEquals(2, splits.size());
 
       // BatchScan not available with isolated iterators
-      AccumuloInputFormat.setScanIsolation(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setScanIsolation(job, true);
       try {
         inputFormat.getSplits(job);
         fail("An exception should have been thrown");
       } catch (IllegalArgumentException e) {}
-      AccumuloInputFormat.setScanIsolation(job, false);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setScanIsolation(job, false);
 
       // test for resumption of success
       splits = inputFormat.getSplits(job);
       assertEquals(2, splits.size());
 
       // BatchScan not available with local iterators
-      AccumuloInputFormat.setLocalIterators(job, true);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setLocalIterators(job, true);
       try {
         inputFormat.getSplits(job);
         fail("An exception should have been thrown");
       } catch (IllegalArgumentException e) {}
-      AccumuloInputFormat.setLocalIterators(job, false);
+      org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat.setLocalIterators(job, false);
 
       // Check we are getting back correct type pf split
       client.tableOperations().online(table);
       splits = inputFormat.getSplits(job);
       for (InputSplit split : splits)
-        assert (split instanceof BatchInputSplit);
+        assert (split instanceof org.apache.accumulo.core.clientImpl.mapreduce.BatchInputSplit);
 
       // We should divide along the tablet lines similar to when using `setAutoAdjustRanges(job,
       // true)`
