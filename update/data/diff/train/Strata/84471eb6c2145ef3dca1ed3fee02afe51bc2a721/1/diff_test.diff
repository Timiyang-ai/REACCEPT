diff --git a/old_test.java b/new_test.java
index fcd8292..31cf902 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,27 +1,22 @@
 @Test(dataProvider = "generation")
   public void coverage_equals(
-      AdjustableDate start, AdjustableDate end, Frequency freq, StubConvention stubConv, RollConvention rollConv,
+      LocalDate start, LocalDate end, Frequency freq, StubConvention stubConv, RollConvention rollConv,
       LocalDate firstReg, LocalDate lastReg, List<LocalDate> unadjusted, List<LocalDate> adjusted) {
-    PeriodicScheduleDefn a1 = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn a2 = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn b = PeriodicScheduleDefn.of(
-        ad(LocalDate.MIN), end, freq, BDA, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn c = PeriodicScheduleDefn.of(
-        start, ad(LocalDate.MAX), freq, BDA, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn d = PeriodicScheduleDefn.of(
-        start, end, freq == P1M ? P3M : P1M, BDA, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn e = PeriodicScheduleDefn.of(
-        start, end, freq, BusinessDayAdjustment.NONE, stubConv, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn f = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv == STUB_NONE ? SHORT_FINAL : STUB_NONE, rollConv, firstReg, lastReg);
-    PeriodicScheduleDefn g = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv, SFE, firstReg, lastReg);
-    PeriodicScheduleDefn h = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv, rollConv, start.getUnadjusted().plusDays(1), lastReg);
-    PeriodicScheduleDefn i = PeriodicScheduleDefn.of(
-        start, end, freq, BDA, stubConv, rollConv, firstReg, end.getUnadjusted().minusDays(1));
+    PeriodicScheduleDefn a1 = of(start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn a2 = of(start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn b = of(LocalDate.MIN, end, freq, BDA, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn c = of(start, LocalDate.MAX, freq, BDA, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn d = of(
+        start, end, freq == P1M ? P3M : P1M, BDA, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn e = of(
+        start, end, freq, BusinessDayAdjustment.NONE, stubConv, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn f = of(
+        start, end, freq, BDA, stubConv == STUB_NONE ? SHORT_FINAL : STUB_NONE, rollConv, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn g = of(start, end, freq, BDA, stubConv, SFE, firstReg, lastReg, null, null);
+    PeriodicScheduleDefn h = of(start, end, freq, BDA, stubConv, rollConv, start.plusDays(1), lastReg, null, null);
+    PeriodicScheduleDefn i = of(start, end, freq, BDA, stubConv, rollConv, firstReg, end.minusDays(1), null, null);
+    PeriodicScheduleDefn j = of(start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg, BDA, null);
+    PeriodicScheduleDefn k = of(start, end, freq, BDA, stubConv, rollConv, firstReg, lastReg, null, BDA);
     assertEquals(a1.equals(a1), true);
     assertEquals(a1.equals(a2), true);
     assertEquals(a1.equals(b), false);
@@ -32,4 +27,6 @@
     assertEquals(a1.equals(g), false);
     assertEquals(a1.equals(h), false);
     assertEquals(a1.equals(i), false);
+    assertEquals(a1.equals(j), false);
+    assertEquals(a1.equals(k), false);
   }
\ No newline at end of file
