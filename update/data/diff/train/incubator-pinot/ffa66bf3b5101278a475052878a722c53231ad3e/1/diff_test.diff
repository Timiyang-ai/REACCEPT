diff --git a/old_test.java b/new_test.java
index 17d1476..d8007c6 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,9 +2,6 @@
   public void testInvalidateCachedControllerLeader() {
     HelixManager helixManager = mock(HelixManager.class);
     HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);
-    BaseDataAccessor<ZNRecord> baseDataAccessor = mock(BaseDataAccessor.class);
-    HelixAdmin helixAdmin = mock(HelixAdmin.class);
-    ZNRecord znRecord = mock(ZNRecord.class);
     final String leaderHost = "host";
     final int leaderPort = 12345;
 
@@ -12,57 +9,62 @@
     ConfigAccessor configAccessor = mock(ConfigAccessor.class);
     ResourceConfig resourceConfig = mock(ResourceConfig.class);
     when(helixManager.getConfigAccessor()).thenReturn(configAccessor);
-    when(configAccessor.getResourceConfig(anyString(), anyString())).thenReturn(resourceConfig);
+    when(configAccessor.getResourceConfig(any(), anyString())).thenReturn(resourceConfig);
     when(resourceConfig.getSimpleConfig(anyString())).thenReturn("false");
 
+    // Mocks the helix leader
     when(helixManager.getHelixDataAccessor()).thenReturn(helixDataAccessor);
-    when(helixDataAccessor.getBaseDataAccessor()).thenReturn(baseDataAccessor);
-    when(znRecord.getId()).thenReturn(leaderHost + "_" + leaderPort);
-    when(baseDataAccessor.get(anyString(), any(), anyInt())).thenReturn(znRecord);
-    when(helixManager.getClusterName()).thenReturn("testCluster");
-    when(helixManager.getClusterManagmentTool()).thenReturn(helixAdmin);
-    when(helixAdmin.getResourceExternalView(anyString(), anyString())).thenReturn(null);
+    PropertyKey.Builder keyBuilder = mock(PropertyKey.Builder.class);
+    when(helixDataAccessor.keyBuilder()).thenReturn(keyBuilder);
+    PropertyKey controllerLeader = mock(PropertyKey.class);
+    when(keyBuilder.controllerLeader()).thenReturn(controllerLeader);
+    LiveInstance liveInstance = mock(LiveInstance.class);
+    when(helixDataAccessor.getProperty(controllerLeader)).thenReturn(liveInstance);
+    when(liveInstance.getInstanceName()).thenReturn(leaderHost + "_" + leaderPort);
 
     // Create Controller Leader Locator
     FakeControllerLeaderLocator.create(helixManager);
-    ControllerLeaderLocator controllerLeaderLocator = FakeControllerLeaderLocator.getInstance();
+    FakeControllerLeaderLocator controllerLeaderLocator = FakeControllerLeaderLocator.getInstance();
 
     // check values at startup
-    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidateMillis(), 0);
+    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderValid());
+    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidationTimeMs(), 0);
 
     // very first invalidate
+    long currentTimeMs = 31_000L;
+    controllerLeaderLocator.setCurrentTimeMs(currentTimeMs);
     controllerLeaderLocator.invalidateCachedControllerLeader();
-    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    long lastCacheInvalidateMillis = controllerLeaderLocator.getLastCacheInvalidateMillis();
+    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderValid());
+    long lastCacheInvalidateMillis = controllerLeaderLocator.getLastCacheInvalidationTimeMs();
     Assert.assertTrue(lastCacheInvalidateMillis > 0);
+    Assert.assertEquals(lastCacheInvalidateMillis, currentTimeMs);
 
-    // invalidate within {@link ControllerLeaderLocator::getMillisBetweenInvalidate()} millis
+    // invalidate within {@link ControllerLeaderLocator::getMinInvalidateIntervalMs()} millis
     // values should remain unchanged
-    lastCacheInvalidateMillis = System.currentTimeMillis();
-    controllerLeaderLocator.setLastCacheInvalidateMillis(lastCacheInvalidateMillis);
+    currentTimeMs = 32_000L;
+    controllerLeaderLocator.setCurrentTimeMs(currentTimeMs);
     controllerLeaderLocator.invalidateCachedControllerLeader();
-    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidateMillis(), lastCacheInvalidateMillis);
+    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderValid());
+    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidationTimeMs(), lastCacheInvalidateMillis);
 
     // getControllerLeader, which validates the cache
     controllerLeaderLocator.getControllerLeader(testTable);
-    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidateMillis(), lastCacheInvalidateMillis);
+    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderValid());
+    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidationTimeMs(), lastCacheInvalidateMillis);
 
-    // invalidate within {@link ControllerLeaderLocator::getMillisBetweenInvalidate()} millis
+    // invalidate within {@link ControllerLeaderLocator::getMinInvalidateIntervalMs()} millis
     // values should remain unchanged
-    lastCacheInvalidateMillis = System.currentTimeMillis();
-    controllerLeaderLocator.setLastCacheInvalidateMillis(lastCacheInvalidateMillis);
+    currentTimeMs = 33_000L;
+    controllerLeaderLocator.setCurrentTimeMs(currentTimeMs);
     controllerLeaderLocator.invalidateCachedControllerLeader();
-    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidateMillis(), lastCacheInvalidateMillis);
+    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderValid());
+    Assert.assertEquals(controllerLeaderLocator.getLastCacheInvalidationTimeMs(), lastCacheInvalidateMillis);
 
-    // invalidate after {@link ControllerLeaderLocator::getMillisBetweenInvalidate()} millis have elapsed, by setting lastCacheInvalidateMillis to well before the millisBetweenInvalidate
+    // invalidate after {@link ControllerLeaderLocator::getMinInvalidateIntervalMs()} millis have elapsed, by setting lastCacheInvalidateMillis to well before the millisBetweenInvalidate
     // cache should be invalidated and last cache invalidation time should get updated
-    lastCacheInvalidateMillis = System.currentTimeMillis() - 2 * controllerLeaderLocator.getMillisBetweenInvalidate();
-    controllerLeaderLocator.setLastCacheInvalidateMillis(lastCacheInvalidateMillis);
+    controllerLeaderLocator.setCurrentTimeMs(
+        controllerLeaderLocator.getCurrentTimeMs() + 2 * controllerLeaderLocator.getMinInvalidateIntervalMs());
     controllerLeaderLocator.invalidateCachedControllerLeader();
-    Assert.assertTrue(controllerLeaderLocator.isCachedControllerLeaderInvalid());
-    Assert.assertTrue(controllerLeaderLocator.getLastCacheInvalidateMillis() > lastCacheInvalidateMillis);
+    Assert.assertFalse(controllerLeaderLocator.isCachedControllerLeaderValid());
+    Assert.assertTrue(controllerLeaderLocator.getLastCacheInvalidationTimeMs() > lastCacheInvalidateMillis);
   }
\ No newline at end of file
