diff --git a/old_test.java b/new_test.java
index 68d9eb2..cec4692 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,16 +1,18 @@
-@SuppressWarnings("deprecation")
-    @Test
-    public void testToPath() {
-        assertEquals("path", toPath(ImmutableList.of("path")));
-        assertEquals("path", toPath(ImmutableList.of("path"), null));
-        assertEquals("path/to", toPath(ImmutableList.of("path", "to"), null));
-        assertEquals("path/to/node", toPath(ImmutableList.of("path", "to", "node"), null));
-        assertEquals("path/to/node", toPath(ImmutableList.of("path", "to"), "node"));
-        assertEquals("path/to/node", toPath(ImmutableList.of("path"), "to", "node"));
-        try {
-            toPath(ImmutableList.of("path", "to"), (String) null);
-            fail("Expected precondition violation");
-        } catch (IllegalArgumentException e) {
-            assertTrue(e.getMessage(), e.getMessage().contains("cannot have null"));
-        }
+@Test
+    public void testIsChild() {
+        assertFalse(isChild("", ""));
+        assertTrue(isChild("", "path"));
+        assertTrue(isChild("", "path/to"));
+
+        assertFalse(isChild("path", "path"));
+        assertFalse(isChild("path", ""));
+        assertTrue(isChild("path", "path/to"));
+        assertTrue(isChild("path", "path/to/node"));
+
+        assertFalse(isChild("path/to", ""));
+        assertFalse(isChild("path/to", "path"));
+        assertFalse(isChild("path/to", "path/to"));
+        assertFalse(isChild("path/to", "path2/to"));
+
+        assertTrue(isChild("path/to", "path/to/node"));
     }
\ No newline at end of file
