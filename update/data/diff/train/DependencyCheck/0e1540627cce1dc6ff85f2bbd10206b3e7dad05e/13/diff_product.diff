diff --git a/old_product.java b/new_product.java
index 9c04283..f3d673b 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,51 +1,17 @@
 @Override
-    public int compareTo(VulnerableSoftware vs) {
-        int result = 0;
-        final String[] left = StringUtils.split(this.name, ':');
-        final String[] right = StringUtils.split(vs.getName(), ':');
-        final int max = (left.length <= right.length) ? left.length : right.length;
-        if (max > 0) {
-            for (int i = 0; result == 0 && i < max; i++) {
-                final String[] subLeft = split(left[i]);
-                final String[] subRight = split(right[i]);
-                final int subMax = (subLeft.length <= subRight.length) ? subLeft.length : subRight.length;
-                if (subMax > 0) {
-                    for (int x = 0; result == 0 && x < subMax; x++) {
-                        if (isPositiveInteger(subLeft[x]) && isPositiveInteger(subRight[x])) {
-                            try {
-                                result = Long.valueOf(subLeft[x]).compareTo(Long.valueOf(subRight[x]));
-                            } catch (NumberFormatException ex) {
-                                //ignore the exception - they obviously aren't numbers
-                                if (!subLeft[x].equalsIgnoreCase(subRight[x])) {
-                                    result = subLeft[x].compareToIgnoreCase(subRight[x]);
-                                }
-                            }
-                        } else {
-                            result = subLeft[x].compareToIgnoreCase(subRight[x]);
-                        }
-                    }
-                    if (result == 0) {
-                        if (subLeft.length > subRight.length) {
-                            result = 2;
-                        }
-                        if (subRight.length > subLeft.length) {
-                            result = -2;
-                        }
-                    }
-                } else {
-                    result = left[i].compareToIgnoreCase(right[i]);
-                }
-            }
-            if (result == 0) {
-                if (left.length > right.length) {
-                    result = 2;
-                }
-                if (right.length > left.length) {
-                    result = -2;
-                }
-            }
-        } else {
-            result = this.getName().compareToIgnoreCase(vs.getName());
+    public int compareTo(Object o) {
+        if (o instanceof VulnerableSoftware) {
+            final VulnerableSoftware other = (VulnerableSoftware) o;
+            return new CompareToBuilder()
+                    .appendSuper(super.compareTo(other))
+                    .append(versionStartIncluding, other.versionStartIncluding)
+                    .append(versionStartExcluding, other.versionStartExcluding)
+                    .append(versionEndIncluding, other.versionEndIncluding)
+                    .append(versionEndExcluding, other.versionEndExcluding)
+                    .append(this.vulnerable, other.vulnerable)
+                    .build();
+        } else if (o instanceof Cpe) {
+            return super.compareTo(o);
         }
-        return result;
+        throw new UnexpectedAnalysisException("Unable to compare " + o.getClass().getCanonicalName());
     }
\ No newline at end of file
