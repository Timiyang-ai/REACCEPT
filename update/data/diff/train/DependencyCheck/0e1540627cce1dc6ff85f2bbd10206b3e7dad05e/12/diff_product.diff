diff --git a/old_product.java b/new_product.java
index 6d4d6b4..de6c472 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,42 @@
 protected void determineCPE(Dependency dependency) throws CorruptIndexException, IOException, ParseException, AnalysisException {
-        String vendors = "";
-        String products = "";
+        final Map<String, MutableInt> vendors = new HashMap<>();
+        final Map<String, MutableInt> products = new HashMap<>();
+        final Set<Integer> previouslyFound = new HashSet<>();
+
         for (Confidence confidence : Confidence.values()) {
-            if (dependency.contains(EvidenceType.VENDOR, confidence)) {
-                vendors = addEvidenceWithoutDuplicateTerms(vendors, dependency.getIterator(EvidenceType.VENDOR, confidence));
-                LOGGER.debug("vendor search: {}", vendors);
-            }
-            if (dependency.contains(EvidenceType.PRODUCT, confidence)) {
-                products = addEvidenceWithoutDuplicateTerms(products, dependency.getIterator(EvidenceType.PRODUCT, confidence));
-                LOGGER.debug("product search: {}", products);
-            }
+            collectTerms(vendors, dependency.getIterator(EvidenceType.VENDOR, confidence));
+            LOGGER.debug("vendor search: {}", vendors);
+            collectTerms(products, dependency.getIterator(EvidenceType.PRODUCT, confidence));
+            LOGGER.debug("product search: {}", products);
             if (!vendors.isEmpty() && !products.isEmpty()) {
-                final List<IndexEntry> entries = searchCPE(vendors, products, dependency.getVendorWeightings(),
-                        dependency.getProductWeightings());
+                final List<IndexEntry> entries = searchCPE(vendors, products,
+                        dependency.getVendorWeightings(), dependency.getProductWeightings());
                 if (entries == null) {
                     continue;
                 }
+
                 boolean identifierAdded = false;
+                //filtering on score seems to create additional FN - but maybe we should continue to investigate this option
+//                StandardDeviation stdev = new StandardDeviation();
+//                float maxScore = 0;
+//                for (IndexEntry e : entries) {
+//                    if (previouslyFound.contains(e.getDocumentId())) {
+//                        continue;
+//                    }
+//                    stdev.increment((double) e.getSearchScore());
+//                    if (maxScore < e.getSearchScore()) {
+//                        maxScore = e.getSearchScore();
+//                    }
+//                }
+//                double filter = maxScore - (stdev.getResult() * 5);
+
                 for (IndexEntry e : entries) {
-                    LOGGER.debug("Verifying entry: {}", e);
+                    if (previouslyFound.contains(e.getDocumentId()) /*|| (filter > 0 && e.getSearchScore() < filter)*/) {
+                        continue;
+                    }
+                    previouslyFound.add(e.getDocumentId());
+                    //LOGGER.error("\"Verifying entry\",\"{}\",\"{}\",\"{}\",\"{}\",\"{}\",\"{}\"", dependency.getFileName(),
+                    //e.getVendor(), e.getProduct(), confidence.toString(), e.getSearchScore(), filter);
                     if (verifyEntry(e, dependency)) {
                         final String vendor = e.getVendor();
                         final String product = e.getProduct();
