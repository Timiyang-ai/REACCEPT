diff --git a/old_product.java b/new_product.java
index 5c6e21b..e336b52 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,10 +1,22 @@
 private Message encodeDecode(final Message m1) throws Exception {
-        AtomicReference<Message> m2 = new AtomicReference<Message>();
-        TomP2POutbound encoder = new TomP2POutbound(true, new DefaultSignatureFactory());
-        CompositeByteBuf buf = Unpooled.compositeBuffer();
-        ChannelHandlerContext ctx = mockChannelHandlerContext(buf, m2);
-        encoder.write(ctx, m1, null);
-        Decoder decoder = new Decoder(new DefaultSignatureFactory());
-        decoder.decode(ctx, buf, m1.getRecipient().createSocketTCP(), m1.getSender().createSocketTCP());
-        return decoder.message();
-    }
\ No newline at end of file
+		AtomicReference<Message> m2 = new AtomicReference<Message>();
+		final AlternativeCompositeByteBuf buf = AlternativeCompositeByteBuf.compBuffer();
+		TomP2POutbound encoder = new TomP2POutbound(true,
+				new DefaultSignatureFactory(), new CompByteBufAllocator() {
+					@Override
+					public AlternativeCompositeByteBuf compBuffer() {
+						return buf;
+					}
+					@Override
+					public AlternativeCompositeByteBuf compDirectBuffer() {
+						return buf;
+					}
+				});
+		
+		ChannelHandlerContext ctx = mockChannelHandlerContext(buf, m2);
+		encoder.write(ctx, m1, null);
+		Decoder decoder = new Decoder(new DefaultSignatureFactory());
+		decoder.decode(ctx, buf, m1.getRecipient().createSocketTCP(), m1
+				.getSender().createSocketTCP());
+		return decoder.message();
+	}
\ No newline at end of file
