diff --git a/old_test.java b/new_test.java
index 8a79d39..a1f0758 100644
--- a/old_test.java
+++ b/new_test.java
@@ -14,17 +14,25 @@
 		dataMap.put(new Number640(rnd), new Data(new byte[] { 4, 5, 6, 7 }));
 		dataMap.put(new Number640(rnd), new Data(new byte[] { 5, 6, 7, 8, 9 }));
 		m1.setDataMap(new DataMap(dataMap));
-		NavigableMap<Number640, Number160> keysMap = new TreeMap<Number640, Number160>();
-		keysMap.put(new Number640(rnd), new Number160(rnd));
-		keysMap.put(new Number640(rnd), new Number160(rnd));
-		keysMap.put(new Number640(rnd), new Number160(rnd));
-		m1.setKeyMap640(new KeyMap640(keysMap));
-		//
+		NavigableMap<Number640, Set<Number160>> keysMap = new TreeMap<Number640, Set<Number160>>();
+		Set<Number160> set = new HashSet<Number160>(1);
+		set.add(new Number160(rnd));
+		keysMap.put(new Number640(rnd), set);
+		set = new HashSet<Number160>(2);
+		set.add(new Number160(rnd));
+		set.add(new Number160(rnd));
+		keysMap.put(new Number640(rnd), set);
+		set = new HashSet<Number160>(3);
+		set.add(new Number160(rnd));
+		set.add(new Number160(rnd));
+		set.add(new Number160(rnd));
+		keysMap.put(new Number640(rnd), set);
+		m1.setKeyMap640Keys(new KeyMap640Keys(keysMap));
 
 		Message m2 = encodeDecode(m1);
 		Assert.assertEquals(true, m2.getPublicKey(0) != null);
 		Assert.assertEquals(false, m2.getDataMap(0) == null);
-		Assert.assertEquals(false, m2.getKeyMap640(0) == null);
+		Assert.assertEquals(false, m2.getKeyMap640Keys(0) == null);
 		Assert.assertEquals(true, m2.verified());
 		compareMessage(m1, m2);
 	}
\ No newline at end of file
