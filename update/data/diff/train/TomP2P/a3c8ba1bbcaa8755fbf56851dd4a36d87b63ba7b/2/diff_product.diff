diff --git a/old_product.java b/new_product.java
index a788c3e..b10cfee 100644
--- a/old_product.java
+++ b/new_product.java
@@ -5,7 +5,7 @@ public FutureDone<Pair<FutureRouting,FutureRouting>> bootstrap(final Collection<
         final FutureDone<Pair<FutureRouting,FutureRouting>> futureDone = new FutureDone<Pair<FutureRouting,FutureRouting>>();
 
         // first we find close peers to us
-        routingBuilder.setBootstrap(true);
+        routingBuilder.bootstrap(true);
 
         final FutureRouting futureRouting0 = routing(peerAddresses, routingBuilder, Type.REQUEST_1, cc);
         // to not become a Fachidiot (expert idiot), we need to know other peers
@@ -14,15 +14,19 @@ public FutureDone<Pair<FutureRouting,FutureRouting>> bootstrap(final Collection<
             @Override
             public void operationComplete(final FutureRouting future) throws Exception {
                 // setting this to null causes to search for a random number
-                routingBuilder.setLocationKey(null);
-                final FutureRouting futureRouting1 = routing(peerAddresses, routingBuilder, Type.REQUEST_1, cc);
-                futureRouting1.addListener(new BaseFutureAdapter<FutureRouting>() {
-					@Override
-                    public void operationComplete(FutureRouting future) throws Exception {
-						final Pair<FutureRouting,FutureRouting> pair = new Pair<FutureRouting, FutureRouting>(futureRouting0, futureRouting1);
-						futureDone.setDone(pair);
-                    }
-				});
+            	if(future.isSuccess()) {
+            		routingBuilder.locationKey(null);
+            		final FutureRouting futureRouting1 = routing(peerAddresses, routingBuilder, Type.REQUEST_1, cc);
+            		futureRouting1.addListener(new BaseFutureAdapter<FutureRouting>() {
+            			@Override
+            			public void operationComplete(FutureRouting future) throws Exception {
+            				final Pair<FutureRouting,FutureRouting> pair = new Pair<FutureRouting, FutureRouting>(futureRouting0, futureRouting1);
+            				futureDone.done(pair);
+            			}
+            		});
+            	} else {
+            		futureDone.failed(future);
+            	}
             }
         });
         return futureDone;
