diff --git a/old_test.java b/new_test.java
index d6c96a2..2978032 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,10 +3,11 @@
 		//This setup isn't relevant to this test
 		defaultSetup();
 		parameters.setInputDimensions(new int[] { 9, 5 });
+		parameters.setColumnDimensions(new int[] { 5, 5 });
 		initSP();
 		
 		////////////////////// Test not part of Python port /////////////////////
-		int[] result = sp.getNeighborsND(new SparseBinaryMatrix(new int[] { 9, 5 }), 2, 3, true);
+		int[] result = sp.getNeighborsND(new SparseBinaryMatrix(new int[] { 9, 5 }), 2, 3, true).toArray();
 		int[] expected = new int[] { 
 			0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
 			13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 
@@ -27,7 +28,7 @@
 		int y = 3;
 		int z = 2;
 		int columnIndex = layout.computeIndex(new int[] { z, y, x });
-		int[] neighbors = sp.getNeighborsND(layout, columnIndex, radius, true);
+		int[] neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		String expect = "[18, 19, 20, 21, 22, 23, 32, 33, 34, 36, 37, 46, 47, 48, 49, 50, 51]";
 		assertEquals(expect, ArrayUtils.print1DArray(neighbors));
 		
@@ -43,7 +44,7 @@
 		y = 0;
 		z = 3;
 		columnIndex = layout.computeIndex(new int[] { z, y, x });
-		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true);
+		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		expect = "[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, "
 				+ "27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, "
 				+ "52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, "
@@ -74,7 +75,7 @@
 		y = 6;
 		z = 2;
 		columnIndex = layout.computeIndex(new int[] { z, y, x, w });
-		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true);
+		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		
 		TIntHashSet trueNeighbors = new TIntHashSet();
 		for(int i = -radius;i <= radius;i++) {
@@ -104,7 +105,7 @@
 		layout.set(new int[] { 2, 4 }, new int[] { 1, 1 });
 		radius = 1;
 		columnIndex = 3;
-		int[] mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		int[] mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		TIntArrayList msk = new TIntArrayList(mask);
 		TIntArrayList neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -120,7 +121,7 @@
 		layout.set(new int[] { 1, 2, 4, 5 }, new int[] { 1, 1, 1, 1 });
 		radius = 2;
 		columnIndex = 3;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -136,7 +137,7 @@
 		layout.set(new int[] { 1, 2, 6, 7 }, new int[] { 1, 1, 1, 1 });
 		radius = 2;
 		columnIndex = 0;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -152,7 +153,7 @@
 		layout.set(new int[] { 0, 1, 2, 3, 4, 5, 7 }, new int[] { 1, 1, 1, 1, 1, 1, 1 });
 		radius = 20;
 		columnIndex = 6;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -179,7 +180,7 @@
 		}
 		radius = 1;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -206,7 +207,7 @@
 		}
 		radius = 2;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -233,7 +234,7 @@
 		}
 		radius = 7;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
@@ -260,7 +261,7 @@
 		}
 		radius = 1;
 		columnIndex = layout.getMaxIndex();
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true);
+		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
