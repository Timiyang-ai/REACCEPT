diff --git a/old_test.java b/new_test.java
index 0d39e5a..991a954 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,12 +3,12 @@
         HashMap<String, NamedTuple> classifierInput = new HashMap<>();
         NamedTuple classifiers = new NamedTuple(new String[] { "one", "two" }, 1, 2);
         Object layerInput = new Object();
-        int[] sdr = new int[20];
+        int[] sdr = new int[] { 20 };
         int[] encoding = new int[40];
         int[] activeColumns = new int[25];
         int[] sparseActives = new int[2];
-        int[] previousPrediction = new int[4];
-        int[] currentPrediction = new int[8];
+        Set<Cell> previousPrediction = new LinkedHashSet<>(); previousPrediction.add(new Cell(new Column(4, 0), 2));
+        Set<Cell> currentPrediction = new LinkedHashSet<>(); currentPrediction.add(new Cell(new Column(4, 0), 3));
         ClassifierResult<Object> classification = new ClassifierResult<>();
         double anomalyScore = 0.48d;
         Object customObject = new Network("", NetworkTestHarness.getNetworkDemoTestEncoderParams());
@@ -18,10 +18,10 @@
         .layerInput(layerInput)
         .sdr(sdr)
         .encoding(encoding)
-        .activeColumns(activeColumns)
-        .sparseActives(sparseActives)
-        .predictedColumns(previousPrediction)
-        .predictedColumns(currentPrediction) // last prediction internally becomes previous
+        .feedForwardActiveColumns(activeColumns)
+        .feedForwardSparseActives(sparseActives)
+        .predictiveCells(previousPrediction)
+        .predictiveCells(currentPrediction) // last prediction internally becomes previous
         .classifiers(classifiers)
         .storeClassification("foo", classification)
         .anomalyScore(anomalyScore)
@@ -39,17 +39,17 @@
         assertTrue(Arrays.equals(copy.getEncoding(), encoding));
         assertFalse(copy.getEncoding() == encoding);
         
-        assertTrue(Arrays.equals(copy.getActiveColumns(), activeColumns));
-        assertFalse(copy.getActiveColumns() == activeColumns);
+        assertTrue(Arrays.equals(copy.getFeedForwardActiveColumns(), activeColumns));
+        assertFalse(copy.getFeedForwardActiveColumns() == activeColumns);
         
-        assertTrue(Arrays.equals(copy.getSparseActives(), sparseActives));
-        assertFalse(copy.getSparseActives() == sparseActives);
+        assertTrue(Arrays.equals(copy.getFeedForwardSparseActives(), sparseActives));
+        assertFalse(copy.getFeedForwardSparseActives() == sparseActives);
         
-        assertTrue(Arrays.equals(copy.getPredictedColumns(), currentPrediction));
-        assertFalse(copy.getPredictedColumns() == currentPrediction);
+        assertTrue(copy.getPredictiveCells().equals(currentPrediction));
+        assertFalse(copy.getPredictiveCells() == currentPrediction);
         
-        assertTrue(Arrays.equals(copy.getPreviousPrediction(), previousPrediction));
-        assertFalse(copy.getPreviousPrediction() == previousPrediction);
+        assertTrue(copy.getPreviousPredictiveCells().equals(previousPrediction));
+        assertFalse(copy.getPreviousPredictiveCells() == previousPrediction);
         
         assertTrue(copy.getClassifiers().equals(classifiers));
         assertFalse(copy.getClassifiers() == classifiers);
