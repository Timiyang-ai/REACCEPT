diff --git a/old_test.java b/new_test.java
index 2978032..a3d37fb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -7,7 +7,7 @@
 		initSP();
 		
 		////////////////////// Test not part of Python port /////////////////////
-		int[] result = sp.getNeighborsND(new SparseBinaryMatrix(new int[] { 9, 5 }), 2, 3, true).toArray();
+		int[] result = SpatialPooler.getNeighborsND(mem, 2, 3, true).toArray();
 		int[] expected = new int[] { 
 			0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
 			13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 
@@ -21,14 +21,14 @@
 		defaultSetup();
 		int[] dimensions = new int[] { 5, 7, 2 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		SparseBinaryMatrix layout = new SparseBinaryMatrix(dimensions);
 		int radius = 1;
 		int x = 1;
 		int y = 3;
 		int z = 2;
-		int columnIndex = layout.computeIndex(new int[] { z, y, x });
-		int[] neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		int columnIndex = mem.getInputMatrix().computeIndex(new int[] { z, y, x });
+		int[] neighbors = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		String expect = "[18, 19, 20, 21, 22, 23, 32, 33, 34, 36, 37, 46, 47, 48, 49, 50, 51]";
 		assertEquals(expect, ArrayUtils.print1DArray(neighbors));
 		
@@ -37,14 +37,14 @@
 		defaultSetup();
 		dimensions = new int[] { 5, 7, 9 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
 		radius = 3;
 		x = 0;
 		y = 0;
 		z = 3;
-		columnIndex = layout.computeIndex(new int[] { z, y, x });
-		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		columnIndex = mem.getInputMatrix().computeIndex(new int[] { z, y, x });
+		neighbors = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		expect = "[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, "
 				+ "27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, "
 				+ "52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, "
@@ -67,15 +67,15 @@
 		defaultSetup();
 		dimensions = new int[] { 5, 10, 7, 6 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
 		radius = 4;
 		int w = 2;
 		x = 5;
 		y = 6;
 		z = 2;
-		columnIndex = layout.computeIndex(new int[] { z, y, x, w });
-		neighbors = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		columnIndex = mem.getInputMatrix().computeIndex(new int[] { z, y, x, w });
+		neighbors = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		
 		TIntHashSet trueNeighbors = new TIntHashSet();
 		for(int i = -radius;i <= radius;i++) {
@@ -86,7 +86,7 @@
 						int yprime = (int)ArrayUtils.positiveRemainder((y + j), dimensions[1]);
 						int xprime = (int)ArrayUtils.positiveRemainder((x + k), dimensions[2]);
 						int wprime = (int)ArrayUtils.positiveRemainder((w + m), dimensions[3]);
-						trueNeighbors.add(layout.computeIndex(new int[] { zprime, yprime, xprime, wprime }));
+						trueNeighbors.add(mem.getInputMatrix().computeIndex(new int[] { zprime, yprime, xprime, wprime }));
 					}
 				}
 			}
@@ -101,71 +101,72 @@
 		dimensions = new int[] { 8 };
 		parameters.setInputDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
-		layout.set(new int[] { 2, 4 }, new int[] { 1, 1 });
+		SparseBinaryMatrix sbm = (SparseBinaryMatrix)mem.getInputMatrix();
+		sbm.set(new int[] { 2, 4 }, new int[] { 1, 1 });
 		radius = 1;
 		columnIndex = 3;
-		int[] mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		int[] mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		TIntArrayList msk = new TIntArrayList(mask);
 		TIntArrayList neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//////
 		defaultSetup();
 		dimensions = new int[] { 8 };
 		parameters.setInputDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
-		layout.set(new int[] { 1, 2, 4, 5 }, new int[] { 1, 1, 1, 1 });
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
+		sbm.set(new int[] { 1, 2, 4, 5 }, new int[] { 1, 1, 1, 1 });
 		radius = 2;
 		columnIndex = 3;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//Wrap around
 		defaultSetup();
 		dimensions = new int[] { 8 };
 		parameters.setInputDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
-		layout.set(new int[] { 1, 2, 6, 7 }, new int[] { 1, 1, 1, 1 });
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
+		sbm.set(new int[] { 1, 2, 6, 7 }, new int[] { 1, 1, 1, 1 });
 		radius = 2;
 		columnIndex = 0;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//Radius too big
 		defaultSetup();
 		dimensions = new int[] { 8 };
 		parameters.setInputDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
-		layout.set(new int[] { 0, 1, 2, 3, 4, 5, 7 }, new int[] { 1, 1, 1, 1, 1, 1, 1 });
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
+		sbm.set(new int[] { 0, 1, 2, 3, 4, 5, 7 }, new int[] { 1, 1, 1, 1, 1, 1, 1 });
 		radius = 20;
 		columnIndex = 6;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//These are all the same tests from 2D
 		defaultSetup();
 		dimensions = new int[] { 6, 5 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
 		int[][] input = new int[][] { {0, 0, 0, 0, 0},
 		                          {0, 0, 0, 0, 0},
 		                          {0, 1, 1, 1, 0},
@@ -175,24 +176,25 @@
 		for(int i = 0;i < input.length;i++) {
 			for(int j = 0;j < input[i].length;j++) {
 				if(input[i][j] == 1) 
-					layout.set(layout.computeIndex(new int[] { i, j }), 1);
+					sbm.set(sbm.computeIndex(new int[] { i, j }), 1);
 			}
 		}
 		radius = 1;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		////////
 		defaultSetup();
 		dimensions = new int[] { 6, 5 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
 		input = new int[][] { {0, 0, 0, 0, 0},
 						      {1, 1, 1, 1, 1},
 						      {1, 1, 1, 1, 1},
@@ -202,24 +204,25 @@
 		for(int i = 0;i < input.length;i++) {
 			for(int j = 0;j < input[i].length;j++) {
 				if(input[i][j] == 1) 
-					layout.set(layout.computeIndex(new int[] { i, j }), 1);
+					sbm.set(sbm.computeIndex(new int[] { i, j }), 1);
 			}
 		}
 		radius = 2;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//Radius too big
 		defaultSetup();
 		dimensions = new int[] { 6, 5 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
 		input = new int[][] { {1, 1, 1, 1, 1},
 						      {1, 1, 1, 1, 1},
 						      {1, 1, 1, 1, 1},
@@ -229,24 +232,25 @@
 		for(int i = 0;i < input.length;i++) {
 			for(int j = 0;j < input[i].length;j++) {
 				if(input[i][j] == 1) 
-					layout.set(layout.computeIndex(new int[] { i, j }), 1);
+					sbm.set(sbm.computeIndex(new int[] { i, j }), 1);
 			}
 		}
 		radius = 7;
 		columnIndex = 3*5 + 2;
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 		
 		//Wrap-around
 		defaultSetup();
 		dimensions = new int[] { 6, 5 };
 		parameters.setInputDimensions(dimensions);
+		parameters.setColumnDimensions(dimensions);
 		initSP();
-		layout = new SparseBinaryMatrix(dimensions);
+		sbm = (SparseBinaryMatrix)mem.getInputMatrix();
 		input = new int[][] { {1, 0, 0, 1, 1},
 						      {0, 0, 0, 0, 0},
 						      {0, 0, 0, 0, 0},
@@ -256,15 +260,15 @@
 		for(int i = 0;i < input.length;i++) {
 			for(int j = 0;j < input[i].length;j++) {
 				if(input[i][j] == 1) 
-					layout.set(layout.computeIndex(new int[] { i, j }), 1);
+					sbm.set(sbm.computeIndex(new int[] { i, j }), 1);
 			}
 		}
 		radius = 1;
-		columnIndex = layout.getMaxIndex();
-		mask = sp.getNeighborsND(layout, columnIndex, radius, true).toArray();
+		columnIndex = sbm.getMaxIndex();
+		mask = SpatialPooler.getNeighborsND(mem, columnIndex, radius, true).toArray();
 		msk = new TIntArrayList(mask);
 		neg = new TIntArrayList(ArrayUtils.range(0, dimensions[0]));
 		neg.removeAll(msk);
-		assertTrue(layout.all(mask));
-		assertFalse(layout.any(neg));
+		assertTrue(sbm.all(mask));
+		assertFalse(sbm.any(neg));
 	}
\ No newline at end of file
