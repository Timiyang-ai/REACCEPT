diff --git a/old_product.java b/new_product.java
index cfe6a2a..a0d3d99 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,13 +1,13 @@
-public <M extends SparseMatrix> TIntArrayList getNeighborsND(M poolerMem, int columnIndex, int radius, boolean wrapAround) {
-		int[] columnCoords = poolerMem.computeCoordinates(columnIndex);
+public static TIntArrayList getNeighborsND(SpatialLattice l, int columnIndex, int radius, boolean wrapAround) {
+		int[] columnCoords = l.getInputMatrix().computeCoordinates(columnIndex);
 		List<int[]> dimensionCoords = new ArrayList<int[]>();
-		for(int i = 0;i < inputDimensions.length;i++) {
+		for(int i = 0;i < l.getInputDimensions().length;i++) {
 			int[] range = ArrayUtils.range(columnCoords[i] - radius, columnCoords[i] + radius + 1);
 			int[] curRange = new int[range.length];
 			
 			if(wrapAround) {
 				for(int j = 0;j < curRange.length;j++) {
-					curRange[j] = (int)ArrayUtils.positiveRemainder(range[j], inputDimensions[i]);
+					curRange[j] = (int)ArrayUtils.positiveRemainder(range[j], l.getInputDimensions()[i]);
 				}
 			}else{
 				curRange = range;
@@ -19,7 +19,7 @@ public <M extends SparseMatrix> TIntArrayList getNeighborsND(M poolerMem, int co
 		List<TIntList> neighborList = ArrayUtils.dimensionsToCoordinateList(dimensionCoords);
 		TIntArrayList neighbors = new TIntArrayList(neighborList.size());
 		for(int i = 0;i < neighborList.size();i++) {
-			int flatIndex = poolerMem.computeIndex(neighborList.get(i).toArray());
+			int flatIndex = l.getInputMatrix().computeIndex(neighborList.get(i).toArray());
 			if(flatIndex == columnIndex) continue;
 			neighbors.add(flatIndex);
 		}
