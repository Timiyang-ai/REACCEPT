diff --git a/old_product.java b/new_product.java
index 5a3d0b0..d32c671 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,8 +1,10 @@
 @Override
     public int parseExtension(byte[] message, int pointer) {
-
+        SignatureAndHashAlgorithmsExtensionMessage extension;
         if (extensionMessage == null) {
-            extensionMessage = new SignatureAndHashAlgorithmsExtensionMessage();
+            extension = new SignatureAndHashAlgorithmsExtensionMessage();
+        } else {
+            extension = (SignatureAndHashAlgorithmsExtensionMessage) extensionMessage;
         }
         // check if correct extension is passed
         if (message[pointer] != (byte) 0 && message[pointer + 1] != (byte) 13) {
@@ -10,21 +12,21 @@
                     "Extension isn't a SignatureAndHashAlgorithms Extension. First Bytes should be '0' and '13'");
         }
         // set extension type
-        extensionMessage.setExtensionType(ExtensionType.SIGNATURE_AND_HASH_ALGORITHMS.getValue());
+        extension.setExtensionType(ExtensionType.SIGNATURE_AND_HASH_ALGORITHMS.getValue());
         int newPointer = pointer + ExtensionByteLength.TYPE;
 
         // set extension and signature and hash algorithm extension length
-        extensionMessage.setExtensionLength(ArrayConverter.bytesToInt(new byte[] { message[newPointer],
+        extension.setExtensionLength(ArrayConverter.bytesToInt(new byte[] { message[newPointer],
                 message[newPointer + 1] }));
         newPointer += ExtensionByteLength.EXTENSIONS;
 
-        extensionMessage.setSignatureAndHashAlgorithmsLength(ArrayConverter.bytesToInt(new byte[] {
-                message[newPointer], message[newPointer + 1] }));
+        extension.setSignatureAndHashAlgorithmsLength(ArrayConverter.bytesToInt(new byte[] { message[newPointer],
+                message[newPointer + 1] }));
         newPointer += SIGNATURE_AND_HASH_ALGORITHMS_LENGTH;
 
         // create the SignatureAndHashAlgorithmsConfig (List) and the byte
         // values of them
-        int pairingsCount = extensionMessage.getSignatureAndHashAlgorithmsLength().getValue() / 2;
+        int pairingsCount = extension.getSignatureAndHashAlgorithmsLength().getValue() / 2;
         ArrayList<SignatureAndHashAlgorithm> signatureAndHashConfig = new ArrayList<>();
         ByteArrayOutputStream signatureAndHashBytes = new ByteArrayOutputStream();
 
@@ -32,13 +34,11 @@
             signatureAndHashConfig.add(new SignatureAndHashAlgorithm(new byte[] { message[i], message[i + 1] }));
             signatureAndHashBytes.write(message, i, 2);
         }
-        extensionMessage.setSignatureAndHashAlgorithms(signatureAndHashBytes.toByteArray());
-        extensionMessage.setSignatureAndHashAlgorithmsConfig(signatureAndHashConfig);
-
+        extension.setSignatureAndHashAlgorithms(signatureAndHashBytes.toByteArray());
         // the extension bytes are exactly the same, than in the message. Thus
         // we copy them.
-        newPointer += extensionMessage.getSignatureAndHashAlgorithmsLength().getValue();
-        extensionMessage.setExtensionBytes(Arrays.copyOfRange(message, pointer, newPointer));
-
+        newPointer += extension.getSignatureAndHashAlgorithmsLength().getValue();
+        extension.setExtensionBytes(Arrays.copyOfRange(message, pointer, newPointer));
+        extensionMessage = extension;
         return newPointer;
     }
\ No newline at end of file
