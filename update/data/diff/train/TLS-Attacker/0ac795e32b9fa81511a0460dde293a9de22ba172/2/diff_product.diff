diff --git a/old_product.java b/new_product.java
index deb0ea2..1b0e1e3 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,54 +1,54 @@
 @Override
     public void applyDelegate(Config config) {
 
-        if ((acceptingConnectionEnds == null) || (connectingConnectionEnds == null)) {
-            // Though {accepting,connecting}ConnectionEnds are required
-            // parameters we can get here if we call applyDelegate
-            // manually, e.g. in tests.
-            throw new ParameterException("{accepting|connecting}ConnectionEnds is empty!");
+        if ((inboundConnectionStr == null) || (outboundConnectionStr == null)) {
+            // Though {inbound, outbound}Connections are required parameters we
+            // can get
+            // here if we call applyDelegate manually, e.g. in tests.
+            throw new ParameterException("{inbound|outbound}ConnectionStr is empty!");
         }
 
-        config.clearConnectionEnds();
-
-        for (String conEndStr : acceptingConnectionEnds) {
-            ServerConnectionEnd serverConEnd = new ServerConnectionEnd();
-
-            String[] parsedPort = conEndStr.split(":");
-            switch (parsedPort.length) {
-                case 1:
-                    serverConEnd.setAlias("accept:" + parsedPort[0]);
-                    serverConEnd.setPort(parsePort(parsedPort[0]));
-                    break;
-                case 2:
-                    serverConEnd.setAlias(parsedPort[0]);
-                    serverConEnd.setPort(parsePort(parsedPort[1]));
-                    break;
-                default:
-                    throw new ConfigurationException("Could not parse provided accepting connection" + " end: "
-                            + conEndStr + ". Expected [CONNECTION_ALIAS:]<PORT>");
-            }
-            config.addConnectionEnd(serverConEnd);
+        InboundConnection inboundConnection = config.getDefaultServerConnection();
+        if (inboundConnection == null) {
+            inboundConnection = new InboundConnection();
+            config.setDefaultServerConnection(inboundConnection);
         }
+        String[] parsedPort = inboundConnectionStr.split(":");
+        switch (parsedPort.length) {
+            case 1:
+                inboundConnection.setAlias("accept:" + parsedPort[0]);
+                inboundConnection.setPort(parsePort(parsedPort[0]));
+                break;
+            case 2:
+                inboundConnection.setAlias(parsedPort[0]);
+                inboundConnection.setPort(parsePort(parsedPort[1]));
+                break;
+            default:
+                throw new ConfigurationException("Could not parse provided accepting connection" + " end: "
+                        + inboundConnectionStr + ". Expected [CONNECTION_ALIAS:]<PORT>");
+        }
+        config.setDefaultServerConnection(inboundConnection);
 
-        for (String conEndStr : connectingConnectionEnds) {
-            ClientConnectionEnd clientConEnd = new ClientConnectionEnd();
-
-            String[] parsedHost = conEndStr.split(":");
-            switch (parsedHost.length) {
-                case 2:
-                    clientConEnd.setHostname(parsedHost[0]);
-                    clientConEnd.setPort(parsePort(parsedHost[1]));
-                    clientConEnd.setAlias(conEndStr);
-                    break;
-                case 3:
-                    clientConEnd.setAlias(parsedHost[0]);
-                    clientConEnd.setHostname(parsedHost[1]);
-                    clientConEnd.setPort(parsePort(parsedHost[2]));
-                    break;
-                default:
-                    throw new ConfigurationException("Could not parse provided server address: " + conEndStr
-                            + ". Expected [CONNECTION_ALIAS:]<HOSTNAME>:<PORT>");
-            }
-            config.addConnectionEnd(clientConEnd);
+        OutboundConnection outboundConnection = config.getDefaultClientConnection();
+        if (outboundConnection == null) {
+            outboundConnection = new OutboundConnection();
+            config.setDefaultClientConnection(outboundConnection);
+        }
+        String[] parsedHost = outboundConnectionStr.split(":");
+        switch (parsedHost.length) {
+            case 2:
+                outboundConnection.setHostname(parsedHost[0]);
+                outboundConnection.setPort(parsePort(parsedHost[1]));
+                outboundConnection.setAlias(outboundConnectionStr);
+                break;
+            case 3:
+                outboundConnection.setAlias(parsedHost[0]);
+                outboundConnection.setHostname(parsedHost[1]);
+                outboundConnection.setPort(parsePort(parsedHost[2]));
+                break;
+            default:
+                throw new ConfigurationException("Could not parse provided server address: " + outboundConnectionStr
+                        + ". Expected [CONNECTION_ALIAS:]<HOSTNAME>:<PORT>");
         }
+        config.setDefaultClientConnection(outboundConnection);
     }
\ No newline at end of file
