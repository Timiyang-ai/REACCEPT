diff --git a/old_product.java b/new_product.java
index ebcc134..c02c3d2 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,6 @@
-public static List<ICEPoint> readPoints(String namedCurve) {
-        String namedCurveLow = namedCurve.toLowerCase();
+public static List<ICEPoint> readPoints(NamedGroup group) {
+        EllipticCurve curve = CurveFactory.getCurve(group);
+        String namedCurveLow = group.name().toLowerCase();
         String fileName = "points_" + namedCurveLow + ".txt";
 
         BufferedReader br = new BufferedReader(new InputStreamReader(ICEPointReader.class.getClassLoader()
@@ -13,18 +14,25 @@ public static List<ICEPoint> readPoints(String namedCurve) {
                     int order = Integer.parseInt(nums[0]);
                     BigInteger x = new BigInteger(nums[1], 16);
                     BigInteger y = new BigInteger(nums[2], 16);
-                    points.add(new ICEPoint(order, x, y));
+                    points.add(new ICEPoint(x, y, curve, order));
                 }
             }
             Collections.sort(points, new ICEPointCopmparator());
             if (LOGGER.isDebugEnabled()) {
                 LOGGER.debug("Using the following curves and points");
                 for (ICEPoint p : points) {
-                    LOGGER.debug(p.getOrder() + " , " + p.getX().toString(16) + " , " + p.getY().toString(16));
+                    LOGGER.debug(p.getOrder() + " , " + p.getX().getData().toString(16) + " , "
+                            + p.getY().getData().toString(16));
                 }
             }
             return points;
         } catch (IOException | NumberFormatException ex) {
             throw new ConfigurationException(ex.getLocalizedMessage(), ex);
+        } finally {
+            try {
+                br.close();
+            } catch (IOException ex) {
+                LOGGER.error("Failed to close stream", ex);
+            }
         }
     }
\ No newline at end of file
