diff --git a/old_product.java b/new_product.java
index 43e6bd7..73f1554 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,8 +1,38 @@
-public static LPResult solve(double[] linearObjectiveFunction, List<LPSolver.LPConstraint> linearConstraintsList, double[] lowBoundsOfVariables, double[] upBoundsOfVariables, boolean[] strictlyIntegerVariables, Integer scalingMode) {
-        try {
-            return _solve(linearObjectiveFunction, linearConstraintsList, lowBoundsOfVariables, upBoundsOfVariables, strictlyIntegerVariables, scalingMode);
-        } 
-        catch (LpSolveException ex) {
-            throw new RuntimeException(ex);
+public static LPResult solve(double[] linearObjectiveFunction, List<LPSolver.LPConstraint> linearConstraintsList, boolean nonNegative, boolean maximize) {
+        int m = linearConstraintsList.size();
+
+        List<LinearConstraint> constraints = new ArrayList<>(m);
+        for(LPSolver.LPConstraint constraint : linearConstraintsList) {
+            String sign = constraint.getSign();
+            Relationship relationship = null;
+            if(">=".equals(sign)) {
+                relationship = Relationship.GEQ;
+            }
+            else if("<=".equals(sign)) {
+                relationship = Relationship.LEQ;
+            }
+            else if("=".equals(sign)) {
+                relationship = Relationship.EQ;
+            }
+            constraints.add(
+                    new LinearConstraint(constraint.getContraintBody(),
+                    relationship,
+                    constraint.getValue())
+            );
         }
+
+        SimplexSolver solver = new SimplexSolver();
+        PointValuePair solution = solver.optimize(
+                new LinearObjectiveFunction(linearObjectiveFunction, 0.0),
+                new LinearConstraintSet(constraints),
+                maximize?GoalType.MAXIMIZE:GoalType.MINIMIZE,
+                new NonNegativeConstraint(nonNegative),
+                PivotSelectionRule.BLAND
+        );
+
+        LPResult result = new LPResult();
+        result.setObjectiveValue(solution.getValue());
+        result.setVariableValues(solution.getPoint());
+
+        return result;
     }
\ No newline at end of file
