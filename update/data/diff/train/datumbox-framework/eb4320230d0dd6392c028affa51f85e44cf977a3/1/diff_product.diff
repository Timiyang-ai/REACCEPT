diff --git a/old_product.java b/new_product.java
index d92641b..f7b711b 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,36 +1,24 @@
 public void predict(Dataframe newData) {
         logger.info("predict()");
 
-        Modeler.TrainingParameters trainingParameters = knowledgeBase.getTrainingParameters();
-        Configuration conf = knowledgeBase.getConf();
+        //load all trainables on the bundles
+        initBundle();
 
-        AbstractTrainer.AbstractTrainingParameters dtParams = trainingParameters.getDataTransformerTrainingParameters();
-        boolean transformData = dtParams!=null;
-        if(transformData) {
-            if(dataTransformer==null) {
-                dataTransformer = MLBuilder.load(dtParams.getTClass(), dbName, conf);
-            }
-            setParallelized(dataTransformer);
+        //set the parallized flag to all algorithms
+        bundle.setParallelized(isParallelized());
+
+        //run the pipeline
+        AbstractTransformer dataTransformer = (AbstractTransformer) bundle.get("dataTransformer");
+        if(dataTransformer != null) {
             dataTransformer.transform(newData);
         }
-
-        AbstractTrainer.AbstractTrainingParameters fsParams = trainingParameters.getFeatureSelectorTrainingParameters();
-        boolean selectFeatures = fsParams!=null;
-        if(selectFeatures) {
-            if(featureSelector==null) {
-                featureSelector = MLBuilder.load(fsParams.getTClass(), dbName, conf);
-            }
-            setParallelized(featureSelector);
+        AbstractFeatureSelector featureSelector = (AbstractFeatureSelector) bundle.get("featureSelector");
+        if(featureSelector != null) {
             featureSelector.transform(newData);
         }
-
-        if(modeler==null) {
-            modeler = MLBuilder.load(trainingParameters.getModelerTrainingParameters().getTClass(), dbName, conf);
-        }
-        setParallelized(modeler);
+        AbstractModeler modeler = (AbstractModeler) bundle.get("modeler");
         modeler.predict(newData);
-
-        if(transformData) {
+        if(dataTransformer != null) {
             dataTransformer.denormalize(newData);
         }
     }
\ No newline at end of file
