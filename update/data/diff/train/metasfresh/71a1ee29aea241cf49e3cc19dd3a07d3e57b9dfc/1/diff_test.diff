diff --git a/old_test.java b/new_test.java
index d95480c..4e4df7c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -11,7 +11,7 @@
 				.quantity(olderStockQty)
 				.date(t1)
 				.build();
-		final Candidate persistedOlderStockCandidate = candidateChangeHandler.updateStock(olderStockCandidate);
+		candidateChangeHandler.updateStock(olderStockCandidate);
 
 		final BigDecimal supplyQty = new BigDecimal("23");
 
@@ -26,13 +26,15 @@
 				.build();
 		candidateChangeHandler.onSupplyCandidateNewOrChange(candidate);
 
-		final List<I_MD_Candidate> records = retriveRecords();
+		final List<I_MD_Candidate> records = DispoTestUtils.retrieveAllRecords();
 		assertThat(records.size(), is(3));
-		final I_MD_Candidate stockRecord = records.stream().filter(r -> r.getMD_Candidate_Type().equals(Type.STOCK.toString()) && r.getMD_Candidate_ID() != persistedOlderStockCandidate.getId()).findFirst().get();
-		final I_MD_Candidate supplyRecord = records.stream().filter(r -> r.getMD_Candidate_Type().equals(Type.SUPPLY.toString())).findFirst().get();
+		final I_MD_Candidate stockRecord = DispoTestUtils.filter(Type.STOCK, t2).get(0);
+		final I_MD_Candidate supplyRecord = DispoTestUtils.filter(Type.SUPPLY).get(0);
 
 		assertThat(supplyRecord.getQty(), comparesEqualTo(supplyQty));
 		assertThat(supplyRecord.getMD_Candidate_SubType(), is(SubType.PRODUCTION.toString()));
 		assertThat(stockRecord.getQty(), comparesEqualTo(new BigDecimal("34")));
 		assertThat(supplyRecord.getMD_Candidate_Parent_ID(), is(stockRecord.getMD_Candidate_ID()));
+
+		assertThat(supplyRecord.getSeqNo(), is(stockRecord.getSeqNo() + 1)); // when we sort by SeqNo, the stock needs to be first and thus have the smaller value
 	}
\ No newline at end of file
