diff --git a/old_test.java b/new_test.java
index 70d6b41..a97aa5f 100644
--- a/old_test.java
+++ b/new_test.java
@@ -16,7 +16,7 @@
 					.build();
 
 			candidate = Candidate.builder()
-					.type(Type.STOCK)
+					.type(CandidateType.STOCK)
 					.clientId(org.getAD_Client_ID())
 					.orgId(org.getAD_Org_ID())
 					.materialDescr(materialDescr)
@@ -27,7 +27,7 @@
 
 			earlierCandidate = candidateRepository
 					.addOrUpdateOverwriteStoredSeqNo(Candidate.builder()
-							.type(Type.STOCK)
+							.type(CandidateType.STOCK)
 							.clientId(org.getAD_Client_ID())
 							.orgId(org.getAD_Org_ID())
 							.materialDescr(earlierMaterialDescr)
@@ -36,7 +36,7 @@
 			final MaterialDescriptor laterMaterialDescr = materialDescr.withDate(t3);
 
 			final Candidate laterCandidate = Candidate.builder()
-					.type(Type.STOCK)
+					.type(CandidateType.STOCK)
 					.clientId(org.getAD_Client_ID())
 					.orgId(org.getAD_Org_ID())
 					.materialDescr(laterMaterialDescr)
@@ -48,7 +48,7 @@
 					.withDate(t4);
 
 			evenLaterCandidate = Candidate.builder()
-					.type(Type.STOCK)
+					.type(CandidateType.STOCK)
 					.clientId(org.getAD_Client_ID())
 					.orgId(org.getAD_Org_ID())
 					.materialDescr(evenLatermaterialDescr)
@@ -59,7 +59,7 @@
 					.withWarehouseId(OTHER_WAREHOUSE_ID);
 
 			evenLaterCandidateWithDifferentWarehouse = Candidate.builder()
-					.type(Type.STOCK)
+					.type(CandidateType.STOCK)
 					.clientId(org.getAD_Client_ID())
 					.orgId(org.getAD_Org_ID())
 					.materialDescr(evenLatermaterialDescrWithDifferentWarehouse)
@@ -83,7 +83,7 @@
 		assertThat(earlierCandidateAfterChange.getQuantity()).isEqualTo(earlierCandidate.getQuantity()); // quantity shall be unchanged
 		assertThat(earlierCandidateAfterChange.getGroupId()).isEqualTo(earlierCandidate.getGroupId()); // basically the same candidate
 
-		final I_MD_Candidate candidateRecordAfterChange = DispoTestUtils.filter(Type.STOCK, t2).get(0); // candidateRepository.retrieveExact(candidate).get();
+		final I_MD_Candidate candidateRecordAfterChange = DispoTestUtils.filter(CandidateType.STOCK, t2).get(0); // candidateRepository.retrieveExact(candidate).get();
 		assertThat(candidateRecordAfterChange.getQty()).isEqualByComparingTo("10"); // quantity shall be unchanged, because that method shall only update *later* records
 		assertThat(candidateRecordAfterChange.getMD_Candidate_GroupId(), not(is(earlierCandidate.getGroupId())));
 
@@ -92,11 +92,11 @@
 		assertThat(laterCandidateAfterChange.getQuantity()).isEqualByComparingTo("13"); // quantity shall be plus 3
 		assertThat(laterCandidateAfterChange.getGroupId()).isEqualTo(earlierCandidate.getGroupId());
 
-		final I_MD_Candidate evenLaterCandidateRecordAfterChange = DispoTestUtils.filter(Type.STOCK, t4, PRODUCT_ID, WAREHOUSE_ID).get(0); // candidateRepository.retrieveExact(evenLaterCandidate).get();
+		final I_MD_Candidate evenLaterCandidateRecordAfterChange = DispoTestUtils.filter(CandidateType.STOCK, t4, PRODUCT_ID, WAREHOUSE_ID).get(0); // candidateRepository.retrieveExact(evenLaterCandidate).get();
 		assertThat(evenLaterCandidateRecordAfterChange.getQty()).isEqualByComparingTo("15"); // quantity shall be plus 3 too
 		assertThat(evenLaterCandidateRecordAfterChange.getMD_Candidate_GroupId()).isEqualTo(earlierCandidate.getGroupId());
 
-		final I_MD_Candidate evenLaterCandidateWithDifferentWarehouseAfterChange = DispoTestUtils.filter(Type.STOCK, t4, PRODUCT_ID, OTHER_WAREHOUSE_ID).get(0); // candidateRepository.retrieveExact(evenLaterCandidateWithDifferentWarehouse).get();
+		final I_MD_Candidate evenLaterCandidateWithDifferentWarehouseAfterChange = DispoTestUtils.filter(CandidateType.STOCK, t4, PRODUCT_ID, OTHER_WAREHOUSE_ID).get(0); // candidateRepository.retrieveExact(evenLaterCandidateWithDifferentWarehouse).get();
 		assertThat(evenLaterCandidateWithDifferentWarehouseAfterChange.getQty()).isEqualByComparingTo("12"); // quantity shall be unchanged, because we changed another warehouse and this one should not have been matched
 		assertThat(evenLaterCandidateWithDifferentWarehouseAfterChange.getMD_Candidate_GroupId(), not(is(earlierCandidate.getGroupId())));
 
