diff --git a/old_product.java b/new_product.java
index b7fccad..cbd0bae 100644
--- a/old_product.java
+++ b/new_product.java
@@ -34,36 +34,32 @@ public UnassignResult unassignCandidate(@NonNull final AssignableInvoiceCandidat
 				pair -> pair.getRefundInvoiceCandidate().getRefundContract());
 
 		final List<RefundInvoiceCandidate> matchingRefundCandidates = refundInvoiceCandidateService.retrieveMatchingRefundCandidates(
-				assignableInvoiceCandidate, refundContract);
+				assignableInvoiceCandidate, refundContract)
+				.stream()
+				.filter(r -> !r.getAssignedQuantity().isZero())
+				.collect(ImmutableList.toImmutableList());
 
 		if (matchingRefundCandidates.size() > 1)
 		{
 			final UnassignResultBuilder resultBuilder = result.toBuilder();
 
-//			final Comparator<UnassignedPairOfCandidates> comparingByMinQty = Comparator
-//					.comparing(pair -> pair.getRefundInvoiceCandidate().getRefundConfig().getMinQty());
-//			final ImmutableList<UnassignedPairOfCandidates> sortedByMinQtyDesc = matchingRefundCandidates
-//					.stream()
-//					.sorted(comparingByMinQty.reversed())
-//					.collect(ImmutableList.toImmutableList());
-
 			final Comparator<RefundInvoiceCandidate> comparingByMinQty = Comparator
 					.comparing(r -> r.getRefundConfig().getMinQty());
-			final ImmutableList<RefundInvoiceCandidate> sortedByMinQtyDesc = matchingRefundCandidates
+			final ImmutableList<RefundInvoiceCandidate> sortedByMinQty = matchingRefundCandidates
 					.stream()
-					.sorted(comparingByMinQty.reversed())
+					.sorted(comparingByMinQty)
 					.collect(ImmutableList.toImmutableList());
 
-			final RefundInvoiceCandidate highestRefundInvoiceCandidate = sortedByMinQtyDesc
-					.get(sortedByMinQtyDesc.size() - 1);
+			final RefundInvoiceCandidate highestRefundInvoiceCandidate = sortedByMinQty
+					.get(sortedByMinQty.size() - 1);
 
 			Quantity gap = Quantity.zero(assignableInvoiceCandidate.getQuantity().getUOM());
 
 			boolean higherCandidateHasAssignedQty = highestRefundInvoiceCandidate.getAssignedQuantity().signum() > 0;
 
-			for (int i = sortedByMinQtyDesc.size() - 2; i > 1; i--)
+			for (int i = sortedByMinQty.size() - 2; i >= 0; i--)
 			{
-				final RefundInvoiceCandidate refundInvoiceCandidate = sortedByMinQtyDesc.get(i);
+				final RefundInvoiceCandidate refundInvoiceCandidate = sortedByMinQty.get(i);
 
 				final Quantity assignableQty = refundInvoiceCandidate.computeAssignableQuantity();
 				if (assignableQty.isInfinite() || assignableQty.signum() <= 0)
