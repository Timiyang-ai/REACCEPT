diff --git a/old_test.java b/new_test.java
index 24a5af6..bffae1b 100644
--- a/old_test.java
+++ b/new_test.java
@@ -12,36 +12,36 @@
 		save(user2);
 
 		final I_M_HU luHu11 = saveFluend(newInstance(I_M_HU.class));
-		final I_M_HU vhu11 = saveFluend(newInstance(I_M_HU.class)); 
+		final I_M_HU vhu11 = saveFluend(newInstance(I_M_HU.class));
 		vhu11.setHUStatus(X_M_HU.HUSTATUS_Active);
-		
+
 		final I_M_Product prod11 = saveFluend(newInstance(I_M_Product.class));
 		final BigDecimal qty11 = BigDecimal.valueOf(11);
-		
+
 		final I_M_HU luHu12 = saveFluend(newInstance(I_M_HU.class));
 		final I_M_HU vhu12 = saveFluend(newInstance(I_M_HU.class));
 		vhu12.setHUStatus(X_M_HU.HUSTATUS_Active);
-		
+
 		final I_M_Product prod12 = saveFluend(newInstance(I_M_Product.class));
 		final BigDecimal qty12 = BigDecimal.valueOf(12);
-		
+
 		final I_M_HU luHu21 = saveFluend(newInstance(I_M_HU.class));
 		final I_M_HU vhu21 = saveFluend(newInstance(I_M_HU.class));
 		vhu21.setHUStatus(X_M_HU.HUSTATUS_Active);
-		
+
 		final I_M_Product prod21 = saveFluend(newInstance(I_M_Product.class));
 		final BigDecimal qty21 = BigDecimal.valueOf(21);
-		
+
 		final I_M_HU luHu22 = saveFluend(newInstance(I_M_HU.class));
 		final I_M_HU vhu22 = saveFluend(newInstance(I_M_HU.class));
 		vhu22.setHUStatus(X_M_HU.HUSTATUS_Active);
-		
+
 		final I_M_Product prod22 = saveFluend(newInstance(I_M_Product.class));
 		final BigDecimal qty22 = BigDecimal.valueOf(22);
 
 		{
 			final TableRecordReference ref1 = TableRecordReference.of(user1);
-			
+
 			final I_M_HU_Assignment huAssignment11 = newInstance(I_M_HU_Assignment.class);
 			huAssignment11.setM_HU_ID(luHu11.getM_HU_ID());
 			huAssignment11.setVHU(vhu11);
@@ -114,15 +114,16 @@
 		final HUTraceEventBuilder builder = HUTraceEvent.builder()
 				.inOutId(12).type(HUTraceType.MATERIAL_SHIPMENT); // note: inOutId and type don't really matter for this test
 
-		huTraceEventsCreateAndAdd.createAndAddEvents(builder, ImmutableList.of(user1, user2));
+		huTraceEventsService.createAndAddEvents(builder, ImmutableList.of(user1, user2));
 
 		final List<I_M_HU_Trace> allDBRecords = Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_Trace.class)
 				.create().list();
 
-		assertThat(allDBRecords.size(), is(4)); // there shall be no record for the 5th assignment.
+		assertThat(allDBRecords).hasSize(4); // there shall be no record for the 5th assignment.
 		allDBRecords.sort(Comparator.comparing(I_M_HU_Trace::getM_HU_ID));
-		assertThat(allDBRecords.get(0).getM_HU_ID(), is(luHu11.getM_HU_ID()));
-		assertThat(allDBRecords.get(1).getM_HU_ID(), is(luHu12.getM_HU_ID()));
-		assertThat(allDBRecords.get(2).getM_HU_ID(), is(luHu21.getM_HU_ID()));
-		assertThat(allDBRecords.get(3).getM_HU_ID(), is(luHu22.getM_HU_ID()));
+
+		assertThat(allDBRecords.get(0).getM_HU_ID()).isEqualTo(luHu11.getM_HU_ID());
+		assertThat(allDBRecords.get(1).getM_HU_ID()).isEqualTo(luHu12.getM_HU_ID());
+		assertThat(allDBRecords.get(2).getM_HU_ID()).isEqualTo(luHu21.getM_HU_ID());
+		assertThat(allDBRecords.get(3).getM_HU_ID()).isEqualTo(luHu22.getM_HU_ID());
 	}
\ No newline at end of file
