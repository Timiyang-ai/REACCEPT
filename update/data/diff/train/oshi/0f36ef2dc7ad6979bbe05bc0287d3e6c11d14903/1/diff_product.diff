diff --git a/old_product.java b/new_product.java
index 99054f9..87ebeb8 100644
--- a/old_product.java
+++ b/new_product.java
@@ -3,18 +3,18 @@ public static String formatBytes(long bytes) {
 			return String.format("%d byte", bytes);
 		} else if (bytes < kibiByte) { // bytes
 			return String.format("%d bytes", bytes);
-		} else if (bytes < mebiByte && bytes % kibiByte == 0) { // KB
-			return String.format("%.0f KB", (double) bytes / kibiByte);
-		} else if (bytes < mebiByte) { // KB
-			return String.format("%.1f KB", (double) bytes / kibiByte);
-		} else if (bytes < gibiByte && bytes % mebiByte == 0) { // MB
-			return String.format("%.0f MB", (double) bytes / mebiByte);
-		} else if (bytes < gibiByte) { // MB
-			return String.format("%.1f MB", (double) bytes / mebiByte);
-		} else if (bytes % gibiByte == 0 && bytes < tebiByte) { // GB
-			return String.format("%.0f GB", (double) bytes / gibiByte);
-		} else if (bytes < tebiByte) { // GB
-			return String.format("%.1f GB", (double) bytes / gibiByte);
+		} else if (bytes < mebiByte && bytes % kibiByte == 0) { // KiB
+			return String.format("%.0f KiB", (double) bytes / kibiByte);
+		} else if (bytes < mebiByte) { // KiB
+			return String.format("%.1f KiB", (double) bytes / kibiByte);
+		} else if (bytes < gibiByte && bytes % mebiByte == 0) { // MiB
+			return String.format("%.0f MiB", (double) bytes / mebiByte);
+		} else if (bytes < gibiByte) { // MiB
+			return String.format("%.1f MiB", (double) bytes / mebiByte);
+		} else if (bytes % gibiByte == 0 && bytes < tebiByte) { // GiB
+			return String.format("%.0f GiB", (double) bytes / gibiByte);
+		} else if (bytes < tebiByte) { // GiB
+			return String.format("%.1f GiB", (double) bytes / gibiByte);
 		} else if (bytes % tebiByte == 0 && bytes < pebiByte) { // TiB
 			return String.format("%.0f TiB", (double) bytes / tebiByte);
 		} else if (bytes < pebiByte) { // TiB
