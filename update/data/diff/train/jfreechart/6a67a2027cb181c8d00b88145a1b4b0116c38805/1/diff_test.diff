diff --git a/old_test.java b/new_test.java
index b3f875b..fab43db 100644
--- a/old_test.java
+++ b/new_test.java
@@ -12,10 +12,10 @@
         r2.setSeriesVisible(2, Boolean.TRUE);
         assertTrue(r1.equals(r2));
 
-        // baseSeriesVisible
-        r1.setBaseSeriesVisible(false);
+        // defaultSeriesVisible
+        r1.setDefaultSeriesVisible(false);
         assertFalse(r1.equals(r2));
-        r2.setBaseSeriesVisible(false);
+        r2.setDefaultSeriesVisible(false);
         assertTrue(r1.equals(r2));
 
         // seriesVisibleInLegendList
@@ -24,10 +24,10 @@
         r2.setSeriesVisibleInLegend(1, Boolean.TRUE);
         assertTrue(r1.equals(r2));
 
-        // baseSeriesVisibleInLegend
-        r1.setBaseSeriesVisibleInLegend(false);
+        // defaultSeriesVisibleInLegend
+        r1.setDefaultSeriesVisibleInLegend(false);
         assertFalse(r1.equals(r2));
-        r2.setBaseSeriesVisibleInLegend(false);
+        r2.setDefaultSeriesVisibleInLegend(false);
         assertTrue(r1.equals(r2));
 
         // paintList
@@ -38,11 +38,11 @@
                 3.0f, 4.0f, Color.WHITE));
         assertTrue(r1.equals(r2));
 
-        // basePaint
-        r1.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        // defaultPaint
+        r1.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertFalse(r1.equals(r2));
-        r2.setBasePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        r2.setDefaultPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
@@ -54,11 +54,11 @@
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
-        // baseFillPaint
-        r1.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        // defaultFillPaint
+        r1.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertFalse(r1.equals(r2));
-        r2.setBaseFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        r2.setDefaultFillPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
@@ -70,11 +70,11 @@
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
-        // baseOutlinePaint
-        r1.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        // defaultOutlinePaint
+        r1.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertFalse(r1.equals(r2));
-        r2.setBaseOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        r2.setDefaultOutlinePaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
@@ -87,10 +87,10 @@
         r2.setSeriesStroke(1, s);
         assertTrue(r1.equals(r2));
 
-        // baseStroke
-        r1.setBaseStroke(s);
+        // defaultStroke
+        r1.setDefaultStroke(s);
         assertFalse(r1.equals(r2));
-        r2.setBaseStroke(s);
+        r2.setDefaultStroke(s);
         assertTrue(r1.equals(r2));
 
         // outlineStrokeList
@@ -99,10 +99,10 @@
         r2.setSeriesOutlineStroke(0, s);
         assertTrue(r1.equals(r2));
 
-        // baseOutlineStroke
-        r1.setBaseOutlineStroke(s);
+        // defaultOutlineStroke
+        r1.setDefaultOutlineStroke(s);
         assertFalse(r1.equals(r2));
-        r2.setBaseOutlineStroke(s);
+        r2.setDefaultOutlineStroke(s);
         assertTrue(r1.equals(r2));
 
         // shapeList
@@ -111,10 +111,10 @@
         r2.setSeriesShape(1, new Ellipse2D.Double(1, 2, 3, 4));
         assertTrue(r1.equals(r2));
 
-        // baseShape
-        r1.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));
+        // defaultShape
+        r1.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));
         assertFalse(r1.equals(r2));
-        r2.setBaseShape(new Ellipse2D.Double(1, 2, 3, 4));
+        r2.setDefaultShape(new Ellipse2D.Double(1, 2, 3, 4));
         assertTrue(r1.equals(r2));
 
         // itemLabelsVisibleList
@@ -124,9 +124,9 @@
         assertTrue(r1.equals(r2));
 
         // baseItemLabelsVisible
-        r1.setBaseItemLabelsVisible(true);
+        r1.setDefaultItemLabelsVisible(true);
         assertFalse(r1.equals(r2));
-        r2.setBaseItemLabelsVisible(true);
+        r2.setDefaultItemLabelsVisible(true);
         assertTrue(r1.equals(r2));
 
         // itemLabelFontList
@@ -135,10 +135,10 @@
         r2.setSeriesItemLabelFont(1, new Font("Serif", Font.BOLD, 9));
         assertTrue(r1.equals(r2));
 
-        // baseItemLabelFont
-        r1.setBaseItemLabelFont(new Font("Serif", Font.PLAIN, 10));
+        // defaultItemLabelFont
+        r1.setDefaultItemLabelFont(new Font("Serif", Font.PLAIN, 10));
         assertFalse(r1.equals(r2));
-        r2.setBaseItemLabelFont(new Font("Serif", Font.PLAIN, 10));
+        r2.setDefaultItemLabelFont(new Font("Serif", Font.PLAIN, 10));
         assertTrue(r1.equals(r2));
 
         // itemLabelPaintList
@@ -149,11 +149,11 @@
                 3.0f, 4.0f, Color.GRAY));
         assertTrue(r1.equals(r2));
 
-        // baseItemLabelPaint
-        r1.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,
+        // defaultItemLabelPaint
+        r1.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,
                 3.0f, 4.0f, Color.GRAY));
         assertFalse(r1.equals(r2));
-        r2.setBaseItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,
+        r2.setDefaultItemLabelPaint(new GradientPaint(1.0f, 2.0f, Color.RED,
                 3.0f, 4.0f, Color.GRAY));
         assertTrue(r1.equals(r2));
 
@@ -163,11 +163,11 @@
         r2.setSeriesPositiveItemLabelPosition(0, new ItemLabelPosition());
         assertTrue(r1.equals(r2));
 
-        // basePositiveItemLabelPosition;
-        r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(
+        // defaultPositiveItemLabelPosition;
+        r1.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(
                 ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));
         assertFalse(r1.equals(r2));
-        r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(
+        r2.setDefaultPositiveItemLabelPosition(new ItemLabelPosition(
                 ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));
         assertTrue(r1.equals(r2));
 
@@ -179,11 +179,11 @@
                 ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));
         assertTrue(r1.equals(r2));
 
-        // baseNegativeItemLabelPosition;
-        r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(
+        // defaultNegativeItemLabelPosition;
+        r1.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(
                 ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));
         assertFalse(r1.equals(r2));
-        r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(
+        r2.setDefaultNegativeItemLabelPosition(new ItemLabelPosition(
                 ItemLabelAnchor.INSIDE10, TextAnchor.BASELINE_RIGHT));
         assertTrue(r1.equals(r2));
 
@@ -200,9 +200,9 @@
         assertTrue(r1.equals(r2));
 
         // baseCreateEntities;
-        r1.setBaseCreateEntities(false);
+        r1.setDefaultCreateEntities(false);
         assertFalse(r1.equals(r2));
-        r2.setBaseCreateEntities(false);
+        r2.setDefaultCreateEntities(false);
         assertTrue(r1.equals(r2));
 
         // legendShape
@@ -212,9 +212,9 @@
         assertTrue(r1.equals(r2));
 
         // baseLegendShape
-        r1.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));
+        r1.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));
         assertFalse(r1.equals(r2));
-        r2.setBaseLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));
+        r2.setDefaultLegendShape(new Ellipse2D.Double(5.0, 6.0, 7.0, 8.0));
         assertTrue(r1.equals(r2));
 
         // legendTextFont
@@ -223,10 +223,10 @@
         r2.setLegendTextFont(0, new Font("Dialog", Font.PLAIN, 7));
         assertTrue(r1.equals(r2));
 
-        // baseLegendTextFont
-        r1.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 7));
+        // defaultLegendTextFont
+        r1.setDefaultLegendTextFont(new Font("Dialog", Font.PLAIN, 7));
         assertFalse(r1.equals(r2));
-        r2.setBaseLegendTextFont(new Font("Dialog", Font.PLAIN, 7));
+        r2.setDefaultLegendTextFont(new Font("Dialog", Font.PLAIN, 7));
         assertTrue(r1.equals(r2));
 
         // legendTextPaint
@@ -237,11 +237,11 @@
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
 
-        // baseOutlinePaint
-        r1.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        // defaultOutlinePaint
+        r1.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertFalse(r1.equals(r2));
-        r2.setBaseLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
+        r2.setDefaultLegendTextPaint(new GradientPaint(1.0f, 2.0f, Color.BLUE,
                 3.0f, 4.0f, Color.RED));
         assertTrue(r1.equals(r2));
     }
\ No newline at end of file
