diff --git a/old_product.java b/new_product.java
index 13e1b69..be0efef 100644
--- a/old_product.java
+++ b/new_product.java
@@ -7,35 +7,35 @@
         if (LOG.isDebugEnabled()) {
             LOG.debug("Called");
         }
-        final Job job = this.jobRepo.findOne(jobId);
-        if (job == null) {
+        final JobEntity jobEntity = this.jobRepo.findOne(jobId);
+        if (jobEntity == null) {
             throw new GenieNotFoundException("No job with id " + jobId + " exists. Unable to continue."
             );
         }
 
-        final List<ClusterCriteria> clusterCriterias = job.getClusterCriterias();
-        final Set<String> commandCriteria = job.getCommandCriteria();
+        final List<ClusterCriteria> clusterCriterias = jobEntity.getClusterCriterias();
+        final Set<String> commandCriteria = jobEntity.getCommandCriteria();
 
         for (final ClusterCriteria clusterCriteria : clusterCriterias) {
             @SuppressWarnings("unchecked")
-            final List<com.netflix.genie.common.model.Cluster> clusters = this.clusterRepo.findAll(
+            final List<ClusterEntity> clusterEntities = this.clusterRepo.findAll(
                     ClusterSpecs.findByClusterAndCommandCriteria(
                             clusterCriteria,
                             commandCriteria
                     )
             );
 
-            if (!clusters.isEmpty()) {
+            if (!clusterEntities.isEmpty()) {
                 // Add the successfully criteria to the job object in string form.
-                job.setChosenClusterCriteriaString(
+                jobEntity.setChosenClusterCriteriaString(
                         StringUtils.join(
                                 clusterCriteria.getTags(),
                                 CRITERIA_DELIMITER
                         )
                 );
-                return clusters
+                return clusterEntities
                         .stream()
-                        .map(com.netflix.genie.common.model.Cluster::getDTO)
+                        .map(ClusterEntity::getDTO)
                         .collect(Collectors.toList());
             }
         }
