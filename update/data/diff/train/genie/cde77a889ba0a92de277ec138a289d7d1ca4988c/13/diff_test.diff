diff --git a/old_test.java b/new_test.java
index f6e70ea..5bf572e 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,19 +1,30 @@
 @Test
-    public void testSetApplication() throws GeniePreconditionException {
-        Assert.assertNull(this.c.getApplication());
+    public void testSetApplications() throws GeniePreconditionException {
+        Assert.assertNotNull(this.c.getApplications());
+        Assert.assertTrue(this.c.getApplications().isEmpty());
+        final Set<Application> applications = new HashSet<>();
         final Application one = new Application();
         one.setId("one");
         final Application two = new Application();
         two.setId("two");
-        this.c.setApplication(one);
-        Assert.assertEquals(one, this.c.getApplication());
+        applications.add(one);
+        applications.add(two);
+        this.c.setApplications(applications);
+        Assert.assertEquals(2, this.c.getApplications().size());
+        Assert.assertTrue(this.c.getApplications().contains(one));
+        Assert.assertTrue(this.c.getApplications().contains(two));
         Assert.assertTrue(one.getCommands().contains(this.c));
-        this.c.setApplication(two);
-        Assert.assertEquals(two, this.c.getApplication());
+        Assert.assertTrue(two.getCommands().contains(this.c));
+
+        applications.clear();
+        applications.add(two);
+        this.c.setApplications(applications);
+        Assert.assertEquals(1, this.c.getApplications().size());
+        Assert.assertTrue(this.c.getApplications().contains(two));
         Assert.assertFalse(one.getCommands().contains(this.c));
         Assert.assertTrue(two.getCommands().contains(this.c));
-        this.c.setApplication(null);
-        Assert.assertNull(this.c.getApplication());
+        this.c.setApplications(null);
+        Assert.assertTrue(this.c.getApplications().isEmpty());
         Assert.assertTrue(one.getCommands().isEmpty());
         Assert.assertTrue(two.getCommands().isEmpty());
     }
\ No newline at end of file
