diff --git a/old_test.java b/new_test.java
index 3fde9dd..8e14aeb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,40 +3,40 @@
         final JobEntity localJobEntity = new JobEntity();
 
         // Times are null on initialization
-        Assert.assertNull(localJobEntity.getStarted());
-        Assert.assertNull(localJobEntity.getFinished());
+        Assert.assertFalse(localJobEntity.getStarted().isPresent());
+        Assert.assertFalse(localJobEntity.getFinished().isPresent());
 
         // start time is not zero on INIT, finish time is still 0
         localJobEntity.setJobStatus(JobStatus.INIT);
-        Assert.assertNotNull(localJobEntity.getStarted());
-        Assert.assertNull(localJobEntity.getFinished());
-        final Date started = localJobEntity.getStarted();
+        Assert.assertTrue(localJobEntity.getStarted().isPresent());
+        Assert.assertFalse(localJobEntity.getFinished().isPresent());
+        final Date started = localJobEntity.getStarted().orElseThrow(IllegalArgumentException::new);
 
         // Shouldn't affect finish time
         localJobEntity.setJobStatus(JobStatus.RUNNING);
-        Assert.assertThat(localJobEntity.getStarted(), Matchers.is(started));
-        Assert.assertNull(localJobEntity.getFinished());
+        Assert.assertThat(localJobEntity.getStarted().orElseGet(RandomSuppliers.DATE), Matchers.is(started));
+        Assert.assertFalse(localJobEntity.getFinished().isPresent());
 
         // finish time is non-zero on completion
         localJobEntity.setJobStatus(JobStatus.SUCCEEDED);
-        Assert.assertThat(localJobEntity.getStarted(), Matchers.is(started));
-        Assert.assertNotNull(localJobEntity.getFinished());
+        Assert.assertThat(localJobEntity.getStarted().orElseGet(RandomSuppliers.DATE), Matchers.is(started));
+        Assert.assertTrue(localJobEntity.getFinished().isPresent());
 
         final JobEntity jobEntity2 = new JobEntity();
         // Times are null on initialization
-        Assert.assertNull(jobEntity2.getStarted());
-        Assert.assertNull(jobEntity2.getFinished());
+        Assert.assertFalse(jobEntity2.getStarted().isPresent());
+        Assert.assertFalse(jobEntity2.getFinished().isPresent());
 
         // start time is not zero on INIT, finish time is still 0
         final String initMessage = "We're initializing";
         jobEntity2.setJobStatus(JobStatus.INIT, initMessage);
-        Assert.assertNotNull(jobEntity2.getStarted());
-        Assert.assertNull(jobEntity2.getFinished());
-        Assert.assertEquals(initMessage, jobEntity2.getStatusMsg());
+        Assert.assertTrue(jobEntity2.getStarted().isPresent());
+        Assert.assertFalse(jobEntity2.getFinished().isPresent());
+        Assert.assertEquals(initMessage, jobEntity2.getStatusMsg().orElseGet(RandomSuppliers.STRING));
 
         // finish time is non-zero on completion
         final String successMessage = "Job Succeeded";
         jobEntity2.setJobStatus(JobStatus.SUCCEEDED, successMessage);
-        Assert.assertEquals(successMessage, jobEntity2.getStatusMsg());
-        Assert.assertNotNull(jobEntity2.getFinished());
+        Assert.assertEquals(successMessage, jobEntity2.getStatusMsg().orElseGet(RandomSuppliers.STRING));
+        Assert.assertTrue(jobEntity2.getFinished().isPresent());
     }
\ No newline at end of file
