diff --git a/old_product.java b/new_product.java
index 7c807f7..9d4e527 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,6 +1,5 @@
 public PackedAlignments packAlignments(
-            Iterator<Alignment> iter,
-            List<? extends Range> ranges,
+            List<AlignmentInterval> intervalList,
             AlignmentTrack.RenderOptions renderOptions) {
 
         if(renderOptions == null) renderOptions = new AlignmentTrack.RenderOptions();
@@ -8,48 +7,52 @@ public PackedAlignments packAlignments(
         LinkedHashMap<String, List<Row>> packedAlignments = new LinkedHashMap<String, List<Row>>();
         boolean pairAlignments = renderOptions.isViewPairs() || renderOptions.isPairedArcView();
 
-        if (iter == null || !iter.hasNext()) {
-            return new PackedAlignments(ranges, packedAlignments, renderOptions);
-        }
+//        if (iter == null || !iter.hasNext()) {
+//            return new PackedAlignments(intervalList, packedAlignments, renderOptions);
+//        }
 
-        int end = ranges.get(ranges.size()-1).getEnd();
         if (renderOptions.groupByOption == null) {
             List<Row> alignmentRows = new ArrayList<Row>(10000);
-            pack(iter, end, pairAlignments, alignmentRows);
+            pack(intervalList, pairAlignments, alignmentRows);
             packedAlignments.put("", alignmentRows);
         } else {
             // Separate alignments into groups.
-            List<Alignment> nullGroup = new ArrayList<Alignment>();
-            HashMap<String, List<Alignment>> groupedAlignments = new HashMap<String, List<Alignment>>();
-            while (iter.hasNext()) {
-                Alignment alignment = iter.next();
-                String groupKey = getGroupValue(alignment, renderOptions);
-                if (groupKey == null) nullGroup.add(alignment);
-                else {
-                    List<Alignment> group = groupedAlignments.get(groupKey);
+            Table<String, Range, List<Alignment>> groupedAlignments = HashBasedTable.create();
+
+            for(AlignmentInterval interval: intervalList){
+                Iterator<Alignment> iter = interval.getAlignmentIterator();
+                while (iter.hasNext()) {
+                    Alignment alignment = iter.next();
+                    String groupKey = getGroupValue(alignment, renderOptions);
+                    if (groupKey == null) {
+                        groupKey = NULL_GROUP_VALUE;
+                    }
+                    List<Alignment> group = groupedAlignments.get(groupKey, interval);
                     if (group == null) {
                         group = new ArrayList<Alignment>(1000);
-                        groupedAlignments.put(groupKey, group);
+                        groupedAlignments.put(groupKey, interval, group);
                     }
                     group.add(alignment);
                 }
             }
 
+
             // Now alphabetize (sort) and pack the groups
-            List<String> keys = new ArrayList<String>(groupedAlignments.keySet());
+            List<String> keys = new ArrayList<String>(groupedAlignments.rowKeySet());
             Comparator<String> groupComparator = getGroupComparator(renderOptions.groupByOption);
             Collections.sort(keys, groupComparator);
+
             for (String key : keys) {
                 List<Row> alignmentRows = new ArrayList<Row>(10000);
-                List<Alignment> group = groupedAlignments.get(key);
-                pack(group.iterator(), end, pairAlignments, alignmentRows);
+                Map<Range, List<Alignment>> group = groupedAlignments.row(key);
+                pack(group, intervalList, pairAlignments, alignmentRows);
                 packedAlignments.put(key, alignmentRows);
             }
+            //Put null valued group at end
             List<Row> alignmentRows = new ArrayList<Row>(10000);
-            pack(nullGroup.iterator(), end, pairAlignments, alignmentRows);
+            Map<Range, List<Alignment>> group = groupedAlignments.row(NULL_GROUP_VALUE);
+            pack(group, intervalList, pairAlignments, alignmentRows);
             packedAlignments.put("", alignmentRows);
         }
-
-        return new PackedAlignments(ranges, packedAlignments, renderOptions);
-
+        return new PackedAlignments(intervalList, packedAlignments, renderOptions);
     }
\ No newline at end of file
