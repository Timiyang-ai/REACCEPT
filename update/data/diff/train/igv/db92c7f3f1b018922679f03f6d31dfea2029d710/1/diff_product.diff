diff --git a/old_product.java b/new_product.java
index ade77d7..2504146 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,8 +2,7 @@ public LinkedHashMap<String, List<AlignmentInterval.Row>> packAlignments(
             Iterator<Alignment> iter,
             int end,
             boolean pairAlignments,
-            AlignmentTrack.RenderOptions renderOptions,
-            int maxLevels) {
+            AlignmentTrack.RenderOptions renderOptions) {
 
         LinkedHashMap<String, List<AlignmentInterval.Row>> packedAlignments = new LinkedHashMap<String, List<Row>>();
 
@@ -16,7 +15,7 @@ public LinkedHashMap<String, List<AlignmentInterval.Row>> packAlignments(
 
         if (groupBy == null) {
             List<Row> alignmentRows = new ArrayList(10000);
-            pack(iter, end, pairAlignments, lengthComparator, alignmentRows, maxLevels);
+            pack(iter, end, pairAlignments, lengthComparator, alignmentRows);
             packedAlignments.put("", alignmentRows);
         } else {
             // Separate alignments into groups.
@@ -42,11 +41,11 @@ public LinkedHashMap<String, List<AlignmentInterval.Row>> packAlignments(
             for (String key : keys) {
                 List<Row> alignmentRows = new ArrayList(10000);
                 List<Alignment> group = groupedAlignments.get(key);
-                pack(group.iterator(), end, pairAlignments, lengthComparator, alignmentRows, maxLevels);
+                pack(group.iterator(), end, pairAlignments, lengthComparator, alignmentRows);
                 packedAlignments.put(key, alignmentRows);
             }
             List<Row> alignmentRows = new ArrayList(10000);
-            pack(nullGroup.iterator(), end, pairAlignments, lengthComparator, alignmentRows, maxLevels);
+            pack(nullGroup.iterator(), end, pairAlignments, lengthComparator, alignmentRows);
             packedAlignments.put("", alignmentRows);
         }
 
