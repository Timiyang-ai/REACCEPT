diff --git a/old_test.java b/new_test.java
index 97d58a9..ae13c1c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,23 +1,20 @@
 @Test
-    public void testGetTenants() throws Exception {
-        List<TenantUserDto> tenants  = new ArrayList<TenantUserDto>(10);
-        for (int i=0;i<10;i++) {
-            TenantUserDto tenant = createTenant();
-            tenants.add(tenant);
-        }
-        
-        Collections.sort(tenants, new IdComparator());
-        
-        List<TenantUserDto> storedTenants = client.getTenants();
-        Collections.sort(storedTenants, new IdComparator());
-        
-        Assert.assertEquals(tenants.size(), storedTenants.size());
-        for (int i=0;i<tenants.size();i++) {
-            TenantUserDto tenant = tenants.get(i);
-            TenantUserDto storedTenant = storedTenants.get(i);
-            assertTenantsEquals(tenant, storedTenant);
-        }
-        for (int i=0;i<storedTenants.size();i++) {
-            client.deleteTenant(storedTenants.get(i).getId());
-        }
-    }
\ No newline at end of file
+  public void testGetTenants() throws Exception {
+    List<TenantDto> tenants = new ArrayList<TenantDto>(10);
+    for (int i = 0; i < 10; i++) {
+      TenantDto tenant = createTenant();
+      tenants.add(tenant);
+    }
+
+    Collections.sort(tenants, new IdComparator());
+
+    List<TenantDto> storedTenants = client.getTenants();
+    Collections.sort(storedTenants, new IdComparator());
+
+    Assert.assertEquals(tenants.size(), storedTenants.size());
+    for (int i = 0; i < tenants.size(); i++) {
+      TenantDto tenant = tenants.get(i);
+      TenantDto storedTenant = storedTenants.get(i);
+      assertTenantsEquals(tenant, storedTenant);
+    }
+  }
\ No newline at end of file
