diff --git a/old_product.java b/new_product.java
index 2c06761..a9a8a04 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,27 @@
 public void receive() {
-        // BEGIN: com.azure.messaging.eventhubs.eventhubconsumer.receive#int-duration
+        // BEGIN: com.azure.messaging.eventhubs.eventhubconsumerclient.receive#int-duration
         // Obtain partitionId from EventHubClient.getPartitionIds().
         String partitionId = "0";
         Instant twelveHoursAgo = Instant.now().minus(Duration.ofHours(12));
-        EventHubConsumer consumer = client.createConsumer(EventHubAsyncClient.DEFAULT_CONSUMER_GROUP_NAME, partitionId,
-            EventPosition.fromEnqueuedTime(twelveHoursAgo));
+        EventHubConsumerClient consumer = new EventHubClientBuilder()
+            .connectionString("event-hub-instance-connection-string")
+            .consumerGroup(EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME)
+            .startingPosition(EventPosition.fromEnqueuedTime(twelveHoursAgo))
+            .buildConsumer();
 
-        IterableStream<EventData> events = consumer.receive(100, Duration.ofSeconds(30));
+        IterableStream<PartitionEvent> events = consumer.receive(partitionId, 100, Duration.ofSeconds(30));
 
-        for (EventData event : events) {
+        for (PartitionEvent partitionEvent : events) {
             // For each event, perform some sort of processing.
-            System.out.print("Event received: " + event.getSequenceNumber());
+            System.out.print("Event received: " + partitionEvent.getEventData().getSequenceNumber());
         }
 
         // Gets the next set of events to consume and process.
-        IterableStream<EventData> nextEvents = consumer.receive(100, Duration.ofSeconds(30));
-        // END: com.azure.messaging.eventhubs.eventhubconsumer.receive#int-duration
+        IterableStream<PartitionEvent> nextEvents = consumer.receive(partitionId, 100, Duration.ofSeconds(30));
+        // END: com.azure.messaging.eventhubs.eventhubconsumerclient.receive#int-duration
 
-        for (EventData event : nextEvents) {
+        for (PartitionEvent partitionEvent : nextEvents) {
             // For each event, perform some sort of processing.
-            System.out.print("Event received: " + event.getSequenceNumber());
+            System.out.print("Event received: " + partitionEvent.getEventData().getSequenceNumber());
         }
     }
\ No newline at end of file
