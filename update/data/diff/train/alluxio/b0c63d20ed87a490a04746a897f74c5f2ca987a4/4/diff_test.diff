diff --git a/old_test.java b/new_test.java
index 6d2813e..dc9c228 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,27 +1,34 @@
 @Test
   public void lsrTest() throws IOException {
-    int fileIdA =
-        TachyonFSTestUtils.createByteFile(mTfs, "/testRoot/testFileA", WriteType.MUST_CACHE, 10);
-    TachyonFile[] files = new TachyonFile[4];
-    files[0] = mTfs.getFile(fileIdA);
-    TachyonFSTestUtils
-        .createByteFile(mTfs, "/testRoot/testDir/testFileB", WriteType.MUST_CACHE, 20);
-    files[1] = mTfs.getFile(new TachyonURI("/testRoot/testDir"));
-    files[2] = mTfs.getFile(new TachyonURI("/testRoot/testDir/testFileB"));
-    int fileIdC =
-        TachyonFSTestUtils.createByteFile(mTfs, "/testRoot/testFileC", WriteType.THROUGH, 30);
-    files[3] = mTfs.getFile(fileIdC);
-    mFsShell.run(new String[] {"ls", "/testRoot"});
-    StringBuilder expected = new StringBuilder(200);
+    FileInfo[] files = new FileInfo[4];
+
+    TachyonFile fileA = TachyonFSTestUtils.createByteFile(mTfs, "/testRoot/testFileA",
+        TachyonStorageType.STORE, UnderStorageType.NO_PERSIST, 10);
+    files[0] = mTfs.getInfo(fileA);
+    TachyonFSTestUtils.createByteFile(mTfs, "/testRoot/testDir/testFileB", TachyonStorageType.STORE,
+        UnderStorageType.NO_PERSIST, 20);
+    files[1] = mTfs.getInfo(mTfs.open(new TachyonURI("/testRoot/testDir")));
+    files[2] = mTfs.getInfo(mTfs.open(new TachyonURI("/testRoot/testDir/testFileB")));
+    TachyonFile fileC = TachyonFSTestUtils.createByteFile(mTfs, "/testRoot/testFileC",
+        TachyonStorageType.NO_STORE, UnderStorageType.PERSIST, 30);
+    files[3] = mTfs.getInfo(fileC);
+    mFsShell.run(new String[] {"lsr", "/testRoot"});
+    String expected = "";
     String format = "%-10s%-25s%-15s%-5s\n";
-    expected
-        .append(String.format(format, FormatUtils.getSizeFromBytes(10),
+    expected +=
+        String.format(format, FormatUtils.getSizeFromBytes(10),
             TFsShell.convertMsToDate(files[0].getCreationTimeMs()), "In Memory",
-            "/testRoot/testFileA"));
-    expected.append(String.format(format, FormatUtils.getSizeFromBytes(0),
-        TFsShell.convertMsToDate(files[1].getCreationTimeMs()), "", "/testRoot/testDir"));
-    expected.append(String.format(format, FormatUtils.getSizeFromBytes(30),
-        TFsShell.convertMsToDate(files[3].getCreationTimeMs()), "Not In Memory",
-        "/testRoot/testFileC"));
-    Assert.assertEquals(expected.toString(), mOutput.toString());
+            "/testRoot/testFileA");
+    expected +=
+        String.format(format, FormatUtils.getSizeFromBytes(0),
+            TFsShell.convertMsToDate(files[1].getCreationTimeMs()), "", "/testRoot/testDir");
+    expected +=
+        String.format(format, FormatUtils.getSizeFromBytes(20),
+            TFsShell.convertMsToDate(files[2].getCreationTimeMs()), "In Memory",
+            "/testRoot/testDir/testFileB");
+    expected +=
+        String.format(format, FormatUtils.getSizeFromBytes(30),
+            TFsShell.convertMsToDate(files[3].getCreationTimeMs()), "Not In Memory",
+            "/testRoot/testFileC");
+    Assert.assertEquals(expected, mOutput.toString());
   }
\ No newline at end of file
