diff --git a/old_product.java b/new_product.java
index b4c5ee3..f4567ee 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,42 +1,40 @@
 private void getBindAddress(ServiceType service) throws Exception {
-    int resolveTimeout = (int) mConfiguration.getMs(PropertyKey.NETWORK_HOST_RESOLUTION_TIMEOUT_MS);
-    String localHostName = NetworkAddressUtils.getLocalHostName(resolveTimeout);
-    InetSocketAddress workerAddress;
+    InetSocketAddress address;
 
     // all default
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
     assertEquals(
         new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, service.getDefaultPort()),
-        workerAddress);
+        address);
 
     // bind host only
     mConfiguration.set(service.getBindHostKey(), "bind.host");
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), address);
 
     // connect host and bind host
     mConfiguration.set(service.getHostNameKey(), "connect.host");
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), address);
 
     // wildcard connect host and bind host
     mConfiguration.set(service.getHostNameKey(), NetworkAddressUtils.WILDCARD_ADDRESS);
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress("bind.host", service.getDefaultPort()), address);
 
     // wildcard connect host and wildcard bind host
     mConfiguration.set(service.getBindHostKey(), NetworkAddressUtils.WILDCARD_ADDRESS);
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
     assertEquals(
         new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, service.getDefaultPort()),
-        workerAddress);
+        address);
 
     // connect host and wildcard bind host
     mConfiguration.set(service.getHostNameKey(), "connect.host");
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
     assertEquals(
         new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, service.getDefaultPort()),
-        workerAddress);
+        address);
 
     // connect host and wildcard bind host with port
     switch (service) {
@@ -77,28 +75,28 @@ private void getBindAddress(ServiceType service) throws Exception {
         Assert.fail("Unrecognized service type: " + service.toString());
         break;
     }
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
     assertEquals(new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, 20000),
-        workerAddress);
+        address);
 
     // connect host and bind host with port
     mConfiguration.set(service.getBindHostKey(), "bind.host");
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress("bind.host", 20000), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress("bind.host", 20000), address);
 
     // empty connect host and bind host with port
     mConfiguration.unset(service.getHostNameKey());
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress("bind.host", 20000), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress("bind.host", 20000), address);
 
     // empty connect host and wildcard bind host with port
     mConfiguration.set(service.getBindHostKey(), NetworkAddressUtils.WILDCARD_ADDRESS);
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
     assertEquals(new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, 20000),
-        workerAddress);
+        address);
 
     // unset connect host and bind host with port
     mConfiguration.unset(service.getBindHostKey());
-    workerAddress = NetworkAddressUtils.getBindAddress(service, mConfiguration);
-    assertEquals(new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, 20000), workerAddress);
+    address = NetworkAddressUtils.getBindAddress(service, mConfiguration);
+    assertEquals(new InetSocketAddress(NetworkAddressUtils.WILDCARD_ADDRESS, 20000), address);
   }
\ No newline at end of file
