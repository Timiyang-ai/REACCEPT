diff --git a/old_product.java b/new_product.java
index ee7f8e4..a91cb19 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,32 +2,9 @@ public boolean free(AlluxioURI path, boolean recursive)
       throws FileDoesNotExistException, InvalidPathException, AccessControlException {
     MasterContext.getMasterSource().incFreeFileOps(1);
     synchronized (mInodeTree) {
-      checkPermission(FileSystemAction.WRITE, path, false);
+      mPermissionChecker.checkPermission(FileSystemAction.READ, path);
 
       Inode<?> inode = mInodeTree.getInodeByPath(path);
-
-      if (inode.isDirectory() && !recursive && ((InodeDirectory) inode).getNumberOfChildren() > 0) {
-        // inode is nonempty, and we don't want to free a nonempty directory unless recursive is
-        // true
-        return false;
-      }
-
-      List<Inode<?>> freeInodes = new ArrayList<Inode<?>>();
-      freeInodes.add(inode);
-      if (inode.isDirectory()) {
-        freeInodes.addAll(mInodeTree.getInodeChildrenRecursive((InodeDirectory) inode));
-      }
-
-      // We go through each inode.
-      for (int i = freeInodes.size() - 1; i >= 0; i--) {
-        Inode<?> freeInode = freeInodes.get(i);
-
-        if (freeInode.isFile()) {
-          // Remove corresponding blocks from workers.
-          mBlockMaster.removeBlocks(((InodeFile) freeInode).getBlockIds(), false /* delete */);
-        }
-      }
-      MasterContext.getMasterSource().incFilesFreed(freeInodes.size());
+      return freeInternal(inode, recursive);
     }
-    return true;
   }
\ No newline at end of file
