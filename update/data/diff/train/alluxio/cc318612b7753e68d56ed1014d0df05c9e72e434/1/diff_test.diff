diff --git a/old_test.java b/new_test.java
index 2f0e2d0..1d12413 100644
--- a/old_test.java
+++ b/new_test.java
@@ -8,33 +8,33 @@
     BlockStoreLocation dirInMEM = new BlockStoreLocation("MEM", 1);
     BlockStoreLocation dirInHDD = new BlockStoreLocation("HDD", 2);
 
-    Assert.assertTrue(anyTier.belongTo(anyTier));
-    Assert.assertFalse(anyTier.belongTo(anyDirInTierMEM));
-    Assert.assertFalse(anyTier.belongTo(anyDirInTierHDD));
-    Assert.assertFalse(anyTier.belongTo(dirInMEM));
-    Assert.assertFalse(anyTier.belongTo(dirInHDD));
+    Assert.assertTrue(anyTier.belongsTo(anyTier));
+    Assert.assertFalse(anyTier.belongsTo(anyDirInTierMEM));
+    Assert.assertFalse(anyTier.belongsTo(anyDirInTierHDD));
+    Assert.assertFalse(anyTier.belongsTo(dirInMEM));
+    Assert.assertFalse(anyTier.belongsTo(dirInHDD));
 
-    Assert.assertTrue(anyDirInTierMEM.belongTo(anyTier));
-    Assert.assertTrue(anyDirInTierMEM.belongTo(anyDirInTierMEM));
-    Assert.assertFalse(anyDirInTierMEM.belongTo(anyDirInTierHDD));
-    Assert.assertFalse(anyDirInTierMEM.belongTo(dirInMEM));
-    Assert.assertFalse(anyDirInTierMEM.belongTo(dirInHDD));
+    Assert.assertTrue(anyDirInTierMEM.belongsTo(anyTier));
+    Assert.assertTrue(anyDirInTierMEM.belongsTo(anyDirInTierMEM));
+    Assert.assertFalse(anyDirInTierMEM.belongsTo(anyDirInTierHDD));
+    Assert.assertFalse(anyDirInTierMEM.belongsTo(dirInMEM));
+    Assert.assertFalse(anyDirInTierMEM.belongsTo(dirInHDD));
 
-    Assert.assertTrue(anyDirInTierHDD.belongTo(anyTier));
-    Assert.assertFalse(anyDirInTierHDD.belongTo(anyDirInTierMEM));
-    Assert.assertTrue(anyDirInTierHDD.belongTo(anyDirInTierHDD));
-    Assert.assertFalse(anyDirInTierHDD.belongTo(dirInMEM));
-    Assert.assertFalse(anyDirInTierHDD.belongTo(dirInHDD));
+    Assert.assertTrue(anyDirInTierHDD.belongsTo(anyTier));
+    Assert.assertFalse(anyDirInTierHDD.belongsTo(anyDirInTierMEM));
+    Assert.assertTrue(anyDirInTierHDD.belongsTo(anyDirInTierHDD));
+    Assert.assertFalse(anyDirInTierHDD.belongsTo(dirInMEM));
+    Assert.assertFalse(anyDirInTierHDD.belongsTo(dirInHDD));
 
-    Assert.assertTrue(dirInMEM.belongTo(anyTier));
-    Assert.assertTrue(dirInMEM.belongTo(anyDirInTierMEM));
-    Assert.assertFalse(dirInMEM.belongTo(anyDirInTierHDD));
-    Assert.assertTrue(dirInMEM.belongTo(dirInMEM));
-    Assert.assertFalse(dirInMEM.belongTo(dirInHDD));
+    Assert.assertTrue(dirInMEM.belongsTo(anyTier));
+    Assert.assertTrue(dirInMEM.belongsTo(anyDirInTierMEM));
+    Assert.assertFalse(dirInMEM.belongsTo(anyDirInTierHDD));
+    Assert.assertTrue(dirInMEM.belongsTo(dirInMEM));
+    Assert.assertFalse(dirInMEM.belongsTo(dirInHDD));
 
-    Assert.assertTrue(dirInHDD.belongTo(anyTier));
-    Assert.assertFalse(dirInHDD.belongTo(anyDirInTierMEM));
-    Assert.assertTrue(dirInHDD.belongTo(anyDirInTierHDD));
-    Assert.assertFalse(dirInHDD.belongTo(dirInMEM));
-    Assert.assertTrue(dirInHDD.belongTo(dirInHDD));
+    Assert.assertTrue(dirInHDD.belongsTo(anyTier));
+    Assert.assertFalse(dirInHDD.belongsTo(anyDirInTierMEM));
+    Assert.assertTrue(dirInHDD.belongsTo(anyDirInTierHDD));
+    Assert.assertFalse(dirInHDD.belongsTo(dirInMEM));
+    Assert.assertTrue(dirInHDD.belongsTo(dirInHDD));
   }
\ No newline at end of file
