diff --git a/old_product.java b/new_product.java
index 123367e..35fa8b4 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,7 +1,8 @@
-public void rename(AlluxioURI srcPath, AlluxioURI dstPath) throws FileAlreadyExistsException,
-      FileDoesNotExistException, InvalidPathException, IOException, AccessControlException {
+public void rename(AlluxioURI srcPath, AlluxioURI dstPath, RenameOptions options)
+      throws FileAlreadyExistsException, FileDoesNotExistException, InvalidPathException,
+      IOException, AccessControlException {
     Metrics.RENAME_PATH_OPS.inc();
-    long flushCounter = AsyncJournalWriter.INVALID_FLUSH_COUNTER;
+    Mutable<Long> flushCounter = new MutableObject<>(AsyncJournalWriter.INVALID_FLUSH_COUNTER);
     // Require a WRITE lock on the source but only a READ lock on the destination. Since the
     // destination should not exist, we will only obtain a READ lock on the destination parent. The
     // modify operations on the parent inodes are thread safe so WRITE locks are not required.
@@ -14,10 +15,10 @@ public void rename(AlluxioURI srcPath, AlluxioURI dstPath) throws FileAlreadyExi
       mPermissionChecker.checkParentPermission(Mode.Bits.WRITE, dstInodePath);
       mMountTable.checkUnderWritableMountPoint(srcPath);
       mMountTable.checkUnderWritableMountPoint(dstPath);
-      flushCounter = renameAndJournal(srcInodePath, dstInodePath);
+      renameAndJournal(srcInodePath, dstInodePath, flushCounter, options);
       LOG.debug("Renamed {} to {}", srcPath, dstPath);
     } finally {
       // finally runs after resources are closed (unlocked).
-      waitForJournalFlush(flushCounter);
+      waitForJournalFlush(flushCounter.getValue());
     }
   }
\ No newline at end of file
