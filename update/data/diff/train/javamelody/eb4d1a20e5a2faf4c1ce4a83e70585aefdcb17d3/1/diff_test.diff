diff --git a/old_test.java b/new_test.java
index df7b7af..c8a3eb6 100644
--- a/old_test.java
+++ b/new_test.java
@@ -11,31 +11,31 @@
 		final String jobId = "jobId";
 		final String cacheId = "test clear";
 
-		assertNotNull("message GC", Action.GC.execute(collector, null, counterName, sessionId,
-				threadId, jobId, cacheId));
-		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null,
-				counterName, sessionId, threadId, jobId, cacheId));
-		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null, ALL,
+		assertNotNull("message GC", Action.GC.execute(collector, null, null, counterName,
 				sessionId, threadId, jobId, cacheId));
+		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null, null,
+				counterName, sessionId, threadId, jobId, cacheId));
+		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null, null,
+				ALL, sessionId, threadId, jobId, cacheId));
 		if (CacheManager.getInstance().getCache(cacheId) == null) {
 			CacheManager.getInstance().addCache(cacheId);
 		}
-		assertNotNull("message CLEAR_CACHES", Action.CLEAR_CACHES.execute(collector, null,
+		assertNotNull("message CLEAR_CACHES", Action.CLEAR_CACHES.execute(collector, null, null,
 				counterName, sessionId, threadId, jobId, cacheId));
-		assertNotNull("message CLEAR_CACHE", Action.CLEAR_CACHE.execute(collector, null,
+		assertNotNull("message CLEAR_CACHE", Action.CLEAR_CACHE.execute(collector, null, null,
 				counterName, sessionId, threadId, jobId, cacheId));
-		assertNotNull("message CLEAR_CACHE", Action.CLEAR_CACHE.execute(collector, null,
+		assertNotNull("message CLEAR_CACHE", Action.CLEAR_CACHE.execute(collector, null, null,
 				counterName, sessionId, threadId, jobId, "inconnu"));
 		assertNotNull("message PURGE_OBSOLETE_FILES", Action.PURGE_OBSOLETE_FILES.execute(
-				collector, null, counterName, sessionId, threadId, jobId, cacheId));
-		final String heapDump1 = Action.HEAP_DUMP.execute(collector, null, counterName, sessionId,
-				threadId, jobId, cacheId);
+				collector, null, null, counterName, sessionId, threadId, jobId, cacheId));
+		final String heapDump1 = Action.HEAP_DUMP.execute(collector, null, null, counterName,
+				sessionId, threadId, jobId, cacheId);
 		assertNotNull("message HEAP_DUMP", heapDump1);
 		String heapDump2;
 		// on le refait une deuxième fois dans la même seconde pour tester le nom du fichier
 		do {
-			heapDump2 = Action.HEAP_DUMP.execute(collector, null, counterName, sessionId, threadId,
-					jobId, cacheId);
+			heapDump2 = Action.HEAP_DUMP.execute(collector, null, null, counterName, sessionId,
+					threadId, jobId, cacheId);
 			assertNotNull("message HEAP_DUMP", heapDump2);
 		} while (heapDump1.equals(heapDump2));
 		for (final File file : Parameters.TEMPORARY_DIRECTORY.listFiles()) {
@@ -44,9 +44,9 @@
 			}
 		}
 		assertNotNull("message INVALIDATE_SESSIONS", Action.INVALIDATE_SESSIONS.execute(collector,
-				null, counterName, sessionId, threadId, jobId, cacheId));
+				null, null, counterName, sessionId, threadId, jobId, cacheId));
 		assertNotNull("message INVALIDATE_SESSION", Action.INVALIDATE_SESSION.execute(collector,
-				null, counterName, sessionId, threadId, jobId, cacheId));
+				null, null, counterName, sessionId, threadId, jobId, cacheId));
 
 		killThread(collector, counterName, sessionId, threadId, jobId, cacheId);
 
