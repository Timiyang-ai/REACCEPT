diff --git a/old_test.java b/new_test.java
index 369bc13..8aa0e9c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -9,28 +9,31 @@
 		final String sessionId = "sessionId";
 		final String threadId = "threadId";
 		final String jobId = "jobId";
+		final String cacheId = "cacheId";
 
-		assertNotNull("message GC",
-				Action.GC.execute(collector, null, counterName, sessionId, threadId, jobId));
+		assertNotNull("message GC", Action.GC.execute(collector, null, counterName, sessionId,
+				threadId, jobId, cacheId));
 		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null,
-				counterName, sessionId, threadId, jobId));
-		assertNotNull("message CLEAR_COUNTER",
-				Action.CLEAR_COUNTER.execute(collector, null, ALL, sessionId, threadId, jobId));
+				counterName, sessionId, threadId, jobId, cacheId));
+		assertNotNull("message CLEAR_COUNTER", Action.CLEAR_COUNTER.execute(collector, null, ALL,
+				sessionId, threadId, jobId, cacheId));
 		if (CacheManager.getInstance().getCache("test clear") == null) {
 			CacheManager.getInstance().addCache("test clear");
 		}
 		assertNotNull("message CLEAR_CACHES", Action.CLEAR_CACHES.execute(collector, null,
-				counterName, sessionId, threadId, jobId));
+				counterName, sessionId, threadId, jobId, cacheId));
+		assertNotNull("message CLEAR_CACHE", Action.CLEAR_CACHE.execute(collector, null,
+				counterName, sessionId, threadId, jobId, cacheId));
 		assertNotNull("message PURGE_OBSOLETE_FILES", Action.PURGE_OBSOLETE_FILES.execute(
-				collector, null, counterName, sessionId, threadId, jobId));
+				collector, null, counterName, sessionId, threadId, jobId, cacheId));
 		final String heapDump1 = Action.HEAP_DUMP.execute(collector, null, counterName, sessionId,
-				threadId, jobId);
+				threadId, jobId, cacheId);
 		assertNotNull("message HEAP_DUMP", heapDump1);
 		String heapDump2;
 		// on le refait une deuxième fois dans la même seconde pour tester le nom du fichier
 		do {
 			heapDump2 = Action.HEAP_DUMP.execute(collector, null, counterName, sessionId, threadId,
-					jobId);
+					jobId, cacheId);
 			assertNotNull("message HEAP_DUMP", heapDump2);
 		} while (heapDump1.equals(heapDump2));
 		for (final File file : Parameters.TEMPORARY_DIRECTORY.listFiles()) {
@@ -39,13 +42,13 @@
 			}
 		}
 		assertNotNull("message INVALIDATE_SESSIONS", Action.INVALIDATE_SESSIONS.execute(collector,
-				null, counterName, sessionId, threadId, jobId));
+				null, counterName, sessionId, threadId, jobId, cacheId));
 		assertNotNull("message INVALIDATE_SESSION", Action.INVALIDATE_SESSION.execute(collector,
-				null, counterName, sessionId, threadId, jobId));
+				null, counterName, sessionId, threadId, jobId, cacheId));
 
-		killThread(collector, counterName, sessionId, threadId, jobId);
+		killThread(collector, counterName, sessionId, threadId, jobId, cacheId);
 
-		jobs(collector, counterName, sessionId, threadId, jobId);
+		jobs(collector, counterName, sessionId, threadId, jobId, cacheId);
 
 		mailTest(collector);
 	}
\ No newline at end of file
