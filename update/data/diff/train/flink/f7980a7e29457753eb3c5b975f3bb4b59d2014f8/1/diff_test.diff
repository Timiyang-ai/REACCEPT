diff --git a/old_test.java b/new_test.java
index 8561837..8ee0940 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,29 +4,30 @@
 
 		int parallelism = 128128;
 		long checkpointId = Integer.MAX_VALUE + 123123L;
-		JobVertexID vertexId = new JobVertexID();
+		JobVertexID jobVertexID = new JobVertexID();
+		OperatorID operatorID = OperatorID.fromJobVertexID(jobVertexID);
 
-		TaskState state = mock(TaskState.class);
+		OperatorState state = mock(OperatorState.class);
 		when(state.getParallelism()).thenReturn(parallelism);
-		when(state.getJobVertexID()).thenReturn(vertexId);
+		when(state.getOperatorID()).thenReturn(operatorID);
 		when(state.getMaxParallelism()).thenReturn(parallelism);
-		when(state.getChainLength()).thenReturn(1);
 
-		Map<JobVertexID, TaskState> taskStates = new HashMap<>();
-		taskStates.put(vertexId, state);
+		Map<OperatorID, OperatorState> taskStates = new HashMap<>();
+		taskStates.put(operatorID, state);
 
 		JobID jobId = new JobID();
 
 		// Store savepoint
-		SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values());
+		SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values(), Collections.<MasterState>emptyList());
 		String path = SavepointStore.storeSavepoint(tmp.getAbsolutePath(), savepoint);
 
 		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class);
 		when(vertex.getParallelism()).thenReturn(parallelism);
 		when(vertex.getMaxParallelism()).thenReturn(parallelism);
+		when(vertex.getOperatorIDs()).thenReturn(Collections.singletonList(operatorID));
 
 		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>();
-		tasks.put(vertexId, vertex);
+		tasks.put(jobVertexID, vertex);
 
 		ClassLoader ucl = Thread.currentThread().getContextClassLoader();
 
@@ -48,7 +49,7 @@
 		}
 
 		// 3) Load and validate: missing vertex
-		assertNotNull(tasks.remove(vertexId));
+		assertNotNull(tasks.remove(jobVertexID));
 
 		try {
 			SavepointLoader.loadAndValidateSavepoint(jobId, tasks, path, ucl, false);
