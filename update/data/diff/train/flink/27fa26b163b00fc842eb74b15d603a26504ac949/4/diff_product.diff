diff --git a/old_product.java b/new_product.java
index c8c7cdd..90ae6af 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,18 +2,23 @@
 	public void schedulJob(final ExecutionGraph executionGraph) throws SchedulingException {
 
 		// First, check if there are enough resources to run this job
-		final Map<InstanceType, InstanceTypeDescription> availableInstances = this.instanceManager
+
+		// Get Map of all available Instance types
+		final Map<InstanceType, InstanceTypeDescription> availableInstances = getInstanceManager()
 			.getMapOfAvailableInstanceTypes();
 
 		for (int i = 0; i < executionGraph.getNumberOfStages(); i++) {
 
 			final Map<InstanceType, Integer> requiredInstanceTypes = new HashMap<InstanceType, Integer>();
-			executionGraph.collectInstanceTypesRequiredForStage(i, requiredInstanceTypes, ExecutionState.CREATED);
+			final ExecutionStage stage = executionGraph.getStage(i);
+			stage.collectRequiredInstanceTypes(requiredInstanceTypes, ExecutionState.CREATED);
 
+			// Iterator over required Instances
 			final Iterator<Map.Entry<InstanceType, Integer>> it = requiredInstanceTypes.entrySet().iterator();
 			while (it.hasNext()) {
 
 				final Map.Entry<InstanceType, Integer> entry = it.next();
+
 				final InstanceTypeDescription descr = availableInstances.get(entry.getKey());
 				if (descr == null) {
 					throw new SchedulingException("Unable to schedule job: No instance of type " + entry.getKey()
@@ -46,7 +51,22 @@
 			vertex.setExecutionState(ExecutionState.SCHEDULED);
 		}
 
+		// Register the scheduler as an execution stage listener
+		executionGraph.registerExecutionStageListener(this);
+
+		// Add job to the job queue (important to add job to queue before requesting instances)
 		synchronized (this.jobQueue) {
 			this.jobQueue.add(executionGraph);
+
+			// Request resources for the first stage of the job
+			final ExecutionStage executionStage = executionGraph.getCurrentExecutionStage();
+			try {
+				requestInstances(executionStage);
+			} catch (InstanceException e) {
+				final String exceptionMessage = StringUtils.stringifyException(e);
+				LOG.error(exceptionMessage);
+				this.jobQueue.remove(executionGraph);
+				throw new SchedulingException(exceptionMessage);
+			}
 		}
 	}
\ No newline at end of file
