diff --git a/old_product.java b/new_product.java
index c35c1a5..029f656 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
-private CloseableInputProvider<KeyValuePair<Key, Value>> obtainInput() {
-		
+private CloseableInputProvider<KeyValuePair<Key, Value>> obtainInput()
+	{	
 		// obtain the MemoryManager of the TaskManager
 		final MemoryManager memoryManager = getEnvironment().getMemoryManager();
 		// obtain the IOManager of the TaskManager
@@ -21,37 +21,15 @@ private CloseableInputProvider<KeyValuePair<Key, Value>> obtainInput() {
 		// local strategy is NONE
 		// input is already grouped, an iterator that wraps the reader is
 		// created and returned
-		case SELF_NESTEDLOOP: {
+		case SELF_NESTEDLOOP:
 			// iterator wraps input reader
-			Iterator<KeyValuePair<Key, Value>> iter = new Iterator<KeyValuePair<Key, Value>>() {
-
-				@Override
-				public boolean hasNext() {
-					return reader.hasNext();
-				}
-
-				@Override
-				public KeyValuePair<Key, Value> next() {
-					try {
-						return reader.next();
-					} catch (Exception e) {
-						throw new RuntimeException(e);
-					}
-				}
-
-				@Override
-				public void remove() {
-				}
-
-			};
-			
+			Iterator<KeyValuePair<Key, Value>> iter = new NepheleReaderIterator<KeyValuePair<Key,Value>>(this.reader);			
 			return new SimpleCloseableInputProvider<KeyValuePair<Key,Value>>(iter);
-		}
 
 			// local strategy is SORT
 			// The input is grouped using a sort-merge strategy.
 			// An iterator on the sorted pairs is created and returned.
-		case SORT_SELF_NESTEDLOOP: {
+		case SORT_SELF_NESTEDLOOP:
 			// create a key comparator
 			final Comparator<Key> keyComparator = new Comparator<Key>() {
 				@Override
@@ -67,13 +45,15 @@ private CloseableInputProvider<KeyValuePair<Key, Value>> obtainInput() {
 					valSerialization, keyComparator, reader, this, this.spillThreshold);
 				// obtain and return a grouped iterator from the sort-merger
 				return sortMerger;
-			} catch (MemoryAllocationException mae) {
+			}
+			catch (MemoryAllocationException mae) {
 				throw new RuntimeException(
 					"MemoryManager is not able to provide the required amount of memory for SelfMatchTask", mae);
-			} catch (IOException ioe) {
+			}
+			catch (IOException ioe) {
 				throw new RuntimeException("IOException caught when obtaining SortMerger for SelfMatchTask", ioe);
 			}
-		}
+			
 		default:
 			throw new RuntimeException("Invalid local strategy provided for SelfMatchTask: " +
 				config.getLocalStrategy());
