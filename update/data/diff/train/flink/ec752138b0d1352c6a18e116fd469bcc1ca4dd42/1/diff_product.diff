diff --git a/old_product.java b/new_product.java
index 4e3ad5d..ab8d076 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,101 +1,38 @@
-@SuppressWarnings({"unchecked", "rawtypes"})
-	public static <T extends RestfulGateway> Collection<Tuple2<RestHandlerSpecification, ChannelInboundHandler>> tryLoadJarHandlers(
-			GatewayRetriever<T> leaderRetriever,
+public static WebMonitorExtension loadWebSubmissionExtension(
+			GatewayRetriever<? extends RestfulGateway> leaderRetriever,
 			CompletableFuture<String> restAddressFuture,
 			Time timeout,
 			Map<String, String> responseHeaders,
 			java.nio.file.Path uploadDir,
 			Executor executor,
-			Configuration configuration) {
-
-		if (!isFlinkRuntimeWebInClassPath()) {
-			return Collections.emptyList();
-		}
-
-		final String jarHandlerPackageName = "org.apache.flink.runtime.webmonitor.handlers.";
-		try {
-			final Constructor<?> jarUploadHandlerConstrutor = Class
-				.forName(jarHandlerPackageName + "JarUploadHandler")
-				.getConstructor(
-					CompletableFuture.class,
-					GatewayRetriever.class,
-					Time.class,
-					Map.class,
-					MessageHeaders.class,
-					java.nio.file.Path.class,
-					Executor.class);
-
-			final MessageHeaders jarUploadMessageHeaders = (MessageHeaders) Class
-				.forName(jarHandlerPackageName + "JarUploadMessageHeaders")
-				.newInstance();
-
-			final ChannelInboundHandler jarUploadHandler = (ChannelInboundHandler) jarUploadHandlerConstrutor
-				.newInstance(
-					restAddressFuture,
-					leaderRetriever,
-					timeout,
-					responseHeaders,
-					jarUploadMessageHeaders,
-					uploadDir,
-					executor);
-
-			final Constructor<?> jarListHandlerConstructor = Class
-				.forName(jarHandlerPackageName + "JarListHandler")
-				.getConstructor(
-					CompletableFuture.class,
-					GatewayRetriever.class,
-					Time.class,
-					Map.class,
-					MessageHeaders.class,
-					File.class,
-					Executor.class);
-
-			final MessageHeaders jarListHeaders = (MessageHeaders) Class
-				.forName(jarHandlerPackageName + "JarListHeaders")
-				.newInstance();
-
-			final ChannelInboundHandler jarListHandler = (ChannelInboundHandler) jarListHandlerConstructor
-				.newInstance(
-					restAddressFuture,
-					leaderRetriever,
-					timeout,
-					responseHeaders,
-					jarListHeaders,
-					uploadDir.toFile(),
-					executor);
-
-			final Constructor<?> jarRunHandlerConstructor = Class
-				.forName(jarHandlerPackageName + "JarRunHandler")
-				.getConstructor(
-					CompletableFuture.class,
-					GatewayRetriever.class,
-					Time.class,
-					Map.class,
-					MessageHeaders.class,
-					java.nio.file.Path.class,
-					Configuration.class,
-					Executor.class);
-
-			final MessageHeaders jarRunHandlerHeaders = (MessageHeaders) Class
-				.forName(jarHandlerPackageName + "JarRunHeaders")
-				.newInstance();
-
-			final ChannelInboundHandler jarRunHandler = (ChannelInboundHandler) jarRunHandlerConstructor
-				.newInstance(
+			Configuration configuration) throws FlinkException {
+
+		if (isFlinkRuntimeWebInClassPath()) {
+			try {
+				final Constructor<?> webSubmissionExtensionConstructor = Class
+					.forName("org.apache.flink.runtime.webmonitor.WebSubmissionExtension")
+					.getConstructor(
+						Configuration.class,
+						CompletableFuture.class,
+						GatewayRetriever.class,
+						Map.class,
+						java.nio.file.Path.class,
+						Executor.class,
+						Time.class);
+
+				return (WebMonitorExtension) webSubmissionExtensionConstructor.newInstance(
+					configuration,
 					restAddressFuture,
 					leaderRetriever,
-					timeout,
 					responseHeaders,
-					jarRunHandlerHeaders,
 					uploadDir,
-					configuration,
-					executor);
-
-			return Arrays.asList(
-				Tuple2.of(jarUploadMessageHeaders, jarUploadHandler),
-				Tuple2.of(jarListHeaders, jarListHandler),
-				Tuple2.of(jarRunHandlerHeaders, jarRunHandler));
-		} catch (ClassNotFoundException | InvocationTargetException | InstantiationException | NoSuchMethodException | IllegalAccessException e) {
-			throw new RuntimeException(e);
+					executor,
+					timeout);
+			} catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | InvocationTargetException | IllegalAccessException e) {
+				throw new FlinkException("Could not load web submission extension.", e);
+			}
+		} else {
+			throw new FlinkException("The module flink-runtime-web could not be found in the class path. Please add " +
+				"this jar in order to enable web based job submission.");
 		}
 	}
\ No newline at end of file
