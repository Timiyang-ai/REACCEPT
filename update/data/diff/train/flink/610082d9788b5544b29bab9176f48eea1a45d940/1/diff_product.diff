diff --git a/old_product.java b/new_product.java
index 4b712cd..6a87228 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,48 +1,49 @@
 @Override
 	public ManagementVertex next() {
 
-		if (this.traversalStack.isEmpty()) {
+		if (traversalStack.isEmpty()) {
 
-			if (this.numVisitedEntryVertices < 0) {
+			if (numVisitedEntryVertices < 0) {
 				// User chose a specific entry vertex
 				return null;
 			}
 
 			TraversalEntry newentry;
 
-			if (this.forward) {
-				newentry = new TraversalEntry(this.managementGraph.getInputVertex(this.startStage, this.numVisitedEntryVertices),
+			if (forward) {
+				newentry = new TraversalEntry(managementGraph.getInputVertex(this.startStage, numVisitedEntryVertices),
 					0, 0);
 			} else {
 				newentry = new TraversalEntry(
-					managementGraph.getOutputVertex(this.startStage, this.numVisitedEntryVertices), 0, 0);
+					managementGraph.getOutputVertex(this.startStage, numVisitedEntryVertices), 0, 0);
 			}
 
-			this.traversalStack.push(newentry);
-			this.alreadyVisited.add(newentry.getManagementVertex());
+			traversalStack.push(newentry);
 		}
 
-		final ManagementVertex returnVertex = this.traversalStack.peek().getManagementVertex();
+		final ManagementVertex returnVertex = traversalStack.peek().getManagementVertex();
 
 		// Propose vertex to be visited next
 		do {
 
-			final TraversalEntry te = this.traversalStack.peek();
+			final TraversalEntry te = traversalStack.peek();
 
 			// Check if we can traverse deeper into the graph
-			final ManagementVertex candidateVertex = getCandidateVertex(te, this.forward);
+			final ManagementVertex candidateVertex = getCandidateVertex(te, forward);
 			if (candidateVertex == null) {
 				// Pop it from the stack
-				this.traversalStack.pop();
+				traversalStack.pop();
 			} else {
 				// Create new entry and put it on the stack
 				final TraversalEntry newte = new TraversalEntry(candidateVertex, 0, 0);
-				this.traversalStack.push(newte);
-				this.alreadyVisited.add(candidateVertex);
+				traversalStack.add(newte);
 				break;
 			}
 
-		} while (!this.traversalStack.isEmpty());
+		} while (!traversalStack.isEmpty());
+
+		// Mark vertex as already visited
+		alreadyVisited.add(returnVertex);
 
 		return returnVertex;
 	}
\ No newline at end of file
