diff --git a/old_test.java b/new_test.java
index 5753c10..2c458d5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,51 +1,44 @@
 @Test
 	public void testLoadAndValidateSavepoint() throws Exception {
+		File tmp = tmpFolder.newFolder();
+
 		int parallelism = 128128;
+		long checkpointId = Integer.MAX_VALUE + 123123L;
 		JobVertexID vertexId = new JobVertexID();
 
 		TaskState state = mock(TaskState.class);
 		when(state.getParallelism()).thenReturn(parallelism);
 		when(state.getJobVertexID()).thenReturn(vertexId);
+		when(state.getMaxParallelism()).thenReturn(parallelism);
+		when(state.getChainLength()).thenReturn(1);
 
 		Map<JobVertexID, TaskState> taskStates = new HashMap<>();
 		taskStates.put(vertexId, state);
 
-		CompletedCheckpoint stored = new CompletedCheckpoint(
-				new JobID(),
-				Integer.MAX_VALUE + 123123L,
-				10200202,
-				1020292988,
-				taskStates,
-				true);
-
 		// Store savepoint
-		SavepointV1 savepoint = new SavepointV1(stored.getCheckpointID(), taskStates.values());
-		SavepointStore store = new HeapSavepointStore();
-		String path = store.storeSavepoint(savepoint);
+		SavepointV1 savepoint = new SavepointV1(checkpointId, taskStates.values());
+		String path = SavepointStore.storeSavepoint(tmp.getAbsolutePath(), savepoint);
 
 		JobID jobId = new JobID();
 
 		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class);
 		when(vertex.getParallelism()).thenReturn(parallelism);
+		when(vertex.getMaxParallelism()).thenReturn(parallelism);
 
 		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>();
 		tasks.put(vertexId, vertex);
 
 		// 1) Load and validate: everything correct
-		CompletedCheckpoint loaded = SavepointLoader.loadAndValidateSavepoint(jobId, tasks, store, path);
+		CompletedCheckpoint loaded = SavepointLoader.loadAndValidateSavepoint(jobId, tasks, path);
 
 		assertEquals(jobId, loaded.getJobId());
-		assertEquals(stored.getCheckpointID(), loaded.getCheckpointID());
-
-		// The loaded checkpoint should not discard state when its discarded
-		loaded.discardState();
-		verify(state, times(0)).discardState();
+		assertEquals(checkpointId, loaded.getCheckpointID());
 
 		// 2) Load and validate: max parallelism mismatch
 		when(vertex.getMaxParallelism()).thenReturn(222);
 
 		try {
-			SavepointLoader.loadAndValidateSavepoint(jobId, tasks, store, path);
+			SavepointLoader.loadAndValidateSavepoint(jobId, tasks, path);
 			fail("Did not throw expected Exception");
 		} catch (IllegalStateException expected) {
 			assertTrue(expected.getMessage().contains("Max parallelism mismatch"));
@@ -55,7 +48,7 @@
 		assertNotNull(tasks.remove(vertexId));
 
 		try {
-			SavepointLoader.loadAndValidateSavepoint(jobId, tasks, store, path);
+			SavepointLoader.loadAndValidateSavepoint(jobId, tasks, path);
 			fail("Did not throw expected Exception");
 		} catch (IllegalStateException expected) {
 			assertTrue(expected.getMessage().contains("Cannot map old state"));
