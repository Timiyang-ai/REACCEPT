diff --git a/old_test.java b/new_test.java
index 7c7996d..39e2fb5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,7 +1,8 @@
 @Test
 	public void testExecutionStateChanged() {
 
-		final Environment ee = mock(Environment.class);
+		final JobID jobID = new JobID();
+		final ExecutionVertexID vertexID = new ExecutionVertexID();
 
 		final QueueScheduler localScheduler = mock(QueueScheduler.class);
 		final ExecutionVertex executionVertex = mock(ExecutionVertex.class);
@@ -14,18 +15,18 @@
 		// State change to RUNNING
 		when(executionGraph.getJobStatus()).thenReturn(InternalJobStatus.RUNNING);
 		ExecutionState newExecutionState = ExecutionState.FINISHING;
-		toTest.executionStateChanged(ee, newExecutionState, "");
+		toTest.executionStateChanged(jobID, vertexID, newExecutionState, "");
 		verify(localScheduler, times(0)).checkAndReleaseAllocatedResource(executionGraph, allocatedResource);
 		verify(localScheduler, times(0)).removeJobFromSchedule(executionGraph);
 		// Job finished
 		newExecutionState = ExecutionState.FINISHED;
 		when(executionGraph.getJobStatus()).thenReturn(InternalJobStatus.FINISHED);
-		toTest.executionStateChanged(ee, newExecutionState, "");
+		toTest.executionStateChanged(jobID, vertexID, newExecutionState, "");
 		verify(localScheduler).checkAndReleaseAllocatedResource(executionGraph, allocatedResource);
 		// execution state changed to fails, vertex should be rescheduled
 		newExecutionState = ExecutionState.FAILED;
 		when(executionVertex.hasRetriesLeft()).thenReturn(true);
-		toTest.executionStateChanged(ee, newExecutionState, "");
-		verify(executionVertex).setExecutionState(ExecutionState.SCHEDULED);
+		toTest.executionStateChanged(jobID, vertexID, newExecutionState, "");
+		verify(executionVertex).updateExecutionState(ExecutionState.SCHEDULED);
 
 	}
\ No newline at end of file
