diff --git a/old_product.java b/new_product.java
index 99ae3ba..69ca10d 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,8 @@
-private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {
+private void recoverWorkers() throws Exception {
+		// if this resource manager is recovering from failure,
+		// then some worker tasks are most likely still alive and we can re-obtain them
+		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers();
+
 		assert(workersInNew.isEmpty());
 		assert(workersInLaunch.isEmpty());
 		assert(workersBeingReturned.isEmpty());
@@ -9,10 +13,15 @@ private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviou
 			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size());
 
 			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {
+				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile());
+
 				switch(worker.state()) {
+					case New:
+						// remove new workers because allocation requests are transient
+						workerStore.removeWorker(worker.taskID());
+						break;
 					case Launched:
 						workersInLaunch.put(extractResourceID(worker.taskID()), worker);
-						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID());
 						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()));
 						break;
 					case Released:
