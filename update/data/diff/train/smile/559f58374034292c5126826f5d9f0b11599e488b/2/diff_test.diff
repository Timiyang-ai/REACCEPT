diff --git a/old_test.java b/new_test.java
index 922dd35..28ad311 100644
--- a/old_test.java
+++ b/new_test.java
@@ -8,7 +8,7 @@
             double[][] x = iris.toArray(new double[iris.size()][]);
             int[] y = iris.toArray(new int[iris.size()]);
 
-            SVM<double[]> svm = new SVM<>(new LinearKernel(), 10.0, Math.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
+            SVM<double[]> svm = new SVM<>(new LinearKernel(), 10.0, MathEx.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
             svm.learn(x, y);
             svm.learn(x, y);
             svm.finish();
@@ -22,7 +22,7 @@
             System.out.println("Linear ONE vs. ALL error = " + error);
             assertTrue(error <= 10);
 
-            svm = new SVM<>(new GaussianKernel(1), 1.0, Math.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
+            svm = new SVM<>(new GaussianKernel(1), 1.0, MathEx.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
             svm.learn(x, y);
             svm.learn(x, y);
             svm.finish();
@@ -40,7 +40,7 @@
             System.out.println("Gaussian ONE vs. ALL error = " + error);
             assertTrue(error <= 5);
 
-            svm = new SVM<>(new GaussianKernel(1), 1.0, Math.max(y) + 1, SVM.Multiclass.ONE_VS_ONE);
+            svm = new SVM<>(new GaussianKernel(1), 1.0, MathEx.max(y) + 1, SVM.Multiclass.ONE_VS_ONE);
             svm.learn(x, y);
             svm.learn(x, y);
             svm.finish();
@@ -60,7 +60,7 @@
             System.out.println("Gaussian ONE vs. ONE error = " + error);
             assertTrue(error <= 5);
 
-            svm = new SVM<>(new PolynomialKernel(2), 1.0, Math.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
+            svm = new SVM<>(new PolynomialKernel(2), 1.0, MathEx.max(y) + 1, SVM.Multiclass.ONE_VS_ALL);
             svm.learn(x, y);
             svm.learn(x, y);
             svm.finish();
