diff --git a/old_product.java b/new_product.java
index dbc883c..c3231b7 100644
--- a/old_product.java
+++ b/new_product.java
@@ -4,15 +4,16 @@ public T evolve(int generation, double threshold) {
         }
         
         // Calculate the fitness of each chromosome.
-        try {
-            MulticoreExecutor.run(tasks);
-        } catch (Exception ex) {
-            logger.error("Failed to run Genetic Algorithm on multi-core", ex);
-
-            for (Task task : tasks) {
-                task.call();
+        Arrays.stream(population).parallel().forEach(chromosome -> {
+            if (chromosome instanceof LamarckianChromosome) {
+                LamarckianChromosome ch = (LamarckianChromosome) chromosome;
+                for (int j = 0; j < t; j++) {
+                    ch.evolve();
+                }
             }
-        }
+
+            chromosome.fitness();
+        });
 
         Arrays.sort(population);
         T best = population[size-1];
@@ -24,10 +25,10 @@ public T evolve(int generation, double threshold) {
             }
 
             for (int i = elitism; i < size; i+=2) {
-                T father = select(population);
-                T mother = select(population);
+                T father = selection.apply(population);
+                T mother = selection.apply(population);
                 while (mother == father) {
-                    mother = select(population);
+                    mother = selection.apply(population);
                 }
 
                 Chromosome[] children = father.crossover(mother);
@@ -41,15 +42,17 @@ public T evolve(int generation, double threshold) {
 
             System.arraycopy(offsprings, 0, population, 0, size);
 
-            try {
-                MulticoreExecutor.run(tasks);
-            } catch (Exception ex) {
-                logger.error("Failed to run Genetic Algorithm on multi-core", ex);
-
-                for (Task task : tasks) {
-                    task.call();
+            // Calculate the fitness of each chromosome.
+            Arrays.stream(population).parallel().forEach(chromosome -> {
+                if (chromosome instanceof LamarckianChromosome) {
+                    LamarckianChromosome ch = (LamarckianChromosome) chromosome;
+                    for (int j = 0; j < t; j++) {
+                        ch.evolve();
+                    }
                 }
-            }
+
+                chromosome.fitness();
+            });
 
             Arrays.sort(population);
             best = population[size - 1];
@@ -60,7 +63,7 @@ public T evolve(int generation, double threshold) {
             }
             avg /= size;
 
-            logger.info(String.format("Genetic Algorithm: generation %d, best fitness %G, average fitness %G", g, best.fitness(), avg));
+            logger.info(String.format("Generation %d, best fitness %G, average fitness %G", g, best.fitness(), avg));
         }
 
         return best;
