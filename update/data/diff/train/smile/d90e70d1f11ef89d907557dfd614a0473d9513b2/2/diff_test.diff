diff --git a/old_test.java b/new_test.java
index 0adb655..aee1cbb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,6 +1,8 @@
 @Test
-    public void testLearn() {
-        System.out.println("learn");
+    public void testFit() {
+        System.out.println("fit");
+        MathEx.setSeed(19650218); // to get repeatable results.
+
         EmpiricalDistribution initial = new EmpiricalDistribution(pi);
 
         EmpiricalDistribution[] transition = new EmpiricalDistribution[a.length];
@@ -28,13 +30,29 @@
             }
         }
 
-        HMM hmm = new HMM(sequences, labels);
-        System.out.println(hmm);
+        HMM model = HMM.fit(sequences, labels);
+        System.out.println(model);
+
+        double[] expPi2 = {0.5076, 0.4924};
+        double[][] expA2 = {{0.8002, 0.1998}, {0.1987, 0.8013}};
+        double[][] expB2 = {{0.5998, 0.4002}, {0.4003, 0.5997}};
 
-        double[] pi2 = {0.55, 0.45};
-        double[][] a2 = {{0.7, 0.3}, {0.15, 0.85}};
-        double[][] b2 = {{0.45, 0.55}, {0.3, 0.7}};
-        HMM init = new HMM(pi2, a2, b2);
-        HMM result = init.learn(sequences, 100);
-        System.out.println(result);
+        double[] pi2 = model.getInitialStateProbabilities();
+        for (int i = 0; i < pi.length; i++) {
+            assertEquals(expPi2[i], pi2[i], 1E-4);
+        }
+
+        DenseMatrix a2 = model.getStateTransitionProbabilities();
+        for (int i = 0; i < a.length; i++) {
+            for (int j = 0; j < a[i].length; j++) {
+                assertEquals(expA2[i][j], a2.get(i, j), 1E-4);
+            }
+        }
+
+        DenseMatrix b2 = model.getSymbolEmissionProbabilities();
+        for (int i = 0; i < b.length; i++) {
+            for (int j = 0; j < b[i].length; j++) {
+                assertEquals(expB2[i][j], b2.get(i, j), 1E-4);
+            }
+        }
     }
\ No newline at end of file
