diff --git a/old_product.java b/new_product.java
index 8afb138..edd2d4e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,25 @@
 public int[] predict(int[] o) {
+        int N = a.nrows();
         // The porbability of the most probable path.
-        double[][] trellis = new double[o.length][numStates];
+        double[][] trellis = new double[o.length][N];
         // Backtrace.
-        int[][] psy = new int[o.length][numStates];
+        int[][] psy = new int[o.length][N];
         // The most likely state sequence.
         int[] s = new int[o.length];
 
         // forward
-        for (int i = 0; i < numStates; i++) {
-            trellis[0][i] = log(pi[i]) + log(b[i][o[0]]);
+        for (int i = 0; i < N; i++) {
+            trellis[0][i] = MathEx.log(pi[i]) + MathEx.log(b.get(i, o[0]));
             psy[0][i] = 0;
         }
 
         for (int t = 1; t < o.length; t++) {
-            for (int j = 0; j < numStates; j++) {
+            for (int j = 0; j < N; j++) {
                 double maxDelta = Double.NEGATIVE_INFINITY;
                 int maxPsy = 0;
 
-                for (int i = 0; i < numStates; i++) {
-                    double delta = trellis[t - 1][i] + log(a[i][j]);
+                for (int i = 0; i < N; i++) {
+                    double delta = trellis[t - 1][i] + MathEx.log(a.get(i, j));
 
                     if (maxDelta < delta) {
                         maxDelta = delta;
@@ -26,7 +27,7 @@ public int[] predict(int[] o) {
                     }
                 }
 
-                trellis[t][j] = maxDelta + log(b[j][o[t]]);
+                trellis[t][j] = maxDelta + MathEx.log(b.get(j, o[t]));
                 psy[t][j] = maxPsy;
             }
         }
@@ -34,7 +35,7 @@ public int[] predict(int[] o) {
         // trace back
         int n = o.length - 1;
         double maxDelta = Double.NEGATIVE_INFINITY;
-        for (int i = 0; i < numStates; i++) {
+        for (int i = 0; i < N; i++) {
             if (maxDelta < trellis[n][i]) {
                 maxDelta = trellis[n][i];
                 s[n] = i;
