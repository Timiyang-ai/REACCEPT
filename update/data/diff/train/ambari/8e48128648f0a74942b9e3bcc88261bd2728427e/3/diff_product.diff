diff --git a/old_product.java b/new_product.java
index ea1fc69..620582a 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,22 +1,15 @@
-public void invalidateHosts(AlertDefinitionEntity definition) {
+public Set<String> invalidateHosts(AlertDefinitionEntity definition) {
     long clusterId = definition.getClusterId();
-
-    // intercept host agent alerts; they affect all hosts
-    String definitionServiceName = definition.getServiceName();
-    String definitionComponentName = definition.getComponentName();
-    if (Services.AMBARI.equals(definitionServiceName)
-        && Components.AMBARI_AGENT.equals(definitionComponentName)) {
-
-      invalidateAll();
-      return;
-    }
+    Set<String> invalidatedHosts = new HashSet<String>();
 
     Cluster cluster = null;
     Map<String, Host> hosts = null;
+    String clusterName = null;
     try {
       cluster = m_clusters.getClusterById(clusterId);
       if (null != cluster) {
-        hosts = m_clusters.getHostsForCluster(cluster.getClusterName());
+        clusterName = cluster.getClusterName();
+        hosts = m_clusters.getHostsForCluster(clusterName);
       }
 
       if (null == cluster) {
@@ -27,25 +20,35 @@ public void invalidateHosts(AlertDefinitionEntity definition) {
     }
 
     if (null == cluster) {
-      return;
+      return invalidatedHosts;
+    }
+
+    // intercept host agent alerts; they affect all hosts
+    String definitionServiceName = definition.getServiceName();
+    String definitionComponentName = definition.getComponentName();
+    if (Services.AMBARI.equals(definitionServiceName)
+        && Components.AMBARI_AGENT.equals(definitionComponentName)) {
+
+      invalidateAll();
+      invalidatedHosts.addAll(hosts.keySet());
+      return invalidatedHosts;
     }
 
     // find all hosts that have the matching service and component
-    if (null != hosts) {
-      for (String hostName : hosts.keySet()) {
-        List<ServiceComponentHost> hostComponents = cluster.getServiceComponentHosts(hostName);
-        if (null == hostComponents || hostComponents.size() == 0) {
-          continue;
-        }
+    for (String hostName : hosts.keySet()) {
+      List<ServiceComponentHost> hostComponents = cluster.getServiceComponentHosts(hostName);
+      if (null == hostComponents || hostComponents.size() == 0) {
+        continue;
+      }
 
-        // if a host has a matching service/component, invalidate it
-        for (ServiceComponentHost component : hostComponents) {
-          String serviceName = component.getServiceName();
-          String componentName = component.getServiceComponentName();
-          if (serviceName.equals(definitionServiceName)
-              && componentName.equals(definitionComponentName)) {
-            invalidate(hostName);
-          }
+      // if a host has a matching service/component, invalidate it
+      for (ServiceComponentHost component : hostComponents) {
+        String serviceName = component.getServiceName();
+        String componentName = component.getServiceComponentName();
+        if (serviceName.equals(definitionServiceName)
+            && componentName.equals(definitionComponentName)) {
+          invalidate(clusterName, hostName);
+          invalidatedHosts.add(hostName);
         }
       }
     }
@@ -56,7 +59,8 @@ public void invalidateHosts(AlertDefinitionEntity definition) {
     if (null == service) {
       LOG.warn("The alert definition {} has an unknown service of {}",
           definition.getDefinitionName(), definitionServiceName);
-      return;
+
+      return invalidatedHosts;
     }
 
     // get all master components of the definition's service; any hosts that
@@ -68,10 +72,13 @@ public void invalidateHosts(AlertDefinitionEntity definition) {
           Map<String, ServiceComponentHost> componentHosts = component.getValue().getServiceComponentHosts();
           if (null != componentHosts) {
             for (String componentHost : componentHosts.keySet()) {
-              invalidate(componentHost);
+              invalidate(clusterName, componentHost);
+              invalidatedHosts.add(componentHost);
             }
           }
         }
       }
     }
+
+    return invalidatedHosts;
   }
\ No newline at end of file
