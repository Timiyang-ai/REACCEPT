diff --git a/old_test.java b/new_test.java
index 0719191..b36fcbe 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,9 +1,5 @@
 @Test
   public void testIsApplicable() throws Exception {
-    //Default value
-    Configuration conf = new Configuration(new Properties());
-    m_check._configuration = conf;
-
     final Cluster cluster = Mockito.mock(Cluster.class);
     Mockito.when(cluster.getClusterId()).thenReturn(1L);
     Mockito.when(m_clusters.getCluster("cluster")).thenReturn(cluster);
@@ -34,32 +30,4 @@
 
     Mockito.when(repositoryVersionEntity.getVersion()).thenReturn("2.2.4.2");
     Assert.assertTrue(m_check.isApplicable(request));
-    
-    //Custom stack name and version
-    Properties ambariProperties = new Properties();
-    ambariProperties.setProperty("rollingupgrade.stack", "MYSTACK");
-    ambariProperties.setProperty("rollingupgrade.version", "2.0.0.0");
-    conf = new Configuration(ambariProperties);
-    m_check._configuration = conf;
-    
-    Mockito.when(cluster.getClusterId()).thenReturn(1L);
-    Mockito.when(m_clusters.getCluster("cluster")).thenReturn(cluster);
-    Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new StackId("MYSTACK-2.0"));
-
-    services = new HashMap<String, Service>();
-    Mockito.when(cluster.getServices()).thenReturn(services);
-
-    clusterVersionEntity = Mockito.mock(ClusterVersionEntity.class);
-    Mockito.when(cluster.getCurrentClusterVersion()).thenReturn(clusterVersionEntity);
-
-    repositoryVersionEntity = Mockito.mock(RepositoryVersionEntity.class);
-    Mockito.when(clusterVersionEntity.getRepositoryVersion()).thenReturn(repositoryVersionEntity);
-    
-    services.put("YARN", Mockito.mock(Service.class));
-
-    Mockito.when(repositoryVersionEntity.getVersion()).thenReturn("1.0.0.0");
-    Assert.assertFalse(m_check.isApplicable(request));
-
-    Mockito.when(repositoryVersionEntity.getVersion()).thenReturn("4.1.0.0");
-    Assert.assertTrue(m_check.isApplicable(request));
   }
\ No newline at end of file
