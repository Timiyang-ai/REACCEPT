diff --git a/old_test.java b/new_test.java
index a3939da..7cbe000 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,13 +1,13 @@
 @Test
   @SuppressWarnings("unchecked")
   public void testProcessServiceComponentHosts() throws Exception {
-    final Cluster cluster =  EasyMock.createNiceMock(Cluster.class);
-    final KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = EasyMock.createNiceMock(KerberosIdentityDataFileWriter.class);
-    final KerberosDescriptor kerberosDescriptor = EasyMock.createNiceMock(KerberosDescriptor.class);
-    final ServiceComponentHost serviceComponentHostHDFS = EasyMock.createNiceMock(ServiceComponentHost.class);
-    final ServiceComponentHost serviceComponentHostZK = EasyMock.createNiceMock(ServiceComponentHost.class);
-    final KerberosServiceDescriptor serviceDescriptor = EasyMock.createNiceMock(KerberosServiceDescriptor.class);
-    final KerberosComponentDescriptor componentDescriptor = EasyMock.createNiceMock(KerberosComponentDescriptor.class);
+    final Cluster cluster = createNiceMock(Cluster.class);
+    final KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = createNiceMock(KerberosIdentityDataFileWriter.class);
+    final KerberosDescriptor kerberosDescriptor = createNiceMock(KerberosDescriptor.class);
+    final ServiceComponentHost serviceComponentHostHDFS = createNiceMock(ServiceComponentHost.class);
+    final ServiceComponentHost serviceComponentHostZK = createNiceMock(ServiceComponentHost.class);
+    final KerberosServiceDescriptor serviceDescriptor = createNiceMock(KerberosServiceDescriptor.class);
+    final KerberosComponentDescriptor componentDescriptor = createNiceMock(KerberosComponentDescriptor.class);
 
     final String hdfsService = "HDFS";
     final String zookeeperService = "ZOOKEEPER";
@@ -18,20 +18,20 @@
     Collection<String> identityFilter = new ArrayList<>();
     Map<String, Map<String, String>> kerberosConfigurations = new HashMap<>();
     Map<String, Set<String>> propertiesToIgnore = new HashMap<>();
-    Map<String, String> descriptorProperties = new HashMap<>();
     Map<String, Map<String, String>> configurations = new HashMap<>();
 
     List<ServiceComponentHost> serviceComponentHosts = new ArrayList<ServiceComponentHost>() {{
       add(serviceComponentHostHDFS);
       add(serviceComponentHostZK);
     }};
-    Map<String, Service> clusterServices = new HashMap<String, Service>(){{
+    Map<String, Service> clusterServices = new HashMap<String, Service>() {{
       put(hdfsService, null);
       put(zookeeperService, null);
     }};
 
-    expect(kerberosDescriptor.getProperties()).andReturn(descriptorProperties).atLeastOnce();
-    expect(kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter((File)anyObject())).andReturn(kerberosIdentityDataFileWriter);
+    KerberosIdentityDataFileWriterFactory kerberosIdentityDataFileWriterFactory = injector.getInstance(KerberosIdentityDataFileWriterFactory.class);
+    expect(kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(anyObject(File.class))).andReturn(kerberosIdentityDataFileWriter);
+
     // it's important to pass a copy of clusterServices
     expect(cluster.getServices()).andReturn(new HashMap<>(clusterServices)).atLeastOnce();
 
@@ -50,18 +50,19 @@
     expect(serviceDescriptor.getComponent(hdfsComponent)).andReturn(componentDescriptor).once();
     expect(componentDescriptor.getConfigurations(anyBoolean())).andReturn(null);
 
-    replay(kerberosDescriptor, kerberosHelper, kerberosIdentityDataFileWriterFactory,
-      cluster, serviceComponentHostHDFS, serviceComponentHostZK, serviceDescriptor, componentDescriptor);
+    replayAll();
+
+    injector.getInstance(AmbariMetaInfo.class).init();
 
-    prepareKerberosServerAction.processServiceComponentHosts(cluster,
-      kerberosDescriptor,
-      serviceComponentHosts,
-      identityFilter,
-      "",
+    testKerberosServerAction.processServiceComponentHosts(cluster,
+        kerberosDescriptor,
+        serviceComponentHosts,
+        identityFilter,
+        "",
         configurations, kerberosConfigurations,
         false, propertiesToIgnore);
 
-    verify(kerberosHelper);
+    verifyAll();
 
     // Ensure the host and hostname values were set in the configuration context
     Assert.assertEquals("host1", configurations.get("").get("host"));
