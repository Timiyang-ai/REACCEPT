diff --git a/old_test.java b/new_test.java
index 47af624..9b70a25 100644
--- a/old_test.java
+++ b/new_test.java
@@ -8,6 +8,8 @@
 
     Cluster cluster = createNiceMock(Cluster.class);
     Service service = createNiceMock(Service.class);
+    ComponentInfo component3Info = createNiceMock(ComponentInfo.class);
+    ComponentInfo component4Info = createNiceMock(ComponentInfo.class);
     ServiceComponent component1 = createNiceMock(ServiceComponent.class);
     ServiceComponent component2 = createNiceMock(ServiceComponent.class);
     ServiceComponentResponse response1 = createNiceMock(ServiceComponentResponse.class);
@@ -36,12 +38,22 @@
     expect(managementController.getClusters()).andReturn(clusters).anyTimes();
     expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
 
+    expect(stackId.getStackName()).andReturn("stackName").anyTimes();
+    expect(stackId.getStackVersion()).andReturn("1").anyTimes();
+
     // getComponents
-    expect(clusters.getCluster("cluster1")).andReturn(cluster).times(5);
+    expect(clusters.getCluster("cluster1")).andReturn(cluster).anyTimes();
     expect(cluster.getDesiredStackVersion()).andReturn(stackId).anyTimes();
-    expect(cluster.getService("service1")).andReturn(service).times(4);
+    expect(cluster.getService("service1")).andReturn(service).anyTimes();
     expect(cluster.getService("service2")).andThrow(new ObjectNotFoundException("service2"));
 
+    expect(ambariMetaInfo.getComponent("stackName", "1", "service1", "component3")).andReturn(component3Info);
+    expect(ambariMetaInfo.getComponent("stackName", "1", "service1", "component4")).andReturn(component4Info);
+
+    expect(component3Info.getCategory()).andReturn(null);
+    expect(component4Info.getCategory()).andReturn(null);
+
+    expect(service.getName()).andReturn("service1").anyTimes();
     expect(service.getServiceComponent("component1")).andThrow(new ServiceComponentNotFoundException("cluster1", "service1", "component1"));
     expect(service.getServiceComponent("component2")).andThrow(new ServiceComponentNotFoundException("cluster1", "service1", "component2"));
     expect(service.getServiceComponent("component3")).andReturn(component1);
@@ -50,7 +62,8 @@
     expect(component1.convertToResponse()).andReturn(response1);
     expect(component2.convertToResponse()).andReturn(response2);
     // replay mocks
-    replay(clusters, cluster, service, component1,  component2, response1, response2, ambariMetaInfo, stackId, managementController);
+    replay(clusters, cluster, service, component3Info, component4Info, component1,  component2, response1,
+        response2, ambariMetaInfo, stackId, managementController);
 
     //test
     Set<ServiceComponentResponse> setResponses = getComponentResourceProvider(managementController).getComponents(setRequests);
@@ -60,5 +73,6 @@
     assertTrue(setResponses.contains(response1));
     assertTrue(setResponses.contains(response2));
 
-    verify(clusters, cluster, service, component1,  component2, response1, response2, ambariMetaInfo, stackId, managementController);
+    verify(clusters, cluster, service, component3Info, component4Info, component1, component2, response1,
+        response2, ambariMetaInfo, stackId, managementController);
   }
\ No newline at end of file
