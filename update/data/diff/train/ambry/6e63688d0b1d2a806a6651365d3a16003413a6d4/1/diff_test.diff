diff --git a/old_test.java b/new_test.java
index 006cc85..707a7da 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,25 +1,25 @@
 @Test
-  public void testGetAccountContainerName() {
+  public void testGetAccountContainer() {
     AccountService accountService = new InMemAccountService(false, false);
     // Both accountId and containerId are not tracked by AccountService.
-    Pair<String, String> accountContainerName =
-        RouterUtils.getAccountContainerName(accountService, Account.UNKNOWN_ACCOUNT_ID, Container.UNKNOWN_CONTAINER_ID);
-    Assert.assertEquals("Account name should be null", null, accountContainerName.getFirst());
-    Assert.assertEquals("Container name should be null", null, accountContainerName.getSecond());
+    Pair<Account, Container> accountContainer =
+        RouterUtils.getAccountContainer(accountService, Account.UNKNOWN_ACCOUNT_ID, Container.UNKNOWN_CONTAINER_ID);
+    Assert.assertEquals("Account should be null", null, accountContainer.getFirst());
+    Assert.assertEquals("Container should be null", null, accountContainer.getSecond());
 
-    accountContainerName =
-        RouterUtils.getAccountContainerName(accountService, Utils.getRandomShort(random), Utils.getRandomShort(random));
-    Assert.assertEquals("Account name should be null", null, accountContainerName.getFirst());
-    Assert.assertEquals("Container name should be null", null, accountContainerName.getSecond());
+    accountContainer =
+        RouterUtils.getAccountContainer(accountService, Utils.getRandomShort(random), Utils.getRandomShort(random));
+    Assert.assertEquals("Account should be null", null, accountContainer.getFirst());
+    Assert.assertEquals("Container should be null", null, accountContainer.getSecond());
 
     // accountId is tracked by AccountService but containerId not.
     short accountId = Utils.getRandomShort(random);
     short containerId = Utils.getRandomShort(random);
     Account account = new AccountBuilder(accountId, "AccountNameOf" + accountId, Account.AccountStatus.ACTIVE).build();
     accountService.updateAccounts(Arrays.asList(account));
-    accountContainerName = RouterUtils.getAccountContainerName(accountService, accountId, containerId);
-    Assert.assertEquals("Account name doesn't match", "AccountNameOf" + accountId, accountContainerName.getFirst());
-    Assert.assertEquals("Container name should be null", null, accountContainerName.getSecond());
+    accountContainer = RouterUtils.getAccountContainer(accountService, accountId, containerId);
+    Assert.assertEquals("Account doesn't match", account, accountContainer.getFirst());
+    Assert.assertEquals("Container should be null", null, accountContainer.getSecond());
 
     // Both accountId and containerId are tracked by AccountService.
     Container container =
@@ -29,8 +29,7 @@
         new AccountBuilder(accountId, "AccountNameOf" + accountId, Account.AccountStatus.ACTIVE).addOrUpdateContainer(
             container).build();
     accountService.updateAccounts(Arrays.asList(account));
-    accountContainerName = RouterUtils.getAccountContainerName(accountService, accountId, containerId);
-    Assert.assertEquals("Account name doesn't match", "AccountNameOf" + accountId, accountContainerName.getFirst());
-    Assert.assertEquals("Container name doesn't match", "ContainerNameOf" + containerId,
-        accountContainerName.getSecond());
+    accountContainer = RouterUtils.getAccountContainer(accountService, accountId, containerId);
+    Assert.assertEquals("Account doesn't match", account, accountContainer.getFirst());
+    Assert.assertEquals("Container doesn't match", container, accountContainer.getSecond());
   }
\ No newline at end of file
