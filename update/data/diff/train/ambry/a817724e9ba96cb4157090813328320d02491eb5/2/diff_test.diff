diff --git a/old_test.java b/new_test.java
index 913da59..be5bf06 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,38 +1,23 @@
 @Test
   public void processRequestTest() throws Exception {
-    SecurityServiceCallback callback = new SecurityServiceCallback();
     //rest request being null
-    try {
-      securityService.processRequest(null, callback).get();
-      Assert.fail("Should have thrown IllegalArgumentException ");
-    } catch (IllegalArgumentException e) {
-    }
+    TestUtils.assertException(IllegalArgumentException.class, () -> securityService.processRequest(null).get(), null);
+    TestUtils.assertException(IllegalArgumentException.class, () -> securityService.postProcessRequest(null).get(),
+        null);
 
     // without callbacks
     RestMethod[] methods = new RestMethod[]{RestMethod.POST, RestMethod.GET, RestMethod.DELETE, RestMethod.HEAD};
     for (RestMethod restMethod : methods) {
       RestRequest restRequest = createRestRequest(restMethod, "/", null);
-      securityService.processRequest(restRequest, null).get();
-    }
-
-    // with callbacks
-    callback = new SecurityServiceCallback();
-    for (RestMethod restMethod : methods) {
-      RestRequest restRequest = createRestRequest(restMethod, "/", null);
-      securityService.processRequest(restRequest, callback).get();
-      Assert.assertTrue("Callback should have been invoked", callback.callbackLatch.await(1, TimeUnit.SECONDS));
-      Assert.assertNull("Exception should not have been thrown", callback.exception);
-      callback.reset();
+      securityService.processRequest(restRequest).get();
+      securityService.postProcessRequest(restRequest).get();
     }
 
     // with GET sub resources
-    callback.reset();
     for (RestUtils.SubResource subResource : RestUtils.SubResource.values()) {
       RestRequest restRequest = createRestRequest(RestMethod.GET, "/sampleId/" + subResource, null);
-      securityService.processRequest(restRequest, callback).get();
-      Assert.assertTrue("Callback should have been invoked", callback.callbackLatch.await(1, TimeUnit.SECONDS));
-      Assert.assertNull("Exception should not have been thrown", callback.exception);
-      callback.reset();
+      securityService.processRequest(restRequest).get();
+      securityService.postProcessRequest(restRequest).get();
     }
 
     // security service closed
