diff --git a/old_test.java b/new_test.java
index 276cf2c..aeb11d7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -16,7 +16,7 @@
       assertTrue("Disable compaction should succeed", storageManager.controlCompactionForBlobStore(id, false));
       assertTrue("Shutdown should succeed on given store", storageManager.shutdownBlobStore(id));
       assertTrue("Removing store should succeed", storageManager.removeBlobStore(id));
-      assertNull("The store should not exist", storageManager.getStore(id));
+      assertNull("The store should not exist", storageManager.getStore(id, false));
     }
     // test remove store that compaction is still enabled on it, even though it is shutdown
     PartitionId id = replicas.get(2).getPartitionId();
@@ -31,8 +31,7 @@
     storageManager.getDiskManager(id).shutdown();
     assertFalse("Removing store should fail because disk manager is not running", storageManager.removeBlobStore(id));
     // test a store that doesn't exist
-    assertTrue("Removing not-found store should be considered success",
-        storageManager.removeBlobStore(invalidPartition));
+    assertFalse("Removing not-found store should return false", storageManager.removeBlobStore(invalidPartition));
     shutdownAndAssertStoresInaccessible(storageManager, replicas);
 
     // test that remove store when compaction executor is not instantiated
@@ -48,7 +47,7 @@
       assertTrue("Disable compaction should succeed", storageManager.controlCompactionForBlobStore(id, false));
       assertTrue("Shutdown should succeed on given store", storageManager.shutdownBlobStore(id));
       assertTrue("Removing store should succeed", storageManager.removeBlobStore(id));
-      assertNull("The store should not exist", storageManager.getStore(id));
+      assertNull("The store should not exist", storageManager.getStore(id, false));
     }
     shutdownAndAssertStoresInaccessible(storageManager, replicas);
   }
\ No newline at end of file
