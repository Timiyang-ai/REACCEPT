diff --git a/old_product.java b/new_product.java
index 5e1e783..f868d95 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,5 @@
 @VisibleForTesting
-    Matched findNMatches(List<File> logs, int numMatches, int fileOffset, int startByteOffset, String targetStr) {
+    Matched findNMatches(List<Path> logs, int numMatches, int fileOffset, int startByteOffset, String targetStr) {
         logs = drop(logs, fileOffset);
         LOG.debug("{} files to scan", logs.size());
 
@@ -13,7 +13,7 @@
                 break;
             }
 
-            File firstLog = logs.get(0);
+            Path firstLog = logs.get(0);
             Map<String, Object> matchInLog;
             try {
                 LOG.debug("Looking through {}", firstLog);
@@ -30,16 +30,11 @@
             final List<Map<String, Object>> newMatches = new ArrayList<>(matches);
             Map<String, Object> currentFileMatch = new HashMap<>(matchInLog);
             currentFileMatch.put("fileName", fileName);
-            Path firstLogAbsPath;
-            try {
-                firstLogAbsPath = firstLog.getCanonicalFile().toPath();
-            } catch (IOException e) {
-                throw new RuntimeException(e);
-            }
+            Path firstLogAbsPath = firstLog.toAbsolutePath().normalize();
             currentFileMatch.put("port", truncatePathToLastElements(firstLogAbsPath, 2).getName(0).toString());
             newMatches.add(currentFileMatch);
 
-            int newCount = matchCount + ((List<?>)matchInLog.get("matches")).size();
+            int newCount = matchCount + ((List<?>)matchInLog.getOrDefault("matches", Collections.emptyList())).size();
             if (newCount == matchCount) {
                 // matches and matchCount is not changed
                 logs = rest(logs);
