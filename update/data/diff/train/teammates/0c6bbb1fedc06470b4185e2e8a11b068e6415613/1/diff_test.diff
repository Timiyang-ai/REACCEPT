diff --git a/old_test.java b/new_test.java
index 2aa4bba..c00dabb 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,35 +1,38 @@
 @Test
-	public void testCreateSubmission() {
+	public void testCreateSubmission() throws EntityAlreadyExistsException {
 		// SUCCESS
 		SubmissionData s = new SubmissionData();
-		s.course = "Winzor101";
-		s.evaluation = "Evaluation for Winzor101";
-		s.team = "Team Derp";
-		s.reviewee = "herp.derp@gmail.com";
-		s.reviewer = "derp.herp@gmail.com";
-		
-		try {
-			submissionsDb.createSubmission(s);
-		} catch (EntityAlreadyExistsException e) {
-			fail();
-		}
-		
+		s.course = "Computing101";
+		s.evaluation = "Basic Computing Evaluation1";
+		s.team = "team1";
+		s.reviewee = "student1@gmail.com";
+		s.reviewer = "student2@gmail.com";
+		submissionsDb.createSubmission(s);
+			
 		// FAIL : duplicate
 		try {
 			submissionsDb.createSubmission(s);
 			fail();
 		} catch (EntityAlreadyExistsException e) {
-			
+			assertContains(SubmissionsDb.ERROR_CREATE_SUBMISSION_ALREADY_EXISTS, e.getMessage());
 		}
 		
 		// FAIL : invalid params
-		s.reviewer = "herp mc derp";
+		s.reviewer = "invalid.email";
 		try {
 			submissionsDb.createSubmission(s);
 			fail();
 		} catch (AssertionError a) {
-			
+			assertEquals(a.getMessage(), SubmissionData.ERROR_FIELD_REVIEWER);
 		} catch (EntityAlreadyExistsException e) {
 			fail();
 		}
+		
+		// Null params check:
+		try {
+			submissionsDb.createSubmission(null);
+			fail();
+		} catch (AssertionError a) {
+			assertEquals(Common.ERROR_DBLEVEL_NULL_INPUT, a.getMessage());
+		}
 	}
\ No newline at end of file
