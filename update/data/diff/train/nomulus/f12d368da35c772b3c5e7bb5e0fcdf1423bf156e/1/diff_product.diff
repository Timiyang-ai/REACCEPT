diff --git a/old_product.java b/new_product.java
index ab855fe..8212de3 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,8 +6,7 @@ static ReportFiles createReportFiles(
     if (destination.isFile()) {
       // The destination is a single file - find its root, and add this single file to the
       // ReportFiles.
-      return ReportFiles.create(
-          ImmutableMap.of(destinationPath, toByteArraySupplier(destination)), destinationPath);
+      return ReportFiles.createSingleFile(destinationPath, toByteArraySupplier(destination));
     }
 
     if (!destination.isDirectory()) {
@@ -45,15 +44,6 @@ static ReportFiles createReportFiles(
 
     // We weren't given an appropriate entry point. But we still need a single link to all this data
     // - so we'll zip it and just host a single file.
-    //
-    // TODO(guyben):the zip part is still unimplemented, but what we'll want to do is this:
-    // Supplier<byte[]> zippedSupplier = createZippedByteArraySupplier(files);
-    // Path zipFilePath = rootFolder.resolve(rootFolder.getFileName().toString() + ".zip");
-    // return ReportFiles.create(ImmutableMap.of(zipFilePath, zippedSupplier), zipFilePath);
-    Path unimplementedPath = destinationPath.resolve("unimplemented.txt");
-    String content =
-        "Zip files are currently unimplemented. Files:\n"
-            + files.keySet().stream().map(Object::toString).collect(Collectors.joining("\n"));
-    return ReportFiles.create(
-        ImmutableMap.of(unimplementedPath, toByteArraySupplier(content)), unimplementedPath);
+    Path zipFilePath = destinationPath.resolve(destinationPath.getFileName().toString() + ".zip");
+    return ReportFiles.createSingleFile(zipFilePath, createZippedByteArraySupplier(files));
   }
\ No newline at end of file
