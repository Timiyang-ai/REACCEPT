diff --git a/old_test.java b/new_test.java
index 70fe462..66025df 100644
--- a/old_test.java
+++ b/new_test.java
@@ -11,34 +11,32 @@
                 .filter(x -> x.deviceId().equals(d1p0.deviceId()))
                 .findFirst()
                 .get();
-        assertThat(rule1.deviceId(), is(d1p0.deviceId()));
+        verifyIdAndPriority(rule1, d1p0.deviceId());
         assertThat(rule1.selector(),
                 is(DefaultTrafficSelector.builder(selector).matchInPort(d1p0.port()).build()));
         assertThat(rule1.treatment(),
                 is(DefaultTrafficTreatment.builder().setOutput(d1p1.port()).build()));
-        assertThat(rule1.priority(), is(intent.priority()));
+
 
         FlowRule rule2 = rules.stream()
                 .filter(x -> x.deviceId().equals(d2p0.deviceId()))
                 .findFirst()
                 .get();
-        assertThat(rule2.deviceId(), is(d2p0.deviceId()));
+        verifyIdAndPriority(rule2, d2p0.deviceId());
         assertThat(rule2.selector(),
                 is(DefaultTrafficSelector.builder(selector).matchInPort(d2p0.port()).build()));
         assertThat(rule2.treatment(),
                 is(DefaultTrafficTreatment.builder().setOutput(d2p1.port()).build()));
-        assertThat(rule2.priority(), is(intent.priority()));
 
         FlowRule rule3 = rules.stream()
                 .filter(x -> x.deviceId().equals(d3p0.deviceId()))
                 .findFirst()
                 .get();
-        assertThat(rule3.deviceId(), is(d3p1.deviceId()));
+        verifyIdAndPriority(rule3, d3p1.deviceId());
         assertThat(rule3.selector(),
                 is(DefaultTrafficSelector.builder(selector).matchInPort(d3p1.port()).build()));
         assertThat(rule3.treatment(),
                 is(DefaultTrafficTreatment.builder(treatment).setOutput(d3p0.port()).build()));
-        assertThat(rule3.priority(), is(intent.priority()));
 
         sut.deactivate();
     }
\ No newline at end of file
