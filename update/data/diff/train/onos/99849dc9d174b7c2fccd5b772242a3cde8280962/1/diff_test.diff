diff --git a/old_test.java b/new_test.java
index 49c716e..7d23354 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,15 +1,15 @@
 @Test
     public void testGetFlowByAppId() {
-        setupMockFlowRules();
+        setupMockFlows();
 
         expect(mockApplicationService.getId(anyObject())).andReturn(APP_ID).anyTimes();
         replay(mockApplicationService);
 
-        expect(mockFlowService.getFlowRulesById(APP_ID)).andReturn(flowRules).anyTimes();
+        expect(mockFlowService.getFlowEntriesById(APP_ID)).andReturn(flowEntries).anyTimes();
         replay(mockFlowService);
 
         final WebTarget wt = target();
-        final String response = wt.path("flows/application/1").request().get(String.class);
+        final String response = wt.path("/flows/application/1").request().get(String.class);
         final JsonObject result = Json.parse(response).asObject();
         assertThat(result, notNullValue());
 
@@ -17,8 +17,8 @@
         assertThat(result.names().get(0), is("flows"));
         final JsonArray jsonFlows = result.get("flows").asArray();
         assertThat(jsonFlows, notNullValue());
-        assertThat(jsonFlows, hasFlowRule(flowRule1));
-        assertThat(jsonFlows, hasFlowRule(flowRule2));
-        assertThat(jsonFlows, hasFlowRule(flowRule3));
-        assertThat(jsonFlows, hasFlowRule(flowRule4));
+        assertThat(jsonFlows, hasFlowRule(flow1));
+        assertThat(jsonFlows, hasFlowRule(flow2));
+        assertThat(jsonFlows, hasFlowRule(flow3));
+        assertThat(jsonFlows, hasFlowRule(flow4));
     }
\ No newline at end of file
