diff --git a/old_test.java b/new_test.java
index f494401..4f494c8 100644
--- a/old_test.java
+++ b/new_test.java
@@ -14,14 +14,12 @@
         Future<RepairResult> result = algo.start();
         verify(mailbox, times(1)).send(any(long[].class), any(Iv2RepairLogRequestMessage.class));
 
-        final long uid = uig.getNextUniqueId();
-
         // has a frag for txn 1000. MP handle is 1000L
-        algo.deliver(makeRealAckResponse(requestId, 1L, 0, 2, txnEgo(1000L), m_hashinatorConfig, uid));
+        algo.deliver(makeRealAckResponse(requestId, 1L, 0, 2, txnEgo(1000L), m_hashinatorConfig));
         algo.deliver(makeRealFragResponse(requestId, 1L, 1, 2, txnEgo(1000L)));
 
         // has only the normal ack. Never saw an MP transaction.
-        algo.deliver(makeRealAckResponse(requestId, 2L, 0, 1, Long.MAX_VALUE, m_hashinatorConfig, uid));
+        algo.deliver(makeRealAckResponse(requestId, 2L, 0, 1, Long.MAX_VALUE, m_hashinatorConfig));
 
         // also has a complete. MP handle is 1000L
         // and deliver a newer version of the hashinator config
@@ -29,12 +27,12 @@
                 m_hashinatorConfig.getFirst()+1,
                 m_hashinatorConfig.getSecond()
                 );
-        algo.deliver(makeRealAckResponse(requestId, 3L, 0, 3, txnEgo(1000L), torv3, uid));
+        algo.deliver(makeRealAckResponse(requestId, 3L, 0, 3, txnEgo(1000L), torv3));
         algo.deliver(makeRealFragResponse(requestId, 3L, 1, 3, txnEgo(1000L)));
         algo.deliver(makeRealCompleteResponse(requestId, 3L, 2, 3, txnEgo(1000L)));
 
         // deliver the same complete from the MPI's repair log
-        algo.deliver(makeRealAckResponse(requestId, 4L, 0, 2, txnEgo(1000L), m_hashinatorConfig, uid));
+        algo.deliver(makeRealAckResponse(requestId, 4L, 0, 2, txnEgo(1000L), m_hashinatorConfig));
         algo.deliver(makeRealCompleteResponse(requestId, 4L, 1, 2, txnEgo(1000L)));
 
         // Verify that we send a complete to every site.
@@ -44,7 +42,6 @@
         needsRepair.add(3L);
         verify(mailbox, times(1)).repairReplicasWith(eq(needsRepair), any(Iv2RepairLogResponseMessage.class));
         assertEquals(txnEgo(1000L), result.get().m_txnId);
-        assertEquals(uid, result.get().m_uniqueId);
 
         // check if the hashinator was updated to the newer version
         assertEquals(torv3.getFirst(), TheHashinator.getCurrentVersionedConfig().getFirst());
