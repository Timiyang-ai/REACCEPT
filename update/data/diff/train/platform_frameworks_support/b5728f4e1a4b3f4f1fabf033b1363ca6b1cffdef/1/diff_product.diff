diff --git a/old_product.java b/new_product.java
index 56c6879..eb5531e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,10 +1,10 @@
 JobInfo convert(WorkSpec workSpec) {
-        Constraints constraints = workSpec.getConstraints();
+        Constraints constraints = workSpec.constraints;
         int jobId = mIdGenerator.nextJobSchedulerId();
         // TODO(janclarin): Support newer required network types if unsupported by API version.
         int jobInfoNetworkType = convertNetworkType(constraints.getRequiredNetworkType());
         PersistableBundle extras = new PersistableBundle();
-        extras.putString(EXTRA_WORK_SPEC_ID, workSpec.getId());
+        extras.putString(EXTRA_WORK_SPEC_ID, workSpec.id);
         extras.putBoolean(EXTRA_IS_PERIODIC, workSpec.isPeriodic());
         JobInfo.Builder builder = new JobInfo.Builder(jobId, mWorkServiceComponent)
                 .setRequiredNetworkType(jobInfoNetworkType)
@@ -14,23 +14,23 @@ JobInfo convert(WorkSpec workSpec) {
 
         if (!constraints.requiresDeviceIdle()) {
             // Device Idle and Backoff Criteria cannot be set together
-            int backoffPolicy = workSpec.getBackoffPolicy() == BackoffPolicy.LINEAR
+            int backoffPolicy = workSpec.backoffPolicy == BackoffPolicy.LINEAR
                     ? JobInfo.BACKOFF_POLICY_LINEAR : JobInfo.BACKOFF_POLICY_EXPONENTIAL;
-            builder.setBackoffCriteria(workSpec.getBackoffDelayDuration(), backoffPolicy);
+            builder.setBackoffCriteria(workSpec.backoffDelayDuration, backoffPolicy);
         }
 
         if (workSpec.isPeriodic()) {
             if (Build.VERSION.SDK_INT >= 24) {
-                builder.setPeriodic(workSpec.getIntervalDuration(), workSpec.getFlexDuration());
+                builder.setPeriodic(workSpec.intervalDuration, workSpec.flexDuration);
             } else {
                 Logger.debug(TAG,
                         "Flex duration is currently not supported before API 24. Ignoring.");
-                builder.setPeriodic(workSpec.getIntervalDuration());
+                builder.setPeriodic(workSpec.intervalDuration);
             }
         } else {
             // Even if a Work has no constraints, setMinimumLatency(0) still needs to be called due
             // to an issue in JobInfo.Builder#build and JobInfo with no constraints. See b/67716867.
-            builder.setMinimumLatency(workSpec.getInitialDelay());
+            builder.setMinimumLatency(workSpec.initialDelay);
         }
 
         if (Build.VERSION.SDK_INT >= 24 && constraints.hasContentUriTriggers()) {
