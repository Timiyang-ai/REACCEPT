diff --git a/old_test.java b/new_test.java
index d77c02a..5bbba95 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,31 +4,31 @@
         Object[] btree = new Object[0];
         CallsMonitor monitor = new CallsMonitor();
 
-        btree = BTree.update(btree, CMP, Arrays.asList(1), true, monitor);
+        btree = BTree.update(btree, CMP, Arrays.asList(1), monitor);
         assertArrayEquals(new Object[] {1, null}, btree);
         assertEquals(1, monitor.getNumberOfCalls(1));
 
         monitor.clear();
-        btree = BTree.update(btree, CMP, Arrays.asList(2), true, monitor);
+        btree = BTree.update(btree, CMP, Arrays.asList(2), monitor);
         assertArrayEquals(new Object[] {1, 2}, btree);
         assertEquals(1, monitor.getNumberOfCalls(2));
 
         // with existing value
         monitor.clear();
-        btree = BTree.update(btree, CMP, Arrays.asList(1), true, monitor);
+        btree = BTree.update(btree, CMP, Arrays.asList(1), monitor);
         assertArrayEquals(new Object[] {1, 2}, btree);
         assertEquals(1, monitor.getNumberOfCalls(1));
 
         // with two non-existing values
         monitor.clear();
-        btree = BTree.update(btree, CMP, Arrays.asList(3, 4), true, monitor);
+        btree = BTree.update(btree, CMP, Arrays.asList(3, 4), monitor);
         assertArrayEquals(new Object[] {1, 2, 3, 4}, btree);
         assertEquals(1, monitor.getNumberOfCalls(3));
         assertEquals(1, monitor.getNumberOfCalls(4));
 
-        // with one existing value and one non existing value in disorder
+        // with one existing value and one non existing value
         monitor.clear();
-        btree = BTree.update(btree, CMP, Arrays.asList(5, 2), false, monitor);
+        btree = BTree.update(btree, CMP, Arrays.asList(2, 5), monitor);
         assertArrayEquals(new Object[] {3, new Object[]{1, 2}, new Object[]{4, 5}}, btree);
         assertEquals(1, monitor.getNumberOfCalls(2));
         assertEquals(1, monitor.getNumberOfCalls(5));
