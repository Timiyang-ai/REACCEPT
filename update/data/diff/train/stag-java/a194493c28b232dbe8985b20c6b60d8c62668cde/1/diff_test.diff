diff --git a/old_test.java b/new_test.java
index 7142ae0..7351f77 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,10 +2,11 @@
     public void getConcreteMembers_isCorrect() throws Exception {
         Element genericElement = Utils.getElementFromClass(DummyGenericClass.class);
         assertNotNull(genericElement);
-        Map<VariableElement, TypeMirror> genericMembers = new HashMap<>();
+
+        Map<FieldAccessor, TypeMirror> genericMembers = new HashMap<>();
         for (Element element : genericElement.getEnclosedElements()) {
             if (element instanceof VariableElement) {
-                genericMembers.put((VariableElement) element, element.asType());
+                genericMembers.put(new DirectFieldAccessor((VariableElement) element), element.asType());
             }
         }
 
@@ -18,46 +19,46 @@
 
         assertNotNull(genericType);
 
-        LinkedHashMap<VariableElement, TypeMirror> members =
+        LinkedHashMap<FieldAccessor, TypeMirror> members =
                 TypeUtils.getConcreteMembers(concreteType, (TypeElement) types.asElement(genericType), genericMembers);
 
 
         TypeMirror stringType = Utils.getTypeMirrorFromClass(String.class);
         assertNotNull(stringType);
 
-        for (Entry<VariableElement, TypeMirror> entry : members.entrySet()) {
-            if (entry.getKey().getSimpleName().contentEquals("testObject")) {
+        for (Entry<FieldAccessor, TypeMirror> entry : members.entrySet()) {
+            if (entry.getKey().createGetterCode().contentEquals("testObject = ")) {
 
                 assertTrue(entry.getValue().toString().equals(stringType.toString()));
 
-            } else if (entry.getKey().getSimpleName().contentEquals("testList")) {
+            } else if (entry.getKey().createGetterCode().contentEquals("testList = ")) {
 
                 assertTrue(entry.getValue()
                                    .toString()
                                    .equals(types.getDeclaredType(Utils.getElementFromClass(ArrayList.class),
                                            stringType).toString()));
 
-            } else if (entry.getKey().getSimpleName().contentEquals("testMap")) {
+            } else if (entry.getKey().createGetterCode().contentEquals("testMap = ")) {
 
                 assertTrue(entry.getValue()
                                    .toString()
                                    .equals(types.getDeclaredType(Utils.getElementFromClass(HashMap.class), stringType,
                                                                  stringType).toString()));
 
-            } else if (entry.getKey().getSimpleName().contentEquals("testSet")) {
+            } else if (entry.getKey().createGetterCode().contentEquals("testSet = ")) {
 
                 assertTrue(entry.getValue()
                                    .toString()
                                    .equals(types.getDeclaredType(Utils.getElementFromClass(HashSet.class), stringType)
                                                    .toString()));
-            } else if (entry.getKey().getSimpleName().contentEquals("testArrayMap")) {
+            } else if (entry.getKey().createGetterCode().contentEquals("testArrayMap = ")) {
                 TypeMirror listString = types.getDeclaredType(Utils.getElementFromClass(List.class), stringType);
 
                 assertTrue(entry.getValue()
                         .toString()
                         .equals(types.getDeclaredType(Utils.getElementFromClass(HashMap.class), stringType, listString)
                                 .toString()));
-            } else if (entry.getKey().getSimpleName().contentEquals("testListMap")) {
+            } else if (entry.getKey().createGetterCode().contentEquals("testListMap = ")) {
                 TypeMirror mapStringString = types.getDeclaredType(Utils.getElementFromClass(Map.class), stringType, stringType);
                 assertTrue(entry.getValue()
                         .toString()
