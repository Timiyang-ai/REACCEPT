diff --git a/old_product.java b/new_product.java
index 25c90f1..e8a0f60 100644
--- a/old_product.java
+++ b/new_product.java
@@ -20,67 +20,47 @@
             if (length == 0) {
                 return 0;
             }
-            
-            // allocate enough space for bytes if the default length is
-            // inadequate
-            int availableLen = in.available();     
-            if (Math.min(availableLen, length) > bytes.capacity()) {
-                bytes = ByteBuffer.allocate(availableLen);
-            }
-            
+
             CharBuffer out = CharBuffer.wrap(buf, offset, length);
             CoderResult result = CoderResult.UNDERFLOW;
-            byte[] a = bytes.array();
-            boolean has_been_read = false;
 
-            if (!bytes.hasRemaining() || bytes.limit() == bytes.capacity()) {
-                // Nothing is available in the buffer...
-                if (!bytes.hasRemaining()) {
-                    bytes.clear();
-                }
-                int readed = in.read(a, bytes.arrayOffset(), bytes.remaining());
-                if (readed == -1) {
-                    endOfInput = true;
-                    return -1;
-                }
-                bytes.limit(readed);
-                has_been_read = true;
-            }
+            // bytes.remaining() indicates number of bytes in buffer
+            // when 1-st time entered, it'll be equal to zero
+            boolean needInput = !bytes.hasRemaining();
 
             while (out.hasRemaining()) {
-                if (bytes.hasRemaining()) {
-                    result = decoder.decode(bytes, out, false);
-                    if (!bytes.hasRemaining() && endOfInput) {
-                        decoder.decode(bytes, out, true);
-                        decoder.flush(out);
-                        decoder.reset();
+                // fill the buffer if needed
+                if (needInput) {
+                    if ((in.available() == 0) && (out.position() > offset)) {
+                        // we could return the result without blocking read
                         break;
                     }
-                    if (!out.hasRemaining()
-                            || bytes.position() == bytes.limit()) {
-                        bytes.compact();
-                    }
-                }
-                if (in.available() > 0
-                        && (!has_been_read && out.hasRemaining())
-                        || out.position() == 0) {
-                    bytes.compact();
-                    int to_read = bytes.remaining();
-                    int off = bytes.arrayOffset() + bytes.position();
 
-                    to_read = in.read(a, off, to_read);
-                    if (to_read == -1) {
-                        if (bytes.hasRemaining()) {
-                            bytes.flip();
-                        }
+                    int to_read = bytes.capacity() - bytes.limit();
+                    int off = bytes.arrayOffset() + bytes.limit();
+                    int was_red = in.read(bytes.array(), off, to_read);
+
+                    if (was_red == -1) {
                         endOfInput = true;
                         break;
+                    } else if (was_red == 0) {
+                        break;
                     }
-                    has_been_read = true;
-                    if (to_read > 0) {
-                        bytes.limit(bytes.position() + to_read);
+                    bytes.limit(bytes.limit() + was_red);
+                    needInput = false;
+                }
+
+                // decode bytes
+                result = decoder.decode(bytes, out, false);
+
+                if (result.isUnderflow()) {
+                    // compact the buffer if no space left
+                    if (bytes.limit() == bytes.capacity()) {
+                        bytes.compact();
+                        bytes.limit(bytes.position());
                         bytes.position(0);
                     }
+                    needInput = true;
                 } else {
                     break;
                 }
@@ -91,7 +71,7 @@
                 // FIXME: should flush at first, but seems ICU has a bug that it
                 // will throw IAE if some malform/unmappable bytes found during
                 // decoding
-                // result = decoder.flush(chars);
+                // result = decoder.flush(out);
                 decoder.reset();
             }
             if (result.isMalformed()) {
@@ -99,9 +79,6 @@
             } else if (result.isUnmappable()) {
                 throw new UnmappableCharacterException(result.length());
             }
-            if (result == CoderResult.OVERFLOW && bytes.position() != 0) {
-                bytes.flip();
-            }
 
             return out.position() - offset == 0 ? -1 : out.position() - offset;
         }
