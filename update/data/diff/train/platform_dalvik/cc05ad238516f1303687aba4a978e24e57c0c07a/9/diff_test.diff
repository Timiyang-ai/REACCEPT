diff --git a/old_test.java b/new_test.java
index 2c34c17..0dfd667 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,33 +1,34 @@
-@TestInfo(
-      level = TestLevel.PARTIAL,
-      purpose = "Functional test.",
-      targets = {
-        @TestTarget(
-          methodName = "JarOutputStream",
-          methodArgs = {java.io.OutputStream.class, java.util.jar.Manifest.class}
-        )
-    })
+@TestTargetNew(
+        level = TestLevel.PARTIAL_COMPLETE,
+        notes = "Functional test.",
+        method = "JarOutputStream",
+        args = {java.io.OutputStream.class, java.util.jar.Manifest.class}
+    )
+    @BrokenTest("Support_Exec.execJava is not so simple to use: Harmony Test cannot be easily adapted.")
+    @AndroidOnly("dalvik vm specific")
     public void test_main_class_in_another_jar() throws Exception {
         File fooJar = File.createTempFile("hyts_", ".jar");
         File barJar = File.createTempFile("hyts_", ".jar");
         fooJar.deleteOnExit();
         barJar.deleteOnExit();
-        
+
         // create the manifest
         Manifest man = new Manifest();
         Attributes att = man.getMainAttributes();
         att.put(Attributes.Name.MANIFEST_VERSION, "1.0");
         att.put(Attributes.Name.MAIN_CLASS, "foo.bar.execjartest.Foo");
         att.put(Attributes.Name.CLASS_PATH, fooJar.getName());
-        
+
         File resources = Support_Resources.createTempFolder();
 
-        JarOutputStream joutFoo = new JarOutputStream(new FileOutputStream(fooJar));
+        JarOutputStream joutFoo = new JarOutputStream(new FileOutputStream(
+                fooJar));
         joutFoo.putNextEntry(new JarEntry("foo/bar/execjartest/Foo.class"));
         joutFoo.write(getResource(resources, "hyts_Foo.ser"));
         joutFoo.close();
-        
-        JarOutputStream joutBar = new JarOutputStream(new FileOutputStream(barJar), man);
+
+        JarOutputStream joutBar = new JarOutputStream(new FileOutputStream(
+                barJar), man);
         joutBar.putNextEntry(new JarEntry("foo/bar/execjartest/Bar.class"));
         joutBar.write(getResource(resources, "hyts_Bar.ser"));
         joutBar.close();
@@ -35,7 +36,7 @@
         String[] args = new String[] {"-jar", barJar.getAbsolutePath()};
 
         // execute the JAR and read the result
-        String    res = Support_Exec.execJava(args, null, false);
+        String res = Support_Exec.execJava(args, null, false);
 
         assertTrue("Error executing JAR : result returned was incorrect.", res
                 .startsWith("FOOBAR"));
