diff --git a/old_product.java b/new_product.java
index 4a16502..f3344de 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,23 +1,19 @@
-public Boolean subscribe(String callback, String topic, String verify, long lease_seconds, String secret,
-        String verify_token) {
-        Logger.getLogger(Hub.class.getName()).log(Level.FINE, "{0} wants to subscribe to {1}", new Object[]{callback, topic});
+public Boolean subscribe(final String callback, final String topic, final String verify, final long lease_seconds, final String secret,
+            final String verify_token) {
+        Logger.getLogger(Hub.class.getName()).log(Level.FINE, "{0} wants to subscribe to {1}", new Object[] { callback, topic });
         try {
             try {
                 assert callback != null : "Callback URL is required.";
                 assert topic != null : "Topic URL is required.";
 
-                URI uri = new URI(callback);
-                assert this.validSchemes.contains(uri.getScheme()) : "Not a valid protocol " + uri.getScheme();
-                assert this.validPorts.isEmpty() || this.validPorts.contains(uri.getPort()) : "Not a valid port " +
-                uri.getPort();
-                assert this.validTopics.isEmpty() || this.validTopics.contains(topic) : "Not a supported topic " +
-                topic;
-            } catch (URISyntaxException ex) {
+                final URI uri = new URI(callback);
+                assert validSchemes.contains(uri.getScheme()) : "Not a valid protocol " + uri.getScheme();
+                assert validPorts.isEmpty() || validPorts.contains(uri.getPort()) : "Not a valid port " + uri.getPort();
+                assert validTopics.isEmpty() || validTopics.contains(topic) : "Not a supported topic " + topic;
+            } catch (final URISyntaxException ex) {
                 assert false : "Not a valid URI " + callback;
             }
-            assert (verify != null) &&
-            (verify.equals(Subscriber.VERIFY_ASYNC) || verify.equals(Subscriber.VERIFY_SYNC)) : "Unexpected verify value " +
-            verify;
+            assert verify != null && (verify.equals(Subscriber.VERIFY_ASYNC) || verify.equals(Subscriber.VERIFY_SYNC)) : "Unexpected verify value " + verify;
 
             final Subscriber subscriber = new Subscriber();
             subscriber.setCallback(callback);
@@ -27,18 +23,19 @@ public Boolean subscribe(String callback, String topic, String verify, long leas
             subscriber.setVerify(verify);
             subscriber.setVertifyToken(verify_token);
 
-            VerificationCallback verified = new VerificationCallback() {
-                    @Override
-                    public void onVerify(boolean verified) {
-                        if (verified) {
-                            Logger.getLogger(Hub.class.getName()).log(Level.FINE, "Verified {0} subscribed to {1}", new Object[]{subscriber.getCallback(), subscriber.getTopic()});
-                            dao.addSubscriber(subscriber);
-                        }
+            final VerificationCallback verified = new VerificationCallback() {
+                @Override
+                public void onVerify(final boolean verified) {
+                    if (verified) {
+                        Logger.getLogger(Hub.class.getName()).log(Level.FINE, "Verified {0} subscribed to {1}",
+                                new Object[] { subscriber.getCallback(), subscriber.getTopic() });
+                        dao.addSubscriber(subscriber);
                     }
-                };
+                }
+            };
 
             if (Subscriber.VERIFY_SYNC.equals(subscriber.getVerify())) {
-                boolean result = verifier.verifySubcribeSyncronously(subscriber);
+                final boolean result = verifier.verifySubcribeSyncronously(subscriber);
                 verified.onVerify(result);
 
                 return result;
@@ -47,9 +44,9 @@ public Boolean subscribe(String callback, String topic, String verify, long leas
 
                 return null;
             }
-        } catch (AssertionError ae) {
+        } catch (final AssertionError ae) {
             throw new HttpStatusCodeException(400, ae.getMessage(), ae);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new HttpStatusCodeException(500, e.getMessage(), e);
         }
     }
\ No newline at end of file
