diff --git a/old_test.java b/new_test.java
index 65ded99..800d581 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,7 +3,7 @@
         String streamResourceURI = getURI() + "v1/scopes/" + scope1 + "/streams";
 
         // Test to create a stream which doesn't exist
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
         Response response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         StreamProperty streamResponseActual = response.readEntity(StreamProperty.class);
@@ -11,7 +11,7 @@
         response.close();
 
         // Test to create a stream which doesn't exist and has no Retention Policy set.
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest4)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         streamResponseActual = response.readEntity(StreamProperty.class);
@@ -21,13 +21,13 @@
         // Test to create a stream with internal stream name
         final CreateStreamRequest streamRequest = new CreateStreamRequest();
         streamRequest.setStreamName(NameUtils.getInternalNameForStream("stream"));
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus2);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus2);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(streamRequest)).invoke();
         assertEquals("Create Stream Status", 400, response.getStatus());
         response.close();
 
         // Test to create a stream which doesn't exist and have Scaling Policy FIXED_NUM_SEGMENTS
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest5)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         streamResponseActual = response.readEntity(StreamProperty.class);
@@ -35,13 +35,13 @@
         response.close();
 
         // Test to create a stream that already exists
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus2);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus2);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest)).invoke();
         assertEquals("Create Stream Status", 409, response.getStatus());
         response.close();
 
         // Test for validation of create stream request object
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus3);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus3);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest2)).invoke();
         // TODO: Server should be returning 400 here, change this once issue
         // https://github.com/pravega/pravega/issues/531 is fixed.
@@ -49,7 +49,7 @@
         response.close();
 
         // Test create stream for non-existent scope
-        when(mockControllerService.createStream(any(), anyLong(), any())).thenReturn(createStreamStatus4);
+        when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus4);
         response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest3)).invoke();
         assertEquals("Create Stream Status for non-existent scope", 404, response.getStatus());
         response.close();
