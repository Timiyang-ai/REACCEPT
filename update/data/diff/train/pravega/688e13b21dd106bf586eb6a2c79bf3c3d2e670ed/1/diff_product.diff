diff --git a/old_product.java b/new_product.java
index a199868..0ca6800 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,10 +2,12 @@
     public void listScopes(final SecurityContext securityContext, final AsyncResponse asyncResponse) {
         long traceId = LoggerHelpers.traceEnter(log, "listScopes");
 
-        Principal principal;
+        final Principal principal;
+        final List<String> authHeader = getAuthorizationHeader();
+
         try {
-            principal = authenticate();
-            authorize("/", principal, READ);
+            principal = restAuthHelper.authenticate(authHeader);
+            restAuthHelper.authorize(authHeader, AuthResourceRepresentation.ofScopes(), principal, READ);
         } catch (AuthException e) {
             log.warn("Get scopes failed due to authentication failure.", e);
             asyncResponse.resume(Response.status(Status.fromStatusCode(e.getResponseCode())).build());
@@ -17,7 +19,18 @@
                          .thenApply(scopesList -> {
                              ScopesList scopes = new ScopesList();
                              scopesList.forEach(scope -> {
-                                     scopes.addScopesItem(new ScopeProperty().scopeName(scope));
+                                 try {
+                                     if (restAuthHelper.isAuthorized(authHeader,
+                                             AuthResourceRepresentation.ofScope(scope),
+                                             principal, READ)) {
+                                         scopes.addScopesItem(new ScopeProperty().scopeName(scope));
+                                     }
+                                 } catch (AuthException e) {
+                                     log.warn(e.getMessage(), e);
+                                     // Ignore. This exception occurs under abnormal circumstances and not to determine
+                                     // whether the user is authorized. In case it does occur, we assume that the user
+                                     // is unauthorized.
+                                 }
                              });
                              return Response.status(Status.OK).entity(scopes).build(); })
                          .exceptionally(exception -> {
