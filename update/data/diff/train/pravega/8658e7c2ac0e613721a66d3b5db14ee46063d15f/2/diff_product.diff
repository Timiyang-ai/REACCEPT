diff --git a/old_product.java b/new_product.java
index 8e877a5..f3f0aa7 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,27 +1,27 @@
-synchronized WriteResult write(InputStream data, int remainingLength, int predecessorAddress) throws IOException {
+synchronized WriteResult write(BufferView data, int predecessorAddress) {
         if (this.usedBlockCount >= this.layout.blocksPerBuffer()) {
             // Full
             return null;
         }
 
-        int lastBlockLength = remainingLength % this.layout.blockSize();
-        if (lastBlockLength == 0 && remainingLength > 0) {
-            lastBlockLength = this.layout.blockSize();
-        }
-
-        ByteBuf metadataBuf = getBlockBuffer(0);
+        ByteBuf metadataBuf = getMetadataBlock();
         long blockMetadata = metadataBuf.getLong(0);
         int blockId = this.layout.getNextFreeBlockId(blockMetadata);
         assert blockId != CacheLayout.NO_BLOCK_ID;
         final int firstBlockId = blockId;
+        int dataOffset = 0;
         try {
-            while (blockId != CacheLayout.NO_BLOCK_ID) {
+            // Use a do-while loop since we want to properly handle the (valid) case when data.getLength() == 0.
+            do {
                 int bufIndex = blockId * this.layout.blockMetadataSize();
                 blockMetadata = metadataBuf.getLong(bufIndex);
                 assert !this.layout.isUsedBlock(blockMetadata);
-                int blockLength = Math.min(remainingLength, this.layout.blockSize());
+
+                // Copy the data to the block.
+                int blockLength = Math.min(data.getLength() - dataOffset, this.layout.blockSize());
                 if (blockLength > 0) {
-                    blockLength = writeBlock(getBlockBuffer(blockId), 0, data, blockLength);
+                    data.slice(dataOffset, blockLength).copyTo(getWriteableBlock(blockId, 0));
+                    dataOffset += blockLength;
                 }
 
                 // Update block metadata.
@@ -32,13 +32,7 @@ synchronized WriteResult write(InputStream data, int remainingLength, int predec
                 // Move on to the next block to write.
                 predecessorAddress = this.layout.calculateAddress(this.id, blockId);
                 blockId = this.layout.getNextFreeBlockId(blockMetadata);
-                remainingLength -= blockLength;
-
-                if (remainingLength <= 0) {
-                    // We are done.
-                    break;
-                }
-            }
+            } while (blockId != CacheLayout.NO_BLOCK_ID && dataOffset < data.getLength());
         } catch (Throwable ex) {
             if (!Exceptions.mustRethrow(ex)) {
                 // We wrote something, but got interrupted. We need to clean up whatever we wrote so we don't leave
@@ -54,5 +48,5 @@ synchronized WriteResult write(InputStream data, int remainingLength, int predec
         blockMetadata = this.layout.setNextFreeBlockId(blockMetadata, blockId);
         metadataBuf.setLong(0, blockMetadata);
 
-        return new WriteResult(remainingLength, predecessorAddress, firstBlockId);
+        return new WriteResult(dataOffset, predecessorAddress, firstBlockId);
     }
\ No newline at end of file
