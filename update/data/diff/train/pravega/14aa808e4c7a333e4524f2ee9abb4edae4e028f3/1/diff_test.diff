diff --git a/old_test.java b/new_test.java
index ae09668..819797c 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,8 +1,7 @@
 @Test
     public void testGetWritesToExecute() {
-        final int ledgerChangeIndex = ITEM_COUNT - MAX_PARALLELISM / 2;
-        val q = new WriteQueue(MAX_PARALLELISM);
-
+        final int ledgerChangeIndex = ITEM_COUNT - 5;
+        val q = new WriteQueue();
         val writes = new ArrayList<Write>();
         int ledgerId = 0;
         for (int i = 0; i < ITEM_COUNT; i++) {
@@ -15,12 +14,7 @@
             writes.add(w);
         }
 
-        // 1. Throttled
-        val throttledResult = q.getWritesToExecute(Long.MAX_VALUE);
-        AssertExtensions.assertListEquals("Unexpected writes fetched with count throttling.",
-                writes.subList(0, MAX_PARALLELISM), throttledResult, Object::equals);
-
-        // 2. Max size reached.
+        // 1. Max size reached.
         int sizeLimit = 10;
         val maxSizeResult = q.getWritesToExecute(sizeLimit);
         val expectedMaxSizeResult = new ArrayList<Write>();
@@ -35,7 +29,7 @@
         AssertExtensions.assertListEquals("Unexpected writes fetched with size limit.",
                 expectedMaxSizeResult, maxSizeResult, Object::equals);
 
-        //3. Complete a few writes, then mark a few as in progress.
+        //2. Complete a few writes, then mark a few as in progress.
         writes.get(0).setEntryId(0);
         writes.get(0).complete();
         writes.get(1).beginAttempt();
@@ -43,16 +37,16 @@
 
         // We expect to skip over the first one and second one, but count the second one when doing throttling.
         AssertExtensions.assertListEquals("Unexpected writes fetched when some writes in progress (at beginning).",
-                writes.subList(2, 1 + MAX_PARALLELISM), result1, Object::equals);
+                writes.subList(2, ledgerChangeIndex), result1, Object::equals);
 
-        //4. Mark a few writes as in progress after a non-progress write.
+        //3. Mark a few writes as in progress after a non-progress write.
         writes.get(3).beginAttempt();
         val result2 = q.getWritesToExecute(Long.MAX_VALUE);
         Assert.assertEquals("Unexpected writes fetched when in-progress writes exist after non-in-progress writes.",
                 0, result2.size());
 
-        //5. LedgerChange.
-        int beginIndex = ledgerChangeIndex - MAX_PARALLELISM / 2;
+        //4. LedgerChange.
+        int beginIndex = ledgerChangeIndex - 5;
         for (int i = 0; i < beginIndex; i++) {
             writes.get(i).setEntryId(i);
             writes.get(i).complete();
