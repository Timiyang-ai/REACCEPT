diff --git a/old_product.java b/new_product.java
index 5b213c1..b487e76 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,18 +2,13 @@ public CompletableFuture<Void> createNewStreamSegment(String streamSegmentName,
         long traceId = LoggerHelpers.traceEnterWithContext(log, traceObjectId, "createNewStreamSegment", streamSegmentName);
         long segmentId = this.containerMetadata.getStreamSegmentId(streamSegmentName, true);
         if (isValidStreamSegmentId(segmentId)) {
+            // Quick fail: see if this is an active Segment, and if so, don't bother with anything else.
             return FutureHelpers.failedFuture(new StreamSegmentExistsException(streamSegmentName));
         }
 
-        // Create the StreamSegment, and then assign a Unique Internal Id to it.
-        // Note: this is slightly sub-optimal, as we create the stream, but getOrAssignStreamSegmentId makes another call
-        // to get the same info about the StreamSegmentId.
         TimeoutTimer timer = new TimeoutTimer(timeout);
         return this.storage
                 .create(streamSegmentName, timer.getRemaining())
-                .thenComposeAsync(si -> {
-                    si = attachAttributes(si, attributes);
-                    return persistInDurableLog(si, timeout);
-                }, this.executor)
-                .thenAccept(id -> LoggerHelpers.traceLeave(log, traceObjectId, "createNewStreamSegment", traceId, streamSegmentName, id));
+                .thenComposeAsync(si -> this.stateStore.put(streamSegmentName, getState(si, attributes), timer.getRemaining()), this.executor)
+                .thenAccept(v -> LoggerHelpers.traceLeave(log, traceObjectId, "createNewStreamSegment", traceId, streamSegmentName));
     }
\ No newline at end of file
