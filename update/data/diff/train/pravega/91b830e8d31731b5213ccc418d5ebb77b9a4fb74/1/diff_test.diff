diff --git a/old_test.java b/new_test.java
index 49c342e..a453ab7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,32 +1,39 @@
 @Test
     public void testUpdateStream() throws ExecutionException, InterruptedException {
+        String resourceURI = getURI() + "v1/scopes/" + scope1 + "/streams/" + stream1;
+
         // Test to update an existing stream
         when(mockControllerService.alterStream(any())).thenReturn(updateStreamStatus);
-        response = target(resourceURI).request().async().put(Entity.json(updateStreamRequest));
-        assertEquals("Update Stream Status", 200, response.get().getStatus());
-        streamResponseActual = response.get().readEntity(StreamProperty.class);
+        Response response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest)).invoke();
+        assertEquals("Update Stream Status", 200, response.getStatus());
+        StreamProperty streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected, streamResponseActual);
+        response.close();
 
         // Test sending extra fields in the request object to check if json parser can handle it.
-        response = target(resourceURI).request().async().put(Entity.json(createStreamRequest));
-        assertEquals("Update Stream Status", 200, response.get().getStatus());
-        streamResponseActual = response.get().readEntity(StreamProperty.class);
+        response = client.target(resourceURI).request().buildPut(Entity.json(createStreamRequest)).invoke();
+        assertEquals("Update Stream Status", 200, response.getStatus());
+        streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected, streamResponseActual);
+        response.close();
 
         // Test to update an non-existing stream
         when(mockControllerService.alterStream(any())).thenReturn(updateStreamStatus2);
-        response = target(resourceURI).request().async().put(Entity.json(updateStreamRequest2));
-        assertEquals("Update Stream Status", 404, response.get().getStatus());
+        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest2)).invoke();
+        assertEquals("Update Stream Status", 404, response.getStatus());
+        response.close();
 
         // Test for validation of request object
         when(mockControllerService.alterStream(any())).thenReturn(updateStreamStatus3);
-        response = target(resourceURI).request().async().put(Entity.json(updateStreamRequest3));
+        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest3)).invoke();
         // TODO: Server should be returning 400 here, change this once issue
         // https://github.com/pravega/pravega/issues/531 is fixed.
-        assertEquals("Update Stream Status", 500, response.get().getStatus());
+        assertEquals("Update Stream Status", 500, response.getStatus());
+        response.close();
 
         // Test to update stream for non-existent scope
         when(mockControllerService.alterStream(any())).thenReturn(updateStreamStatus4);
-        response = target(resourceURI).request().async().put(Entity.json(updateStreamRequest));
-        assertEquals("Update Stream Status", 404, response.get().getStatus());
+        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest)).invoke();
+        assertEquals("Update Stream Status", 404, response.getStatus());
+        response.close();
     }
\ No newline at end of file
