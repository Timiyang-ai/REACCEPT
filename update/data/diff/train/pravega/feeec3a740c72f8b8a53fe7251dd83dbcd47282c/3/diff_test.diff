diff --git a/old_test.java b/new_test.java
index f5d227d..8dd13f1 100644
--- a/old_test.java
+++ b/new_test.java
@@ -11,9 +11,8 @@
         val b = newBuffer();
         for (int size1 = 0; size1 < toWrite.length; size1 += sizeIncrement) {
             Assert.assertEquals("Expected buffer to be clean.", 1, b.getUsedBlockCount());
-            val w1 = b.write(new ByteArrayInputStream(toWrite, 0, size1), size1, true);
-            Assert.assertEquals("Unexpected buffer id for w1.firstBlockAddress.", BUFFER_ID, LAYOUT.getBufferId(w1.getFirstBlockAddress()));
-            Assert.assertEquals("Unexpected block id for w1.firstBlockAddress.", 1, LAYOUT.getBlockId(w1.getFirstBlockAddress()));
+            val w1 = b.write(new ByteArrayInputStream(toWrite, 0, size1), size1, CacheLayout.NO_ADDRESS);
+            Assert.assertEquals("Unexpected value for w1.firstBlockId.", 1, w1.getFirstBlockId());
             int expectedRemaining1 = size1 > maxUsableSize ? size1 - maxUsableSize : 0;
             Assert.assertEquals("Unexpected w1.remainingLength", expectedRemaining1, w1.getRemainingLength());
             if (expectedRemaining1 > 0) {
@@ -25,13 +24,12 @@
             int remainingCapacity = (LAYOUT.blocksPerBuffer() - b.getUsedBlockCount()) * LAYOUT.blockSize();
 
             int size2 = Math.max(0, size1 - secondWriteOffset);
-            val w2 = b.write(new ByteArrayInputStream(toWrite, secondWriteOffset, size2), size2, false);
+            val w2 = b.write(new ByteArrayInputStream(toWrite, secondWriteOffset, size2), size2, CacheLayout.NO_ADDRESS);
             int expectedRemaining2 = 0;
             if (expectedRemaining1 == 0 && hasCapacityBeforeSecondWrite) {
                 // We have nothing remaining and still have capacity to write more.
-                Assert.assertEquals("Unexpected buffer id for w2.firstBlockAddress.", BUFFER_ID, LAYOUT.getBufferId(w2.getFirstBlockAddress()));
-                Assert.assertEquals("Unexpected block id for w2.firstBlockAddress.",
-                        LAYOUT.getBlockId(w1.getLastBlockAddress()) + 1, LAYOUT.getBlockId(w2.getFirstBlockAddress()));
+                Assert.assertEquals("Unexpected value for w2.firstBlockId.",
+                        LAYOUT.getBlockId(w1.getLastBlockAddress()) + 1, w2.getFirstBlockId());
                 expectedRemaining2 = size2 > remainingCapacity ? size2 - remainingCapacity : 0;
                 Assert.assertEquals("Unexpected w2.remainingLength", expectedRemaining2, w2.getRemainingLength());
             } else {
@@ -39,11 +37,11 @@
             }
 
             // Verify we can retrieve the data, then delete it. We will reuse the buffer in the next iteration.
-            checkData(b, LAYOUT.getBlockId(w1.getFirstBlockAddress()), new ByteArraySegment(toWrite, 0, size1 - expectedRemaining1));
+            checkData(b, LAYOUT.getBlockId(w1.getLastBlockAddress()), new ByteArraySegment(toWrite, 0, size1 - expectedRemaining1));
             if (w2 != null) {
-                checkData(b, LAYOUT.getBlockId(w2.getFirstBlockAddress()), new ByteArraySegment(toWrite, secondWriteOffset, size2 - expectedRemaining2));
-                b.delete(LAYOUT.getBlockId(w2.getFirstBlockAddress()));
+                checkData(b, LAYOUT.getBlockId(w2.getLastBlockAddress()), new ByteArraySegment(toWrite, secondWriteOffset, size2 - expectedRemaining2));
+                b.delete(LAYOUT.getBlockId(w2.getLastBlockAddress()));
             }
-            b.delete(LAYOUT.getBlockId(w1.getFirstBlockAddress()));
+            b.delete(LAYOUT.getBlockId(w1.getLastBlockAddress()));
         }
     }
\ No newline at end of file
