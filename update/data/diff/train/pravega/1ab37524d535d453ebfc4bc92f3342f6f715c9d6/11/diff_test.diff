diff --git a/old_test.java b/new_test.java
index e66f68c..55ef4e2 100644
--- a/old_test.java
+++ b/new_test.java
@@ -20,7 +20,7 @@
         List<StreamConfiguration> streamsList = Arrays.asList(streamConfiguration1, streamConfiguration2);
 
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(CompletableFuture.completedFuture(streamsList));
-        Response response = client.target(resourceURI).request().buildGet().invoke();
+        Response response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         final StreamsList streamsList1 = response.readEntity(StreamsList.class);
@@ -33,7 +33,7 @@
         final CompletableFuture<List<StreamConfiguration>> completableFuture1 = new CompletableFuture<>();
         completableFuture1.completeExceptionally(StoreException.create(StoreException.Type.DATA_NOT_FOUND, "scope1"));
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(completableFuture1);
-        response = client.target(resourceURI).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 404, response.getStatus());
         response.close();
 
@@ -41,7 +41,7 @@
         final CompletableFuture<List<StreamConfiguration>> completableFuture = new CompletableFuture<>();
         completableFuture.completeExceptionally(new Exception());
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(completableFuture);
-        response = client.target(resourceURI).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 500, response.getStatus());
         response.close();
 
@@ -55,7 +55,7 @@
                 streamConfiguration3);
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(
                 CompletableFuture.completedFuture(allStreamsList));
-        response = client.target(resourceURI).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         StreamsList streamsListResp = response.readEntity(StreamsList.class);
@@ -64,7 +64,7 @@
         assertEquals("List element", "stream2", streamsListResp.getStreams().get(1).getStreamName());
         response.close();
 
-        response = client.target(resourceURI).queryParam("showInternalStreams", "true").request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).queryParam("showInternalStreams", "true").request()).buildGet().invoke();
         assertEquals("List Streams response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         streamsListResp = response.readEntity(StreamsList.class);
@@ -76,7 +76,7 @@
         // Test to list large number of streams.
         streamsList = Collections.nCopies(50000, streamConfiguration1);
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(CompletableFuture.completedFuture(streamsList));
-        response = client.target(resourceURI).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         final StreamsList streamsList2 = response.readEntity(StreamsList.class);
