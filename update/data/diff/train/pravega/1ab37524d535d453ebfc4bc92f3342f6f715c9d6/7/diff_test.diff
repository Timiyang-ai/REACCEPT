diff --git a/old_test.java b/new_test.java
index 800d581..33d76b3 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,7 +4,7 @@
 
         // Test to create a stream which doesn't exist
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
-        Response response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest)).invoke();
+        Response response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         StreamProperty streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected, streamResponseActual);
@@ -12,7 +12,7 @@
 
         // Test to create a stream which doesn't exist and has no Retention Policy set.
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest4)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest4)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected2, streamResponseActual);
@@ -22,13 +22,13 @@
         final CreateStreamRequest streamRequest = new CreateStreamRequest();
         streamRequest.setStreamName(NameUtils.getInternalNameForStream("stream"));
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus2);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(streamRequest)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(streamRequest)).invoke();
         assertEquals("Create Stream Status", 400, response.getStatus());
         response.close();
 
         // Test to create a stream which doesn't exist and have Scaling Policy FIXED_NUM_SEGMENTS
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest5)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest5)).invoke();
         assertEquals("Create Stream Status", 201, response.getStatus());
         streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected3, streamResponseActual);
@@ -36,13 +36,13 @@
 
         // Test to create a stream that already exists
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus2);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest)).invoke();
         assertEquals("Create Stream Status", 409, response.getStatus());
         response.close();
 
         // Test for validation of create stream request object
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus3);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest2)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest2)).invoke();
         // TODO: Server should be returning 400 here, change this once issue
         // https://github.com/pravega/pravega/issues/531 is fixed.
         assertEquals("Create Stream Status", 500, response.getStatus());
@@ -50,7 +50,7 @@
 
         // Test create stream for non-existent scope
         when(mockControllerService.createStream(any(), anyLong())).thenReturn(createStreamStatus4);
-        response = client.target(streamResourceURI).request().buildPost(Entity.json(createStreamRequest3)).invoke();
+        response = addAuthHeaders(client.target(streamResourceURI).request()).buildPost(Entity.json(createStreamRequest3)).invoke();
         assertEquals("Create Stream Status for non-existent scope", 404, response.getStatus());
         response.close();
     }
\ No newline at end of file
