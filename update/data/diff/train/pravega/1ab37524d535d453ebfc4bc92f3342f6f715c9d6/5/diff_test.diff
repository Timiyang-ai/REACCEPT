diff --git a/old_test.java b/new_test.java
index 516566c..bba27b4 100644
--- a/old_test.java
+++ b/new_test.java
@@ -5,28 +5,28 @@
         // Test to delete a sealed stream
         when(mockControllerService.deleteStream(scope1, stream1)).thenReturn(CompletableFuture.completedFuture(
                 DeleteStreamStatus.newBuilder().setStatus(DeleteStreamStatus.Status.SUCCESS).build()));
-        Response response = client.target(resourceURI).request().buildDelete().invoke();
+        Response response = addAuthHeaders(client.target(resourceURI).request()).buildDelete().invoke();
         assertEquals("Delete Stream response code", 204, response.getStatus());
         response.close();
 
         // Test to delete a unsealed stream
         when(mockControllerService.deleteStream(scope1, stream1)).thenReturn(CompletableFuture.completedFuture(
                 DeleteStreamStatus.newBuilder().setStatus(DeleteStreamStatus.Status.STREAM_NOT_SEALED).build()));
-        response = client.target(resourceURI).request().buildDelete().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildDelete().invoke();
         assertEquals("Delete Stream response code", 412, response.getStatus());
         response.close();
 
         // Test to delete a non existent stream
         when(mockControllerService.deleteStream(scope1, stream1)).thenReturn(CompletableFuture.completedFuture(
                 DeleteStreamStatus.newBuilder().setStatus(DeleteStreamStatus.Status.STREAM_NOT_FOUND).build()));
-        response = client.target(resourceURI).request().buildDelete().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildDelete().invoke();
         assertEquals("Delete Stream response code", 404, response.getStatus());
         response.close();
 
         // Test to delete a stream giving an internal server error
         when(mockControllerService.deleteStream(scope1, stream1)).thenReturn(CompletableFuture.completedFuture(
                 DeleteStreamStatus.newBuilder().setStatus(DeleteStreamStatus.Status.FAILURE).build()));
-        response = client.target(resourceURI).request().buildDelete().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildDelete().invoke();
         assertEquals("Delete Stream response code", 500, response.getStatus());
         response.close();
     }
\ No newline at end of file
