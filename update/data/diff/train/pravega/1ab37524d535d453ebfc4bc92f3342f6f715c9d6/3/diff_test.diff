diff --git a/old_test.java b/new_test.java
index fe98edf..c18ef1a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -52,8 +52,8 @@
 
         when(mockControllerService.getScaleRecords(scope1, stream1)).
                 thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
-        Response response = client.target(resourceURI).queryParam("from", fromDateTime).
-                queryParam("to", toDateTime).request().buildGet().invoke();
+        Response response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
+                queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         List<ScaleMetadata> scaleMetadataListResponse = response.readEntity(
@@ -72,8 +72,8 @@
         scaleMetadataList.addAll(Collections.nCopies(50000, scaleMetadata3));
         when(mockControllerService.getScaleRecords(scope1, stream1)).
                 thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
-        response = client.target(resourceURI).queryParam("from", fromDateTime).
-                queryParam("to", toDateTime).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
+                queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 200, response.getStatus());
         assertTrue(response.bufferEntity());
         scaleMetadataListResponse = response.readEntity(
@@ -84,22 +84,22 @@
         final CompletableFuture<List<ScaleMetadata>> completableFuture1 = new CompletableFuture<>();
         completableFuture1.completeExceptionally(StoreException.create(StoreException.Type.DATA_NOT_FOUND, "stream1"));
         when(mockControllerService.getScaleRecords("scope1", "stream1")).thenReturn(completableFuture1);
-        response = client.target(resourceURI).queryParam("from", fromDateTime).
-                queryParam("to", toDateTime).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
+                queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 404, response.getStatus());
 
         // Test for getScalingEvents for bad request.
         // from > to is tested here
         when(mockControllerService.getScaleRecords("scope1", "stream1")).
                 thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
-        response = client.target(resourceURI).queryParam("from", fromDateTime * 2).
-                queryParam("to", fromDateTime).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime * 2).
+                queryParam("to", fromDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 400, response.getStatus());
 
         // Test for getScalingEvents failure.
         final CompletableFuture<List<ScaleMetadata>> completableFuture = new CompletableFuture<>();
         completableFuture.completeExceptionally(new Exception());
         when(mockControllerService.getScaleRecords("scope1", "stream1")).thenReturn(completableFuture);
-        response = client.target(resourceURI).request().buildGet().invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 500, response.getStatus());
     }
\ No newline at end of file
