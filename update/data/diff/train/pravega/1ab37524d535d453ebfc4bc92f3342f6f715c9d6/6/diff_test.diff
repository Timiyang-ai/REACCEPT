diff --git a/old_test.java b/new_test.java
index 8417a6a..78a5281 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,14 +4,14 @@
 
         // Test to update an existing stream
         when(mockControllerService.updateStream(any())).thenReturn(updateStreamStatus);
-        Response response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest)).invoke();
+        Response response = addAuthHeaders(client.target(resourceURI).request()).buildPut(Entity.json(updateStreamRequest)).invoke();
         assertEquals("Update Stream Status", 200, response.getStatus());
         StreamProperty streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected, streamResponseActual);
         response.close();
 
         // Test sending extra fields in the request object to check if json parser can handle it.
-        response = client.target(resourceURI).request().buildPut(Entity.json(createStreamRequest)).invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildPut(Entity.json(createStreamRequest)).invoke();
         assertEquals("Update Stream Status", 200, response.getStatus());
         streamResponseActual = response.readEntity(StreamProperty.class);
         testExpectedVsActualObject(streamResponseExpected, streamResponseActual);
@@ -19,13 +19,13 @@
 
         // Test to update an non-existing stream
         when(mockControllerService.updateStream(any())).thenReturn(updateStreamStatus2);
-        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest2)).invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildPut(Entity.json(updateStreamRequest2)).invoke();
         assertEquals("Update Stream Status", 404, response.getStatus());
         response.close();
 
         // Test for validation of request object
         when(mockControllerService.updateStream(any())).thenReturn(updateStreamStatus3);
-        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest3)).invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildPut(Entity.json(updateStreamRequest3)).invoke();
         // TODO: Server should be returning 400 here, change this once issue
         // https://github.com/pravega/pravega/issues/531 is fixed.
         assertEquals("Update Stream Status", 500, response.getStatus());
@@ -33,7 +33,7 @@
 
         // Test to update stream for non-existent scope
         when(mockControllerService.updateStream(any())).thenReturn(updateStreamStatus4);
-        response = client.target(resourceURI).request().buildPut(Entity.json(updateStreamRequest)).invoke();
+        response = addAuthHeaders(client.target(resourceURI).request()).buildPut(Entity.json(updateStreamRequest)).invoke();
         assertEquals("Update Stream Status", 404, response.getStatus());
         response.close();
     }
\ No newline at end of file
