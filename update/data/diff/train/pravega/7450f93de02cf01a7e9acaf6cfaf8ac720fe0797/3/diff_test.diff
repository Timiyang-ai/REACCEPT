diff --git a/old_test.java b/new_test.java
index a0719b1..acb39a7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -5,11 +5,11 @@
 
         // Remove the items, in order.
         keys.sort(KEY_COMPARATOR);
-        val keysToRemove = new LinkedList<Integer>(keys);
+        val keysToRemove = new LinkedList<Long>(keys);
         int expectedSize = index.size();
         while (keysToRemove.size() > 0) {
             // Remove either the first or the last key - this helps test getFirst/getLast properly.
-            int key = expectedSize % 2 == 0 ? keysToRemove.removeLast() : keysToRemove.removeFirst();
+            long key = expectedSize % 2 == 0 ? keysToRemove.removeLast() : keysToRemove.removeFirst();
             val entry = index.get(key);
             val removedEntry = index.remove(key);
             expectedSize--;
@@ -22,8 +22,8 @@
                 Assert.assertNull("Unexpected value from getFirst() when index is empty.", index.getFirst());
                 Assert.assertNull("Unexpected value from getLast() when index is empty.", index.getLast());
             } else {
-                Assert.assertEquals("Unexpected value from getFirst() after removing key " + key, keysToRemove.getFirst(), index.getFirst().key());
-                Assert.assertEquals("Unexpected value from getLast() after removing key " + key, keysToRemove.getLast(), index.getLast().key());
+                Assert.assertEquals("Unexpected value from getFirst() after removing key " + key, (long) keysToRemove.getFirst(), index.getFirst().key());
+                Assert.assertEquals("Unexpected value from getLast() after removing key " + key, (long) keysToRemove.getLast(), index.getLast().key());
             }
         }
     }
\ No newline at end of file
