diff --git a/old_test.java b/new_test.java
index fd56a8c..7d2d0dd 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,19 +1,15 @@
 @Test
     public void testTouchOne() {
         ReadIndexSummary s = new ReadIndexSummary();
-        long totalSize = 0;
-        Random random = RandomFactory.create();
-        Queue<Integer> addedSizes = new LinkedList<>();
         int maxGeneration = ITEMS_PER_GENERATION - 1;
 
         // Add a few.
+        int count = 0;
         for (int generation = 0; generation < GENERATION_COUNT; generation++) {
             s.setCurrentGeneration(generation);
             for (int i = 0; i < ITEMS_PER_GENERATION; i++) {
-                int size = random.nextInt(MAX_ITEM_SIZE);
-                addedSizes.add(size);
-                totalSize += size;
-                s.add(size);
+                s.addOne();
+                count++;
             }
         }
 
@@ -24,8 +20,6 @@
                 Assert.assertEquals("Unexpected return value from touchOne().", maxGeneration, returnedGeneration);
 
                 CacheManager.CacheStatus currentStatus = s.toCacheStatus();
-                Assert.assertEquals("Not expecting a change in total size.", totalSize, currentStatus.getSize());
-
                 if (i < ITEMS_PER_GENERATION - 1) {
                     Assert.assertEquals(
                             "Not expecting a change in oldest generation when there are elements still in that generation.",
@@ -43,17 +37,15 @@
         }
 
         CacheManager.CacheStatus currentStatus = s.toCacheStatus();
-        Assert.assertEquals("Unexpected total size after touching all items.", totalSize, currentStatus.getSize());
         Assert.assertEquals("Unexpected newest generation after touching all items.", maxGeneration, currentStatus.getNewestGeneration());
         Assert.assertEquals("Unexpected oldest generation after touching all items.", maxGeneration, currentStatus.getOldestGeneration());
 
         // Now remove all items
-        for (int size : addedSizes) {
-            s.remove(size, maxGeneration);
+        for (int i = 0; i < count; i++) {
+            s.removeOne(maxGeneration);
         }
 
         currentStatus = s.toCacheStatus();
-        Assert.assertEquals("Unexpected total size after removing all items.", 0, currentStatus.getSize());
         Assert.assertEquals("Unexpected newest generation after removing all items.", 0, currentStatus.getNewestGeneration());
         Assert.assertEquals("Unexpected oldest generation after removing all items.", 0, currentStatus.getOldestGeneration());
     }
\ No newline at end of file
