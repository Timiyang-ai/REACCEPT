diff --git a/old_test.java b/new_test.java
index 3b74e92..475e0e7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,78 +1,36 @@
 @Test
-    @SuppressWarnings("checkstyle:CyclomaticComplexity")
     public void testDeleteStreamSegment() {
         final UpdateableContainerMetadata m = new MetadataBuilder(CONTAINER_ID).build();
-        final int alreadyDeletedTransactionFrequency = 11;
         ArrayList<Long> segmentIds = new ArrayList<>();
         HashSet<Long> deletedStreamSegmentIds = new HashSet<>();
         for (long i = 0; i < SEGMENT_COUNT; i++) {
             final long segmentId = segmentIds.size();
             segmentIds.add(segmentId);
-            m.mapStreamSegmentId(getName(segmentId), segmentId);
-            for (long j = 0; j < TRANSACTIONS_PER_SEGMENT_COUNT; j++) {
-                final long transactionId = segmentIds.size();
-                segmentIds.add(transactionId);
-                val tm = m.mapStreamSegmentId(getName(transactionId), transactionId, segmentId);
-                if (segmentIds.size() % alreadyDeletedTransactionFrequency == 0) {
-                    // Mark this transaction as already deleted in Storage.
-                    tm.markDeleted();
-                    deletedStreamSegmentIds.add(transactionId);
-                } else if (segmentIds.size() % alreadyDeletedTransactionFrequency == 1) {
-                    // Decoy: this is merged, but not in Storage.
-                    tm.markMerged();
-                }
+            val sm = m.mapStreamSegmentId(getName(segmentId), segmentId);
+            if (i % 3 == 1) {
+                // Every 3i+1 Segment is deleted.
+                sm.markDeleted();
+            } else if (i % 3 == 2) {
+                // Every 3i+1 Segment is merged.
+                sm.markMerged();
             }
         }
 
-        // By construction (see above, any index i=3n is a parent StreamSegment, and any index i=3n+1 or 3n+2 is a Transaction).
-        // Let's delete a few parent StreamSegments and verify their Transactions are also deleted.
-        // Then delete only Transactions, and verify those are the only ones to be deleted.
-        final int groupSize = TRANSACTIONS_PER_SEGMENT_COUNT + 1;
-        ArrayList<Integer> streamSegmentsToDelete = new ArrayList<>();
-        ArrayList<Integer> transactionsToDelete = new ArrayList<>();
-        for (int i = 0; i < segmentIds.size(); i++) {
-            if (i < segmentIds.size() / 2) {
-                // In the first half, we only delete the parents (which will force the Transactions to be deleted too).
-                if (i % groupSize == 0) {
-                    streamSegmentsToDelete.add(i);
-                }
+        // Delete segments.
+        for (long segmentId : segmentIds) {
+            SegmentMetadata existingMetadata = m.getStreamSegmentMetadata(segmentId);
+            boolean alreadyMergedOrDeleted = existingMetadata.isMerged() || existingMetadata.isDeleted();
+            SegmentMetadata sm = m.deleteStreamSegment(existingMetadata.getName());
+            if (alreadyMergedOrDeleted) {
+                Assert.assertNull("Expected deletion to not succeed for already deleted or merged Segment.", sm);
+                Assert.assertNotEquals("Not expecting isMerged to equal isDeleted.", existingMetadata.isMerged(), existingMetadata.isDeleted());
             } else {
-                // In the second half, we only delete the first Transaction of any segment.
-                if (i % groupSize == 1) {
-                    transactionsToDelete.add(i);
-                }
+                Assert.assertNotNull("Expected deletion to not succeed for non-deleted and non-merged Segment.", sm);
+                Assert.assertEquals("Unexpected SegmentMetadata returned.", segmentId, sm.getId());
             }
-        }
-
-        // Delete stand-alone StreamSegments (and verify Transactions are also deleted).
-        for (int index : streamSegmentsToDelete) {
-            long segmentId = segmentIds.get(index);
-            String name = m.getStreamSegmentMetadata(segmentId).getName();
-            Collection<String> expectedDeletedSegmentNames = new ArrayList<>();
-            expectedDeletedSegmentNames.add(name);
-            deletedStreamSegmentIds.add(segmentId);
-            for (int transIndex = 0; transIndex < TRANSACTIONS_PER_SEGMENT_COUNT; transIndex++) {
-                long transactionId = segmentIds.get(index + transIndex + 1);
-                if (deletedStreamSegmentIds.add(transactionId)) {
-                    // We only expect a Transaction to be deleted if it hasn't already been deleted.
-                    expectedDeletedSegmentNames.add(m.getStreamSegmentMetadata(transactionId).getName());
-                }
+            if (existingMetadata.isDeleted()) {
+                deletedStreamSegmentIds.add(segmentId);
             }
-
-            Collection<String> deletedSegmentNames = extract(m.deleteStreamSegment(name), SegmentMetadata::getName);
-            AssertExtensions.assertContainsSameElements("Unexpected StreamSegments were deleted.", expectedDeletedSegmentNames, deletedSegmentNames);
-        }
-
-        // Delete Transactions.
-        for (int index : transactionsToDelete) {
-            long transactionId = segmentIds.get(index);
-            String name = m.getStreamSegmentMetadata(transactionId).getName();
-            Collection<String> expectedDeletedSegmentNames = new ArrayList<>();
-            deletedStreamSegmentIds.add(transactionId);
-            expectedDeletedSegmentNames.add(name);
-
-            Collection<String> deletedSegmentNames = extract(m.deleteStreamSegment(name), SegmentMetadata::getName);
-            AssertExtensions.assertContainsSameElements("Unexpected StreamSegments were deleted.", expectedDeletedSegmentNames, deletedSegmentNames);
         }
 
         // Verify deleted segments have not been actually removed from the metadata.
@@ -82,6 +40,8 @@
         // Verify individual StreamSegmentMetadata.
         for (long segmentId : segmentIds) {
             boolean expectDeleted = deletedStreamSegmentIds.contains(segmentId);
-            Assert.assertEquals("Unexpected value for isDeleted.", expectDeleted, m.getStreamSegmentMetadata(segmentId).isDeleted());
+            val sm = m.getStreamSegmentMetadata(segmentId);
+            Assert.assertEquals("Unexpected value for isDeleted.", expectDeleted, sm.isDeleted());
+            Assert.assertNotEquals("Unexpected value for isMerged.", expectDeleted, sm.isMerged());
         }
     }
\ No newline at end of file
