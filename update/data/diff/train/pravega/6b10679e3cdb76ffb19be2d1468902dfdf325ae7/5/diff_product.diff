diff --git a/old_product.java b/new_product.java
index 5703153..e648181 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,28 +1,29 @@
 @Override
-    public void createStream(final String scope, final CreateStreamRequest createStreamRequest,
+    public void createStream(final String scopeName, final CreateStreamRequest createStreamRequest,
             final SecurityContext securityContext, final AsyncResponse asyncResponse) {
         long traceId = LoggerHelpers.traceEnter(log, "createStream");
 
-        StreamConfiguration streamConfiguration = ModelHelper.getCreateStreamConfig(createStreamRequest, scope);
-        CompletableFuture<CreateStreamStatus> createStreamStatus = controllerService.createStream(streamConfiguration,
-                System.currentTimeMillis());
-
-        createStreamStatus.thenApply(streamStatus -> {
+        StreamConfiguration streamConfiguration = ModelHelper.getCreateStreamConfig(createStreamRequest, scopeName);
+        controllerService.createStream(streamConfiguration, System.currentTimeMillis())
+                .thenApply(streamStatus -> {
                     if (streamStatus == CreateStreamStatus.SUCCESS) {
+                        log.info("Successfully created stream: {}/{}", scopeName, streamConfiguration.getStreamName());
                         return Response.status(Status.CREATED).
                                 entity(ModelHelper.encodeStreamResponse(streamConfiguration)).build();
                     } else if (streamStatus == CreateStreamStatus.STREAM_EXISTS) {
+                        log.warn("Stream already exists: {}/{}", scopeName, streamConfiguration.getStreamName());
                         return Response.status(Status.CONFLICT).build();
                     } else if (streamStatus == CreateStreamStatus.SCOPE_NOT_FOUND) {
                         return Response.status(Status.NOT_FOUND).build();
                     } else {
+                        log.warn("createStream failed for : {}/{}", scopeName, streamConfiguration.getStreamName());
                         return Response.status(Status.INTERNAL_SERVER_ERROR).build();
                     }
-                }
-        ).exceptionally(exception -> {
-            log.debug("Exception occurred while executing createStream: " + exception);
-            return Response.status(Status.INTERNAL_SERVER_ERROR).build();
-        }).thenApply(response -> asyncResponse.resume(response));
+                }).exceptionally(exception -> {
+                    log.warn("createStream for {}/{} failed {}: ", scopeName, streamConfiguration.getStreamName(),
+                             exception);
+                    return Response.status(Status.INTERNAL_SERVER_ERROR).build();
+                }).thenApply(asyncResponse::resume);
 
         LoggerHelpers.traceLeave(log, "createStream", traceId);
     }
\ No newline at end of file
