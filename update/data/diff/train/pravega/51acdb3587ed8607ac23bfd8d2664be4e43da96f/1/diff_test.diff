diff --git a/old_test.java b/new_test.java
index 46129e0..485f1a5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -50,8 +50,8 @@
         scaleMetadataList.add(scaleMetadata2);
         scaleMetadataList.add(scaleMetadata1);
 
-        when(mockControllerService.getScaleRecords(scope1, stream1)).
-                thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
+        doAnswer(x -> CompletableFuture.completedFuture(scaleMetadataList))
+                .when(mockControllerService).getScaleRecords(anyString(), anyString(), anyLong(), anyLong());
         Response response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
                 queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 200, response.getStatus());
@@ -70,8 +70,8 @@
         // Test for large number of scaling events.
         scaleMetadataList.clear();
         scaleMetadataList.addAll(Collections.nCopies(50000, scaleMetadata3));
-        when(mockControllerService.getScaleRecords(scope1, stream1)).
-                thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
+        doAnswer(x -> CompletableFuture.completedFuture(scaleMetadataList))
+                .when(mockControllerService).getScaleRecords(anyString(), anyString(), anyLong(), anyLong());
         response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
                 queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 200, response.getStatus());
@@ -83,15 +83,18 @@
         // Test for getScalingEvents for invalid scope/stream.
         final CompletableFuture<List<ScaleMetadata>> completableFuture1 = new CompletableFuture<>();
         completableFuture1.completeExceptionally(StoreException.create(StoreException.Type.DATA_NOT_FOUND, "stream1"));
-        when(mockControllerService.getScaleRecords("scope1", "stream1")).thenReturn(completableFuture1);
+        doAnswer(x -> completableFuture1)
+                .when(mockControllerService).getScaleRecords(anyString(), anyString(), anyLong(), anyLong());
+
         response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime).
                 queryParam("to", toDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 404, response.getStatus());
 
         // Test for getScalingEvents for bad request.
         // from > to is tested here
-        when(mockControllerService.getScaleRecords("scope1", "stream1")).
-                thenReturn(CompletableFuture.completedFuture(scaleMetadataList));
+        doAnswer(x -> CompletableFuture.completedFuture(scaleMetadataList))
+                .when(mockControllerService).getScaleRecords(anyString(), anyString(), anyLong(), anyLong());
+
         response = addAuthHeaders(client.target(resourceURI).queryParam("from", fromDateTime * 2).
                 queryParam("to", fromDateTime).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 400, response.getStatus());
@@ -99,7 +102,9 @@
         // Test for getScalingEvents failure.
         final CompletableFuture<List<ScaleMetadata>> completableFuture = new CompletableFuture<>();
         completableFuture.completeExceptionally(new Exception());
-        when(mockControllerService.getScaleRecords("scope1", "stream1")).thenReturn(completableFuture);
+        doAnswer(x -> completableFuture)
+                .when(mockControllerService).getScaleRecords(anyString(), anyString(), anyLong(), anyLong());
+
         response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("Get Scaling Events response code", 500, response.getStatus());
     }
\ No newline at end of file
