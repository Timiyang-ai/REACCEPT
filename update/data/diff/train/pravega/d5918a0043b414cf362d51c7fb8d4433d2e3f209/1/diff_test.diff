diff --git a/old_test.java b/new_test.java
index 55ef4e2..b77f214 100644
--- a/old_test.java
+++ b/new_test.java
@@ -3,21 +3,17 @@
         final String resourceURI = getURI() + "v1/scopes/scope1/streams";
 
         final StreamConfiguration streamConfiguration1 = StreamConfiguration.builder()
-                .scope(scope1)
-                .streamName(stream1)
                 .scalingPolicy(ScalingPolicy.byEventRate(100, 2, 2))
                 .retentionPolicy(RetentionPolicy.byTime(Duration.ofMillis(123L)))
                 .build();
 
         final StreamConfiguration streamConfiguration2 = StreamConfiguration.builder()
-                .scope(scope1)
-                .streamName(stream2)
                 .scalingPolicy(ScalingPolicy.byEventRate(100, 2, 2))
                 .retentionPolicy(RetentionPolicy.byTime(Duration.ofMillis(123L)))
                 .build();
 
         // Test to list streams.
-        List<StreamConfiguration> streamsList = Arrays.asList(streamConfiguration1, streamConfiguration2);
+        Map<String, StreamConfiguration> streamsList = ImmutableMap.of(stream1, streamConfiguration1, stream2, streamConfiguration2);
 
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(CompletableFuture.completedFuture(streamsList));
         Response response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
@@ -30,7 +26,7 @@
         response.close();
 
         // Test for list streams for invalid scope.
-        final CompletableFuture<List<StreamConfiguration>> completableFuture1 = new CompletableFuture<>();
+        final CompletableFuture<Map<String, StreamConfiguration>> completableFuture1 = new CompletableFuture<>();
         completableFuture1.completeExceptionally(StoreException.create(StoreException.Type.DATA_NOT_FOUND, "scope1"));
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(completableFuture1);
         response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
@@ -38,7 +34,7 @@
         response.close();
 
         // Test for list streams failure.
-        final CompletableFuture<List<StreamConfiguration>> completableFuture = new CompletableFuture<>();
+        final CompletableFuture<Map<String, StreamConfiguration>> completableFuture = new CompletableFuture<>();
         completableFuture.completeExceptionally(new Exception());
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(completableFuture);
         response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
@@ -47,12 +43,10 @@
 
         // Test for filtering streams.
         final StreamConfiguration streamConfiguration3 = StreamConfiguration.builder()
-                .scope(scope1)
-                .streamName(NameUtils.getInternalNameForStream("stream3"))
                 .scalingPolicy(ScalingPolicy.fixed(1))
                 .build();
-        List<StreamConfiguration> allStreamsList = Arrays.asList(streamConfiguration1, streamConfiguration2,
-                streamConfiguration3);
+        Map<String, StreamConfiguration> allStreamsList = ImmutableMap.of(stream1, streamConfiguration1, stream2, streamConfiguration2,
+                                                                   NameUtils.getInternalNameForStream("stream3"), streamConfiguration3);
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(
                 CompletableFuture.completedFuture(allStreamsList));
         response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
@@ -74,7 +68,10 @@
         response.close();
 
         // Test to list large number of streams.
-        streamsList = Collections.nCopies(50000, streamConfiguration1);
+        streamsList = new HashMap<>();
+        for (int i = 0; i < 50000; i++) {
+            streamsList.put("stream" + i, streamConfiguration1);
+        }
         when(mockControllerService.listStreamsInScope("scope1")).thenReturn(CompletableFuture.completedFuture(streamsList));
         response = addAuthHeaders(client.target(resourceURI).request()).buildGet().invoke();
         assertEquals("List Streams response code", 200, response.getStatus());
