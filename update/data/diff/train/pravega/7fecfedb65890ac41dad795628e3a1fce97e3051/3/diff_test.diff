diff --git a/old_test.java b/new_test.java
index e12eac4..c057ed8 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,19 +2,20 @@
     public void testConcat() throws Exception {
         final String context = "Concat";
         try (Storage s = createStorage()) {
+            s.initialize(0);
             HashMap<String, ByteArrayOutputStream> appendData = populate(s, context);
 
             // Check invalid segment name.
             val firstSegmentName = getSegmentName(0, context);
-            s.open(firstSegmentName).join();
+            val firstSegmentHandle = s.openWrite(firstSegmentName).join();
             AtomicLong firstSegmentLength = new AtomicLong(s.getStreamSegmentInfo(firstSegmentName,
                     TIMEOUT).join().getLength());
             assertThrows("concat() did not throw for non-existent target segment name.",
-                    () -> s.concat("foo1", 0, firstSegmentName, TIMEOUT),
+                    () -> s.concat(createHandle("foo1", false), 0, firstSegmentHandle, TIMEOUT),
                     ex -> ex instanceof StreamSegmentNotExistsException);
 
             assertThrows("concat() did not throw for invalid source StreamSegment name.",
-                    () -> s.concat(firstSegmentName, firstSegmentLength.get(), "foo2", TIMEOUT),
+                    () -> s.concat(firstSegmentHandle, firstSegmentLength.get(), createHandle("foo2", false), TIMEOUT),
                     ex -> ex instanceof StreamSegmentNotExistsException);
 
             ArrayList<String> concatOrder = new ArrayList<>();
@@ -25,17 +26,17 @@
                     continue;
                 }
 
-                s.open(sourceSegment).join();
+                val sourceWriteHandle = s.openWrite(sourceSegment).join();
                 assertThrows("Concat allowed when source segment is not sealed.",
-                        () -> s.concat(firstSegmentName, firstSegmentLength.get(), sourceSegment, TIMEOUT),
+                        () -> s.concat(firstSegmentHandle, firstSegmentLength.get(), sourceWriteHandle, TIMEOUT),
                         ex -> ex instanceof IllegalStateException);
 
                 // Seal the source segment and then re-try the concat
-                s.seal(sourceSegment, TIMEOUT).join();
+                s.seal(sourceWriteHandle, TIMEOUT).join();
                 SegmentProperties preConcatTargetProps = s.getStreamSegmentInfo(firstSegmentName, TIMEOUT).join();
                 SegmentProperties sourceProps = s.getStreamSegmentInfo(sourceSegment, TIMEOUT).join();
 
-                s.concat(firstSegmentName, firstSegmentLength.get(), sourceSegment, TIMEOUT).join();
+                s.concat(firstSegmentHandle, firstSegmentLength.get(), sourceWriteHandle, TIMEOUT).join();
                 concatOrder.add(sourceSegment);
                 SegmentProperties postConcatTargetProps = s.getStreamSegmentInfo(firstSegmentName, TIMEOUT).join();
                 Assert.assertFalse("concat() did not delete source segment", s.exists(sourceSegment, TIMEOUT).join());
@@ -51,7 +52,7 @@
             byte[] readBuffer = new byte[(int) segmentProperties.getLength()];
 
             // Read the entire StreamSegment.
-            int bytesRead = s.read(firstSegmentName, 0, readBuffer, 0, readBuffer.length, TIMEOUT).join();
+            int bytesRead = s.read(firstSegmentHandle, 0, readBuffer, 0, readBuffer.length, TIMEOUT).join();
             Assert.assertEquals("Unexpected number of bytes read.", readBuffer.length, bytesRead);
 
             // Check, concat-by-concat, that the final data is correct.
