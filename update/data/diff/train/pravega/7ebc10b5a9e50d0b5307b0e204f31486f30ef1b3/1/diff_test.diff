diff --git a/old_test.java b/new_test.java
index 0445d80..9e0acbd 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,11 +2,11 @@
     public void testSeal() throws Exception {
         final String context = "Seal";
         try (Storage s = createStorage()) {
-            s.initialize(0);
+            s.initialize(DEFAULT_EPOCH);
 
             // Check segment not exists.
             assertThrows("seal() did not throw for non-existent segment name.",
-                    () -> s.seal(createHandle("foo", false), TIMEOUT),
+                    () -> s.seal(createHandle("foo", false, DEFAULT_EPOCH), TIMEOUT),
                     ex -> ex instanceof StreamSegmentNotExistsException);
 
             HashMap<String, ByteArrayOutputStream> appendData = populate(s, context);
@@ -17,13 +17,10 @@
                         ex -> ex instanceof IllegalArgumentException);
 
                 val writeHandle = s.openWrite(segmentName).join();
-                val segmentInfo = s.seal(writeHandle, TIMEOUT).join();
-                Assert.assertTrue("seal() did not return a segmentInfo with isSealed == true.", segmentInfo.isSealed());
+                s.seal(writeHandle, TIMEOUT).join();
 
                 //Seal is idempotent. Resealing an already sealed segment should work.
-                val segmentInfo1 = s.seal(writeHandle, TIMEOUT).join();
-                Assert.assertTrue("seal() did not return a segmentInfo with isSealed == true for an already sealed segment.", segmentInfo1.isSealed());
-
+                s.seal(writeHandle, TIMEOUT).join();
                 assertThrows("write() did not throw for a sealed StreamSegment.",
                         () -> s.write(writeHandle, s.getStreamSegmentInfo(segmentName, TIMEOUT).
                                 join().getLength(), new ByteArrayInputStream("g".getBytes()), 1, TIMEOUT),
