diff --git a/old_test.java b/new_test.java
index 0142c9c..4496855 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,25 +4,25 @@
 
         // Test to delete a scope.
         when(mockControllerService.deleteScope(scope1)).thenReturn(CompletableFuture.completedFuture(
-                DeleteScopeStatus.SUCCESS));
+                DeleteScopeStatus.newBuilder().setStatus(DeleteScopeStatus.Status.SUCCESS).build()));
         response = target(resourceURI).request().async().delete();
         assertEquals("Delete Scope response code", 204, response.get().getStatus());
 
         // Test to delete scope with existing streams.
         when(mockControllerService.deleteScope(scope1)).thenReturn(CompletableFuture.completedFuture(
-                DeleteScopeStatus.SCOPE_NOT_EMPTY));
+                DeleteScopeStatus.newBuilder().setStatus(DeleteScopeStatus.Status.SCOPE_NOT_EMPTY).build()));
         response = target(resourceURI).request().async().delete();
         assertEquals("Delete Scope response code", 412, response.get().getStatus());
 
         // Test to delete non-existing scope.
         when(mockControllerService.deleteScope(scope1)).thenReturn(CompletableFuture.completedFuture(
-                DeleteScopeStatus.SCOPE_NOT_FOUND));
+                DeleteScopeStatus.newBuilder().setStatus(DeleteScopeStatus.Status.SCOPE_NOT_FOUND).build()));
         response = target(resourceURI).request().async().delete();
         assertEquals("Delete Scope response code", 404, response.get().getStatus());
 
         // Test delete scope failure.
         when(mockControllerService.deleteScope(scope1)).thenReturn(CompletableFuture.completedFuture(
-                DeleteScopeStatus.FAILURE));
+                DeleteScopeStatus.newBuilder().setStatus(DeleteScopeStatus.Status.FAILURE).build()));
         response = target(resourceURI).request().async().delete();
         assertEquals("Delete Scope response code", 500, response.get().getStatus());
     }
\ No newline at end of file
