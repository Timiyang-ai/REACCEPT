diff --git a/old_product.java b/new_product.java
index 80d9e32..03a38c9 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,10 +1,22 @@
-public boolean uploadProvJsonForBundle(JSONObject provJson, String bundleName) throws UnirestException {
-         HttpResponse<JsonNode> response = Unirest.post(provBaseUrl + "/provapi/bundle")
-                .body("{'bundle_name':'" + bundleName + "',"
-                        +"'JSON': {"+ provJson +"}}")
+public JsonObject uploadProvJsonForBundle(JsonObject provJson, String bundleName) throws UnirestException {
+        JsonObjectBuilder job = Json.createObjectBuilder();
+        job.add("bundle_name", bundleName);
+        job.add("JSON", provJson);
+        JsonObject jsonToSend = job.build();
+        logger.info("to send: " + JsonUtil.prettyPrint(jsonToSend.toString()));
+        HttpResponse<JsonNode> response = Unirest.post(provBaseUrl + "/provapi/json")
+                .header("Content-Type", "application/json")
+                .body(jsonToSend.toString())
                 .asJson();
         if (response.getStatus() != 200) {
             throw new RuntimeException("Response code for provenance postBundle: " + response.getStatus() + ", " + response.getStatusText());
         }
-        return true; //MAD: this should change to reflect a real response or not be used. 
+        JSONObject orgJsonObject = response.getBody().getObject();
+        /**
+         * Yes, there is some inefficiency in converting this to the standard
+         * (JRS 353) JSON-P format but it's worth using the standard to avoid
+         * having to deal with a proliferation of Java implementations for JSON.
+         */
+        JsonReader jsonReader = Json.createReader(new StringReader(orgJsonObject.toString()));
+        return jsonReader.readObject();
     }
\ No newline at end of file
