diff --git a/old_test.java b/new_test.java
index e56bb92..fbebd26 100644
--- a/old_test.java
+++ b/new_test.java
@@ -8,27 +8,40 @@
     final ImmutableBitSet c13 = ImmutableBitSet.of(1, 3);
 
     // input ref
-    final RexInputRef aRef = rexBuilder.makeInputRef(intType, 0);
+    final RexInputRef i0 = rexBuilder.makeInputRef(intType, 0);
+    final RexInputRef i1 = rexBuilder.makeInputRef(intType, 1);
 
-    assertThat(strongIf(aRef, c0), is(true));
-    assertThat(strongIf(aRef, c1), is(false));
-    assertThat(strongIf(aRef, c01), is(true));
-    assertThat(strongIf(aRef, c13), is(false));
+    assertThat(Strong.isNull(i0, c0), is(true));
+    assertThat(Strong.isNull(i0, c1), is(false));
+    assertThat(Strong.isNull(i0, c01), is(true));
+    assertThat(Strong.isNull(i0, c13), is(false));
 
     // literals are strong iff they are always null
-    assertThat(strongIf(trueLiteral, c), is(false));
-    assertThat(strongIf(trueLiteral, c13), is(false));
-    assertThat(strongIf(falseLiteral, c13), is(false));
-    assertThat(strongIf(nullLiteral, c), is(true));
-    assertThat(strongIf(nullLiteral, c13), is(true));
-    assertThat(strongIf(unknownLiteral, c13), is(true));
+    assertThat(Strong.isNull(trueLiteral, c), is(false));
+    assertThat(Strong.isNull(trueLiteral, c13), is(false));
+    assertThat(Strong.isNull(falseLiteral, c13), is(false));
+    assertThat(Strong.isNull(nullLiteral, c), is(true));
+    assertThat(Strong.isNull(nullLiteral, c13), is(true));
+    assertThat(Strong.isNull(unknownLiteral, c13), is(true));
 
     // AND is strong if one of its arguments is strong
     final RexNode andUnknownTrue = and(unknownLiteral, trueLiteral);
     final RexNode andTrueUnknown = and(trueLiteral, unknownLiteral);
     final RexNode andFalseTrue = and(falseLiteral, trueLiteral);
 
-    assertThat(strongIf(andUnknownTrue, c), is(true));
-    assertThat(strongIf(andTrueUnknown, c), is(true));
-    assertThat(strongIf(andFalseTrue, c), is(false));
+    assertThat(Strong.isNull(andUnknownTrue, c), is(true));
+    assertThat(Strong.isNull(andTrueUnknown, c), is(true));
+    assertThat(Strong.isNull(andFalseTrue, c), is(false));
+
+    // If i0 is null, "i0 and i1 is null" is null
+    assertThat(Strong.isNull(and(i0, isNull(i1)), c0), is(true));
+    // If i1 is null, "i0 and i1 is null" is not necessarily null
+    assertThat(Strong.isNull(and(i0, isNull(i1)), c1), is(false));
+    // If i0 and i1 are both null, "i0 and i1 is null" is null
+    assertThat(Strong.isNull(and(i0, isNull(i1)), c01), is(true));
+    // If i0 and i1 are both null, "i0 or i1" is null
+    assertThat(Strong.isNull(or(i0, i1), c01), is(true));
+    // If i0 is null, "i0 or i1" is not necessarily null
+    assertThat(Strong.isNull(or(i0, i1), c0), is(false));
+    assertThat(Strong.isNull(or(i0, i1), c1), is(false));
   }
\ No newline at end of file
