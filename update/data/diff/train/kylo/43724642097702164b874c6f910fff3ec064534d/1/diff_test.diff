diff --git a/old_test.java b/new_test.java
index eaa7108..9081fe5 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,12 +1,17 @@
 @Test
     @SuppressWarnings("unchecked")
     public void execute() throws Exception {
+        // Mock data set
+        final DataSet dataSet = Mockito.mock(DataSet.class);
+        Mockito.when(dataSet.persist(Mockito.any(StorageLevel.class))).thenReturn(dataSet);
+        Mockito.when(dataSet.schema()).thenReturn(new StructType());
+
         // Mock Spark context service
         final SparkContextService sparkContextService = Mockito.mock(SparkContextService.class);
 
         // Mock Spark script engine
         final SparkScriptEngine engine = Mockito.mock(SparkScriptEngine.class);
-        Mockito.when(engine.eval(Mockito.anyString(), Mockito.anyListOf(NamedParam.class))).thenReturn(new MockTransformResult());
+        Mockito.when(engine.eval(Mockito.anyString(), Mockito.anyListOf(NamedParam.class))).thenReturn(dataSet);
         Mockito.when(engine.getSparkContext()).thenReturn(Mockito.mock(SparkContext.class));
 
         // Test executing a request
@@ -15,7 +20,7 @@
 
         final TransformService service = new TransformService(TransformScript.class, engine, sparkContextService, new MockTransformJobTracker());
         final TransformResponse response = service.execute(request);
-        Assert.assertEquals(TransformResponse.Status.SUCCESS, response.getStatus());
+        Assert.assertEquals(TransformResponse.Status.PENDING, response.getStatus());
 
         // Test eval arguments
         final ArgumentCaptor<String> evalScript = ArgumentCaptor.forClass(String.class);
@@ -23,36 +28,20 @@
         Mockito.verify(engine).eval(evalScript.capture(), evalBindings.capture());
 
         String expectedScript = null;
-        try (InputStream stream = getClass().getResourceAsStream("transform-service-script1.scala")){
-            expectedScript = IOUtils.toString( stream,"UTF-8");
+        try (InputStream stream = getClass().getResourceAsStream("transform-service-script1.scala")) {
+            expectedScript = IOUtils.toString(stream, "UTF-8");
         }
 
-        if(expectedScript == null) {
+        if (expectedScript == null) {
             throw new Exception("transform-service-script1.scala failed to load");
         }
 
         Assert.assertEquals(expectedScript, evalScript.getValue());
 
         final List<NamedParam> bindings = evalBindings.getValue();
-        Assert.assertEquals(5, bindings.size());
-
-        Assert.assertEquals("policies", bindings.get(0).name());
-        Assert.assertEquals("Array[com.thinkbiganalytics.policy.rest.model.FieldPolicy]", bindings.get(0).tpe());
-        Assert.assertNull(bindings.get(0).value());
-
-        Assert.assertEquals("profiler", bindings.get(1).name());
-        Assert.assertEquals("com.thinkbiganalytics.spark.dataprofiler.Profiler", bindings.get(1).tpe());
-        Assert.assertNull(bindings.get(1).value());
-
-        Assert.assertEquals("sparkContextService", bindings.get(2).name());
-        Assert.assertEquals("com.thinkbiganalytics.spark.SparkContextService", bindings.get(2).tpe());
-        Assert.assertEquals(sparkContextService, bindings.get(2).value());
-
-        Assert.assertEquals("tableName", bindings.get(3).name());
-        Assert.assertEquals("String", bindings.get(3).tpe());
-        Assert.assertTrue(((String) bindings.get(3).value()).matches("^[0-9a-f]{32}$"));
+        Assert.assertEquals(1, bindings.size());
 
-        Assert.assertEquals("validator", bindings.get(4).name());
-        Assert.assertEquals("com.thinkbiganalytics.spark.datavalidator.DataValidator", bindings.get(4).tpe());
-        Assert.assertNull(bindings.get(4).value());
+        Assert.assertEquals("sparkContextService", bindings.get(0).name());
+        Assert.assertEquals("com.thinkbiganalytics.spark.SparkContextService", bindings.get(0).tpe());
+        Assert.assertEquals(sparkContextService, bindings.get(0).value());
     }
\ No newline at end of file
