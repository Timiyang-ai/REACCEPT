diff --git a/old_product.java b/new_product.java
index e825839..d37e237 100644
--- a/old_product.java
+++ b/new_product.java
@@ -15,12 +15,14 @@
 
         // Execute script
         List<NamedParam> bindings = ImmutableList.of((NamedParam) new NamedParamClass("database", "String", DATABASE), new NamedParamClass("tableName", "String", table));
-
         Object result = this.engine.eval(toScript(request), bindings);
+
+        TransformJob job;
         if (result instanceof Callable) {
             @SuppressWarnings("unchecked")
             Callable<TransformResponse> callable = (Callable)result;
-            tracker.submitJob(new TransformJob(table, callable, engine.getSparkContext()));
+            job = new TransformJob(table, callable, engine.getSparkContext());
+            tracker.submitJob(job);
         } else {
             IllegalStateException e = new IllegalStateException("Unexpected script result type: " + (result != null ? result.getClass() : null));
             log.error("Throwing {}", e);
@@ -35,10 +37,20 @@
         }
 
         // Build response
-        TransformResponse response = new TransformResponse();
-        response.setProgress(0.0);
-        response.setStatus(TransformResponse.Status.PENDING);
-        response.setTable(table);
+        TransformResponse response;
+
+        try {
+            response = job.get(500, TimeUnit.MILLISECONDS);
+        } catch (ExecutionException cause) {
+            ScriptException e = new ScriptException(cause);
+            log.error("Throwing {}", e);
+            throw e;
+        } catch (Exception cause) {
+            response = new TransformResponse();
+            response.setProgress(0.0);
+            response.setStatus(TransformResponse.Status.PENDING);
+            response.setTable(table);
+        }
 
         log.trace("exit with({})", response);
         return response;
