diff --git a/old_product.java b/new_product.java
index cb007f4..a20c8a1 100644
--- a/old_product.java
+++ b/new_product.java
@@ -2,60 +2,52 @@
     public TransformResponse execute(@Nonnull final TransformRequest request) throws ScriptException {
         log.trace("entry params({})", request);
 
-        // Verify state
-        if (!isRunning()) {
-            IllegalStateException e = new IllegalStateException("Transform service has not been started");
-            log.error("Throwing {}", e);
-            throw e;
-        }
-
         // Generate destination
-        String table = newTableName();
-        this.cache.put(table, MIN_BYTES);
+        final String table = newTableName();
 
         // Build bindings list
         final List<NamedParam> bindings = new ArrayList<>();
-        bindings.add(new NamedParamClass("database", "String", DATABASE));
+        bindings.add(new NamedParamClass("profiler", Profiler.class.getName(), profiler));
+        bindings.add(new NamedParamClass("sparkContextService", SparkContextService.class.getName(), sparkContextService));
         bindings.add(new NamedParamClass("tableName", "String", table));
 
         if (request.getDatasources() != null && !request.getDatasources().isEmpty()) {
-            final DatasourceProvider datasourceProvider = datasourceProviderFactory.getDatasourceProvider(request.getDatasources());
-            bindings.add(new NamedParamClass("datasourceProvider", datasourceProvider.getClass().getName(), datasourceProvider));
+            if (datasourceProviderFactory != null) {
+                final DatasourceProvider datasourceProvider = datasourceProviderFactory.getDatasourceProvider(request.getDatasources());
+                bindings.add(new NamedParamClass("datasourceProvider", DatasourceProvider.class.getName(), datasourceProvider));
+            } else {
+                final ScriptException e = new ScriptException("Script cannot be executed because no data source provider factory is available.");
+                log.error("Throwing {}", e);
+                throw e;
+            }
         }
 
         // Execute script
-        Object result = this.engine.eval(toScript(request), bindings);
+        final Object result = this.engine.eval(toScript(request), bindings);
 
-        TransformJob job;
+        final TransformJob job;
         if (result instanceof Callable) {
-            @SuppressWarnings("unchecked")
-            Callable<TransformResponse> callable = (Callable) result;
+            @SuppressWarnings("unchecked") final Callable<TransformResponse> callable = (Callable) result;
             job = new TransformJob(table, callable, engine.getSparkContext());
             tracker.submitJob(job);
         } else {
-            IllegalStateException e = new IllegalStateException("Unexpected script result type: " + (result != null ? result.getClass() : null));
+            final IllegalStateException e = new IllegalStateException("Unexpected script result type: " + (result != null ? result.getClass() : null));
             log.error("Throwing {}", e);
             throw e;
         }
 
-        // Update table weight
-        try {
-            updateWeight(table, this.engine.getSQLContext());
-        } catch (Exception e) {
-            log.warn("Failed to update table weight: {}", e.toString());
-        }
-
         // Build response
         TransformResponse response;
 
         try {
             response = job.get(500, TimeUnit.MILLISECONDS);
             tracker.removeJob(table);
-        } catch (ExecutionException cause) {
-            ScriptException e = new ScriptException(cause);
+        } catch (final ExecutionException cause) {
+            final ScriptException e = new ScriptException(cause);
             log.error("Throwing {}", e);
             throw e;
-        } catch (Exception cause) {
+        } catch (final InterruptedException | TimeoutException e) {
+            log.trace("Timeout waiting for script result", e);
             response = new TransformResponse();
             response.setProgress(0.0);
             response.setStatus(TransformResponse.Status.PENDING);
