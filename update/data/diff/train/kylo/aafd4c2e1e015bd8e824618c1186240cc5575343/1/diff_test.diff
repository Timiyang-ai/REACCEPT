diff --git a/old_test.java b/new_test.java
index 5e49c27..21bea32 100644
--- a/old_test.java
+++ b/new_test.java
@@ -6,7 +6,7 @@
         // Verify config variable
         final NifiProperty prop1 = createProperty("${config.test.value}");
         Assert.assertTrue(resolver.resolveExpression(metadata, prop1));
-        Assert.assertEquals("Hello world!", prop1.getValue());
+        Assert.assertEquals("hello-world", prop1.getValue());
 
         // Verify metadata variable
         final NifiProperty prop2 = createProperty("${metadata.systemFeedName}");
@@ -20,7 +20,7 @@
 
         final NifiProperty prop4 = createProperty(STATIC_KEY, "${config.test.value}");
         Assert.assertTrue(resolver.resolveExpression(metadata, prop4));
-        Assert.assertEquals("Hello world!", prop4.getValue());
+        Assert.assertEquals("hello-world", prop4.getValue());
 
         final NifiProperty prop5 = createProperty(STATIC_KEY, "");
         Assert.assertTrue(resolver.resolveExpression(metadata, prop5));
@@ -29,10 +29,20 @@
         // Verify multiple variables
         final NifiProperty prop6 = createProperty("${metadata.systemFeedName}.${config.test.value}");
         Assert.assertTrue(resolver.resolveExpression(metadata, prop6));
-        Assert.assertEquals("myfeed.Hello world!", prop6.getValue());
+        Assert.assertEquals("myfeed.hello-world", prop6.getValue());
+
+        // Verify multiple variables
+        final NifiProperty prop7 = createProperty("$${${metadata.systemFeedName}.${config.test.value}}");
+        Assert.assertTrue(resolver.resolveExpression(metadata, prop7));
+        Assert.assertEquals("${myfeed.hello-world}", prop7.getValue());
+
+        // Verify multiple variables
+        final NifiProperty prop8 = createProperty("${config.${metadata.systemFeedName}.${config.test.value}}");
+        Assert.assertTrue(resolver.resolveExpression(metadata, prop8));
+        Assert.assertEquals("runtime value", prop8.getValue());
 
         // Verify static text
-        final NifiProperty prop7 = createProperty("config.test.value");
-        Assert.assertFalse(resolver.resolveExpression(metadata, prop7));
-        Assert.assertEquals("config.test.value", prop7.getValue());
+        final NifiProperty prop9 = createProperty("config.test.value");
+        Assert.assertFalse(resolver.resolveExpression(metadata, prop9));
+        Assert.assertEquals("config.test.value", prop9.getValue());
     }
\ No newline at end of file
