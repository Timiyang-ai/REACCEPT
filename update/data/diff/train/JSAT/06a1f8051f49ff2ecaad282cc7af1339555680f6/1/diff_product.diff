diff --git a/old_product.java b/new_product.java
index b282ff2..6d5793f 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,13 +1,13 @@
-public Vec optimize(double eps, int iterationLimit, Function f, List<Vec> initalPoints)
+public Vec optimize(double eps, int iterationLimit, Function f, List<Vec> initalPoints, boolean parallel)
     {
         if(initalPoints.isEmpty())
             throw new ArithmeticException("Empty Initial list. Can not determin dimension of problem");
         Vec init = initalPoints.get(0);
         int N = initalPoints.get(0).length();
         //The simplex verticies paired with their value from the objective function 
-        List<ProbailityMatch<Vec>> simplex = new ArrayList<ProbailityMatch<Vec>>(N);
+        List<ProbailityMatch<Vec>> simplex = new ArrayList<>(N);
         for(Vec vars : initalPoints)
-            simplex.add(new ProbailityMatch<Vec>(f.f(vars), vars.clone()));
+            simplex.add(new ProbailityMatch<>(f.f(vars, parallel), vars.clone()));
         Random rand = new Random(initalPoints.hashCode());
         
         while(simplex.size() < N+1)
@@ -20,7 +20,7 @@ public Vec optimize(double eps, int iterationLimit, Function f, List<Vec> inital
                 else
                     newSimplex.set(i, rand.nextGaussian());
             
-            simplex.add(new ProbailityMatch<Vec>(f.f(newSimplex), newSimplex));
+            simplex.add(new ProbailityMatch<>(f.f(newSimplex, parallel), newSimplex));
         }
         
         Collections.sort(simplex);
