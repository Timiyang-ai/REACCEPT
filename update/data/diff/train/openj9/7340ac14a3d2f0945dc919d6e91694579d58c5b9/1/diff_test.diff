diff --git a/old_test.java b/new_test.java
index 0676850..c0ff50b 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,7 +4,12 @@
 		obj = new Object();
 		Reference ref = new SoftReference(obj, rq);
 		AssertJUnit.assertTrue("Enqueue failed.", (!ref.isEnqueued()) && ((ref.enqueue()) && (ref.isEnqueued())));
-		AssertJUnit.assertTrue("Not properly enqueued.", rq.poll().get() == obj);
+		if (isJava8 || disableClearBeforeEnqueue) {
+			AssertJUnit.assertTrue("Not properly enqueued.", rq.poll().get() == obj);
+		} else {
+			AssertJUnit.assertTrue("Not properly enqueued.", rq.poll().get() == null);
+		}
+		
 		AssertJUnit.assertTrue("Should remain enqueued.", !ref.isEnqueued()); //This fails.
 		AssertJUnit.assertTrue("Can not enqueue twice.", (!ref.enqueue()) && (rq.poll() == null));
 
@@ -12,7 +17,11 @@
 		obj = new Object();
 		ref = new WeakReference(obj, rq);
 		AssertJUnit.assertTrue("Enqueue failed2.", (!ref.isEnqueued()) && ((ref.enqueue()) && (ref.isEnqueued())));
-		AssertJUnit.assertTrue("Not properly enqueued2.", rq.poll().get() == obj);
+		if (isJava8 || disableClearBeforeEnqueue) {
+			AssertJUnit.assertTrue("Not properly enqueued2.", rq.poll().get() == obj);
+		} else {
+			AssertJUnit.assertTrue("Not properly enqueued2.", rq.poll().get() == null);
+		}
 		AssertJUnit.assertTrue("Should remain enqueued2.", !ref.isEnqueued()); //This fails.
 		AssertJUnit.assertTrue("Can not enqueue twice2.", (!ref.enqueue()) && (rq.poll() == null));
 	}
\ No newline at end of file
