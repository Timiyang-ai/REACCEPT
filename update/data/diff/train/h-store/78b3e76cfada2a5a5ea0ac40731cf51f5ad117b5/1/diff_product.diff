diff --git a/old_product.java b/new_product.java
index 4befc00..8b16a45 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,54 +1,60 @@
-public void save(String path, String name) throws IOException {
-        LOG.debug("Writing FeatureSet contents to '" + path + "'");
-        
+public Instances export(String name) {
         // Attributes
         FastVector attrs = new FastVector();
         for (Entry<String, Type> e : this.attributes.entrySet()) {
             Attribute a = null;
             
-            if (e.getValue() == Type.RANGE) {
-                FastVector range_values = new FastVector();
-                for (String v : this.attribute_ranges.get(e.getKey())) {
-                    range_values.addElement(v);
-                } // FOR
-                a = new Attribute(e.getKey(), range_values);
-            } else {
-                a = new Attribute(e.getKey());    
-            }
+            switch (e.getValue()) {
+                case RANGE:
+                case BOOLEAN: {
+                    FastVector range_values = new FastVector();
+                    for (String v : this.attribute_ranges.get(e.getKey())) {
+                        range_values.addElement(v);
+                    } // FOR
+                    a = new Attribute(e.getKey(), range_values);
+                    break;
+                }
+                case STRING:
+                    a = new Attribute(e.getKey(), (FastVector)null);
+                    break;
+                default:
+                    a = new Attribute(e.getKey());       
+            } // SWITCH
             attrs.addElement(a);
         } // FOR
 
         Instances data = new Instances(name, attrs, 0);
         
-        // Values
+        // Instance Values
         for (Vector<Object> values : this.txn_values.values()) {
-            double vals[] = new double[data.numAttributes()];
-            for (int i = 0; i < vals.length; i++) {
+            double instance[] = new double[data.numAttributes()];
+            for (int i = 0; i < instance.length; i++) {
                 Object value = values.get(i);
                 Type type = this.attributes.getValue(i);
                 
                 if (value == null) {
-                    vals[i] = Instance.missingValue();
+                    instance[i] = Instance.missingValue();
                 } else {
                     switch (type) {
                         case NUMERIC:
-                            vals[i] = ((Number)value).doubleValue();
+                            instance[i] = ((Number)value).doubleValue();
                             break;
                         case STRING:
-                            vals[i] = data.attribute(i).addStringValue(value.toString());
+                            instance[i] = data.attribute(i).addStringValue(value.toString());
                             break;
                         case BOOLEAN:
-                            vals[i] = data.attribute(i).indexOfValue(Boolean.toString((Boolean)value));
+                            instance[i] = data.attribute(i).indexOfValue(Boolean.toString((Boolean)value));
                             break;
                         case RANGE:
-                            vals[i] = data.attribute(i).indexOfValue(value.toString());
+                            instance[i] = data.attribute(i).indexOfValue(value.toString());
                             break;
                         default:
                             assert(false) : "Unexpected attribute type " + type;
                     } // SWITCH
                 }
-                
-            }
+            } // FOR
+            data.add(new Instance(1.0, instance));
         } // FOR
-        FileWriter out = new FileWriter(path);
+        
+        return (data);
     }
\ No newline at end of file
