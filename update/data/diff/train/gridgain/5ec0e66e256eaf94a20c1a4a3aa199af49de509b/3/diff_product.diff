diff --git a/old_product.java b/new_product.java
index 2a3838d..acd6cf4 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,5 +1,11 @@
-public static <K, V, C extends Serializable> void initContext(Ignite ignite, String upstreamCacheName,
-        IgniteBiPredicate<K, V> filter, String datasetCacheName, PartitionContextBuilder<K, V, C> ctxBuilder, int retries,
+public static <K, V, C extends Serializable> void initContext(
+        Ignite ignite,
+        String upstreamCacheName,
+        IgniteBiPredicate<K, V> filter,
+        UpstreamTransformerChain<K, V> transformersChain,
+        String datasetCacheName,
+        PartitionContextBuilder<K, V, C> ctxBuilder,
+        int retries,
         int interval) {
         affinityCallWithRetries(ignite, Arrays.asList(datasetCacheName, upstreamCacheName), part -> {
             Ignite locIgnite = Ignition.localIgnite();
@@ -11,13 +17,23 @@ public static <K, V, C extends Serializable> void initContext(Ignite ignite, Str
             qry.setPartition(part);
             qry.setFilter(filter);
 
-            long cnt = computeCount(locUpstreamCache, qry);
-
             C ctx;
+            UpstreamTransformerChain<K, V> chainCopy = Utils.copy(transformersChain);
+            chainCopy.modifySeed(s -> s + part);
+
+            long cnt = computeCount(locUpstreamCache, qry, transformersChain);
+
             try (QueryCursor<UpstreamEntry<K, V>> cursor = locUpstreamCache.query(qry,
                 e -> new UpstreamEntry<>(e.getKey(), e.getValue()))) {
 
-                Iterator<UpstreamEntry<K, V>> iter = new IteratorWithConcurrentModificationChecker<>(cursor.iterator(), cnt,
+                Iterator<UpstreamEntry<K, V>> it = cursor.iterator();
+                if (!chainCopy.isEmpty()) {
+                    Stream<UpstreamEntry<K, V>> transformedStream = chainCopy.transform(Utils.asStream(it, cnt));
+                    it = transformedStream.iterator();
+                }
+                Iterator<UpstreamEntry<K, V>> iter = new IteratorWithConcurrentModificationChecker<>(
+                    it,
+                    cnt,
                     "Cache expected to be not modified during dataset data building [partition=" + part + ']');
 
                 ctx = ctxBuilder.build(iter, cnt);
