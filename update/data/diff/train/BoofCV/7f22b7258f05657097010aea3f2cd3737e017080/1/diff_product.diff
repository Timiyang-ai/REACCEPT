diff --git a/old_product.java b/new_product.java
index 3401f96..b011537 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,21 +1,18 @@
 public static List<PointIndex_I32> fitPolygon(List<Point2D_I32> sequence, boolean loop,
-												  double splitFraction, ConfigLength minimumSideLength, int iterations) {
-		GrowQueue_I32 splits = new GrowQueue_I32();
+												  int minimumSideLength , double cornerPenalty ) {
 
-		if( loop ) {
-			SplitMergeLineFitLoop alg = new SplitMergeLineFitLoop(splitFraction,minimumSideLength,iterations);
-			alg.process(sequence,splits);
-			RefinePolyLineCorner refine = new RefinePolyLineCorner(true,10);
-			refine.fit(sequence,splits);
-		} else {
-			SplitMergeLineFitSegment alg = new SplitMergeLineFitSegment(splitFraction,minimumSideLength,iterations);
-			alg.process(sequence,splits);
-			RefinePolyLineCorner refine = new RefinePolyLineCorner(false,10);
-			refine.fit(sequence,splits);
-		}
+		PolylineSplitMerge alg = new PolylineSplitMerge();
+		alg.setLoops(loop);
+		alg.setMinimumSideLength(minimumSideLength);
+		alg.setCornerScorePenalty(cornerPenalty);
+
+		alg.process(sequence);
+		PolylineSplitMerge.CandidatePolyline best = alg.getBestPolyline();
 
 		FastQueue<PointIndex_I32> output = new FastQueue<>(PointIndex_I32.class, true);
-		indexToPointIndex(sequence,splits,output);
+		if( best != null ) {
+			indexToPointIndex(sequence,best.splits,output);
+		}
 
 		return new ArrayList<>(output.toList());
 	}
\ No newline at end of file
