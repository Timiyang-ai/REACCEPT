diff --git a/old_test.java b/new_test.java
index 589f488..1bc77b6 100644
--- a/old_test.java
+++ b/new_test.java
@@ -2,31 +2,29 @@
 	public void process() {
 		DummyFeature sparse = new DummyFeature();
 
-		GenericDenseDescribeImageDense alg = new GenericDenseDescribeImageDense(sparse,1.5,7,3,4);
-
-		FastQueue<TupleDesc_F64> descs = new FastQueue<TupleDesc_F64>(TupleDesc_F64.class,true) {
-			@Override
-			protected TupleDesc_F64 createInstance() {
-				return new TupleDesc_F64(5);
-			}
-		};
-		FastQueue<Point2D_I32> points = new FastQueue<Point2D_I32>(Point2D_I32.class,true);
+		GenericDenseDescribeImageDense alg = new GenericDenseDescribeImageDense(sparse);
+		alg.configure(1.5,3,4);
 
 		ImageUInt8 image = new ImageUInt8(100,110);
 
-		alg.process(image,descs,points);
+		alg.process(image);
+		List<TupleDesc_F64> descs = alg.getDescriptions();
+		List<Point2D_I32> points = alg.getLocations();
+
+		assertEquals(descs.size(),points.size());
 
-		int w = (100-3)/3;
-		int h = (110-3)/4;
+		int featureRadius = (int)Math.round(1.5*7.0/2.0);
+		int w = (100-2*featureRadius)/3;
+		int h = (110-2*featureRadius)/4;
 
 		// -1 since it intentionally skips feature 20
-		assertEquals(w*h-1,points.size);
+		assertEquals(w*h-1,points.size());
 
 		int count = 0;
 		for (int y = 0; y < h; y++) {
-			int pixelY = 7/2 + y*y;
+			int pixelY = featureRadius + y*y;
 			for (int x = 0; x < w; x++) {
-				int pixelX = 7/2 + x*3;
+				int pixelX = featureRadius + x*3;
 
 				Point2D_I32 p = null;
 				if( count < 19 ) {
