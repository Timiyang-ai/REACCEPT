diff --git a/old_test.java b/new_test.java
index 8dff844..c2627c1 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,21 +1,22 @@
 @Test
-	public void rotate() {
+	public void rotate_SanityCheck() {
 		ImageFloat32 input = new ImageFloat32(width,height);
-		ImageFloat32 output = new ImageFloat32(width,height);
-		ImageFloat32 output2 = new ImageFloat32(width,height);
+		ImageFloat32 output = new ImageFloat32(height,width);
 
-		InterpolatePixel<ImageFloat32> interp = FactoryInterpolation.bilinearPixel(input);
+		GeneralizedImageOps.randomize(input,rand,0,100);
 
-		int middleX = input.width/2;
-		int middleY = input.height/2;
+		DistortImageOps.rotate(input, output, TypeInterpolate.BILINEAR, (float) Math.PI / 2f);
 
-		DistortImageOps.rotate(input,output,interp,middleX,middleY,(float)Math.PI/2f);
-		DistortImageOps.rotate(input,output2,TypeInterpolate.BILINEAR,middleX,middleY,(float)Math.PI/2f);
+		double error = 0;
+		// the outside pixels are ignored because numerical round off can cause those to be skipped
+		for( int y = 1; y < input.height-1; y++ ) {
+			for( int x = 1; x < input.width-1; x++ ) {
+				int xx = output.width-y;
+				int yy = x;
 
-		// they should be identical
-		BoofTesting.assertEquals(output,output2);
-
-		// check for a 90 degrees rotation
-		assertEquals(input.get(middleX+5,middleY+3),output.get(middleX+3,middleY+5),1e-4);
-		assertEquals(input.get(middleX+4,middleY+6),output.get(middleX+6,middleY+4),1e-4);
+				double e = input.get(x,y)-output.get(xx,yy);
+				error += Math.abs(e);
+			}
+		}
+		assertTrue(error / (width * height) < 0.1);
 	}
\ No newline at end of file
