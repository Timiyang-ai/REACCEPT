diff --git a/old_product.java b/new_product.java
index 76ea5dd..978b371 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,24 @@
-void findErrorLocatorPolynomialBM(int syndromes[] , int length , GrowQueue_I8 errorLocator ) {
+void findErrorLocatorPolynomialBM(GrowQueue_I8 syndromes , GrowQueue_I8 errorLocator ) {
 		GrowQueue_I8 C = errorLocator; // error polynomial
 		GrowQueue_I8 B = new GrowQueue_I8();  // previous error polynomial
 		// TODO remove new from this function
 
-		initToOne(C,length+1);
-		initToOne(B,length+1);
+		initToOne(C,syndromes.size+1);
+		initToOne(B,syndromes.size+1);
 
-		GrowQueue_I8 tmp = new GrowQueue_I8(length);
+		GrowQueue_I8 tmp = new GrowQueue_I8(syndromes.size);
 
 //		int L = 0;
 //		int m = 1; // stores how much B is 'shifted' by
 		int b = 1;
 
-		for (int n = 0; n < length; n++) {
+		for (int n = 0; n < syndromes.size; n++) {
 
 			// Compute discrepancy delta
-			int delta = syndromes[n];
+			int delta = syndromes.data[n]&0xFF;
 
 			for (int j = 1; j < C.size; j++) {
-				delta ^= math.multiply(C.data[C.size-j-1]&0xFF, syndromes[n-j]);
+				delta ^= math.multiply(C.data[C.size-j-1]&0xFF, syndromes.data[n-j]&0xFF);
 			}
 
 			// B = D^m * B
@@ -31,7 +31,7 @@ void findErrorLocatorPolynomialBM(int syndromes[] , int length , GrowQueue_I8 er
 				int scale = math.multiply(delta, math.inverse(b));
 				math.polyAddScaleB(C, B, scale, tmp);
 
-				if (2 * C.size > length) {
+				if (2 * C.size > syndromes.size) {
 					// if 2*L > N ---- Step 4
 //					m += 1;
 				} else {
