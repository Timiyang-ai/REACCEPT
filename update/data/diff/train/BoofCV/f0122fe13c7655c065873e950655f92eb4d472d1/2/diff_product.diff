diff --git a/old_product.java b/new_product.java
index ad1bf2d..168bbeb 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,14 +1,10 @@
 public static PointTransform_F32 allInside( IntrinsicParameters param,
 												IntrinsicParameters paramAdj ) {
-		RemoveRadialPtoP_F32 removeDistort = new RemoveRadialPtoP_F32();
-		AddRadialPtoP_F32 addDistort = new AddRadialPtoP_F32();
-		removeDistort.setK(param.fx, param.fy, param.skew, param.cx, param.cy).
-				setDistortion(param.radial,param.t1,param.t2);
-		addDistort.setK(param.fx, param.fy, param.skew, param.cx, param.cy).
-				setDistortion(param.radial,param.t1,param.t2);
+		PointTransform_F32 remove_p_to_p = createLensDistortion(param).undistort_F32(true,true);
+		PointTransform_F32 add_p_to_p = createLensDistortion(param).distort_F32(true, true);
 
 		RectangleLength2D_F32 bound = LensDistortionOps.boundBoxInside(param.width, param.height,
-				new PointToPixelTransform_F32(removeDistort));
+				new PointToPixelTransform_F32(remove_p_to_p));
 
 		// ensure there are no strips of black
 		LensDistortionOps.roundInside(bound);
@@ -25,7 +21,7 @@ public static PointTransform_F32 allInside( IntrinsicParameters param,
 		// adjustment matrix
 		DenseMatrix64F A = new DenseMatrix64F(3,3,true,scale,0,deltaX,0,scale,deltaY,0,0,1);
 
-		PointTransform_F32 tranAdj = PerspectiveOps.adjustIntrinsic_F32(addDistort, false, param, A, paramAdj);
+		PointTransform_F32 tranAdj = PerspectiveOps.adjustIntrinsic_F32(add_p_to_p, false, param, A, paramAdj);
 
 		if( param.flipY) {
 			PointTransform_F32 flip = new FlipVertical_F32(param.height);
