diff --git a/old_product.java b/new_product.java
index cded428..c3ff6a7 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,25 +1,42 @@
-public static PointTransform_F32 allInside( IntrinsicParameters param,
-												IntrinsicParameters paramAdj ,
-												boolean adjToDistorted ) {
+public static PointTransform_F32 transform_F32(AdjustmentType type,
+												   IntrinsicParameters param,
+												   IntrinsicParameters paramAdj,
+												   boolean adjToDistorted)
+	{
 		PointTransform_F32 remove_p_to_p = distortTransform(param).undistort_F32(true, true);
 
-		RectangleLength2D_F32 bound = LensDistortionOps.boundBoxInside(param.width, param.height,
-				new PointToPixelTransform_F32(remove_p_to_p));
+		RectangleLength2D_F32 bound;
+		if( type == AdjustmentType.FULL_VIEW ) {
+			bound = DistortImageOps.boundBox_F32(param.width, param.height,
+					new PointToPixelTransform_F32(remove_p_to_p));
+		} else if( type == AdjustmentType.SHRINK) {
+			bound = LensDistortionOps.boundBoxInside(param.width, param.height,
+					new PointToPixelTransform_F32(remove_p_to_p));
 
-		// ensure there are no strips of black
-		LensDistortionOps.roundInside(bound);
+			// ensure there are no strips of black
+			LensDistortionOps.roundInside(bound);
+		} else {
+			throw new IllegalArgumentException("Unsupported type "+type);
+		}
 
 		double scaleX = bound.width/param.width;
 		double scaleY = bound.height/param.height;
 
-		double scale = Math.min(scaleX, scaleY);
+		double scale,deltaX,deltaY;
 
-		// translation and shift over so that the small axis is in the middle
-		double deltaX = bound.x0 + (scaleX-scale)*param.width/2.0;
-		double deltaY = bound.y0 + (scaleY-scale)*param.height/2.0;
+		if( type == AdjustmentType.FULL_VIEW ) {
+			scale = Math.max(scaleX, scaleY);
+			deltaX = bound.x0;
+			deltaY = bound.y0;
+		} else {
+			scale = Math.min(scaleX, scaleY);
+			// translation and shift over so that the small axis is in the middle
+			deltaX = bound.x0 + (scaleX-scale)*param.width/2.0;
+			deltaY = bound.y0 + (scaleY-scale)*param.height/2.0;
+		}
 
 		// adjustment matrix
 		DenseMatrix64F A = new DenseMatrix64F(3,3,true,scale,0,deltaX,0,scale,deltaY,0,0,1);
 
-		return adjustmentTransform(param, paramAdj, adjToDistorted, remove_p_to_p, A);
+		return adjustmentTransform_F32(param, paramAdj, adjToDistorted, remove_p_to_p, A);
 	}
\ No newline at end of file
