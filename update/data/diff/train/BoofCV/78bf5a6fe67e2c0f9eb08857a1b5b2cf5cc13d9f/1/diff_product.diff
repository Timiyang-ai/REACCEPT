diff --git a/old_product.java b/new_product.java
index 598d6bb..c5a17dc 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,12 +1,11 @@
-void computeCostInnerD(GrayU16 costXD, int idxCost, int idxLr, int minLrPrev) {
-		final int lengthD = this.lengthD;
-		idxLr += 1; // start at d=1
-		for (int d = 1; d < lengthD-1; d++, idxLr++) {
+void computeCostInnerD(GrayU16 costXD, int idxCost, int idxLrPrev, int minLrPrev, int lengthLocalD ) {
+		idxLrPrev += 1; // start at d=1
+		for (int d = 1; d < lengthLocalD-1; d++, idxLrPrev++) {
 			int cost = costXD.data[idxCost+d] & 0xFFFF; // C(p,d)
 
-			int b = workCostLr[idxLr-1]&0xFFFF; // Lr(p-r,d-1)
-			int a = workCostLr[idxLr  ]&0xFFFF; // Lr(p-r,d)
-			int c = workCostLr[idxLr+1]&0xFFFF; // Lr(p-r,d+1)
+			int b = workCostLr[idxLrPrev-1]&0xFFFF; // Lr(p-r,d-1)
+			int a = workCostLr[idxLrPrev  ]&0xFFFF; // Lr(p-r,d  )
+			int c = workCostLr[idxLrPrev+1]&0xFFFF; // Lr(p-r,d+1)
 
 			// Add penalty terms
 			b += penalty1;
@@ -17,11 +16,11 @@ void computeCostInnerD(GrayU16 costXD, int idxCost, int idxLr, int minLrPrev) {
 				a = b;
 			if( c < a )
 				a = c;
-			if( minLrPrev + penalty2 < c )
+			if( minLrPrev + penalty2 < a )
 				a = minLrPrev + penalty2;
 
 			// minCostPrev is done to reduce the rate at which the cost increases
-			workCostLr[idxLr+lengthD] = (short)(cost + a - minLrPrev);
+			workCostLr[idxLrPrev+this.lengthD] = (short)(cost + a - minLrPrev);
 			// Lr(p,d) = above
 		}
 	}
\ No newline at end of file
