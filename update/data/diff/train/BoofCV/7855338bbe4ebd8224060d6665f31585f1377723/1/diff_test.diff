diff --git a/old_test.java b/new_test.java
index 83aab64..ac6066a 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test
-	public void correctErrors() {
+	public void correctErrors_hand() {
 		GrowQueue_I8 message = GrowQueue_I8.parseHex(
 				"[ 0x40, 0xd2, 0x75, 0x47, 0x76, 0x17, 0x32, 0x06, 0x27, 0x26, 0x96, 0xc6, 0xc6, 0x96, 0x70, 0xec ]");
 		GrowQueue_I8 ecc = new GrowQueue_I8();
@@ -11,10 +11,11 @@
 		alg.generator(nsyn);
 		alg.computeECC(message,ecc);
 
-		message.data[0] = 0;
-		message.data[4] = 8;
-		message.data[5] = 9;
-		alg.computeSyndromes(message,ecc,syndromes);
+		GrowQueue_I8 corrupted = message.copy();
+		corrupted.data[0] = 0;
+		corrupted.data[4] = 8;
+		corrupted.data[5] = 9;
+		alg.computeSyndromes(corrupted,ecc,syndromes);
 		alg.findErrorLocatorPolynomialBM(syndromes,errorLocator);
 
 		GrowQueue_I32 errorLocations = new GrowQueue_I32(3);
@@ -23,15 +24,10 @@
 		errorLocations.data[2] = 5;
 		errorLocations.size = 3;
 
-		GrowQueue_I8 corrected = new GrowQueue_I8();
+		alg.correctErrors(corrupted,message.size+ecc.size,syndromes,errorLocator,errorLocations);
 
-		alg.correctErrors(message,message.size+ecc.size,syndromes,errorLocator,errorLocations,corrected);
-
-		message.data[0] = 0x40;
-		message.data[4] = 0x76;
-		message.data[5] = 0x17;
-		assertEquals(corrected.size,message.size);
-		for (int j = 0; j < corrected.size; j++) {
-			assertEquals(corrected.get(j),message.get(j));
+		assertEquals(corrupted.size,message.size);
+		for (int j = 0; j < corrupted.size; j++) {
+			assertEquals(corrupted.get(j),message.get(j));
 		}
 	}
\ No newline at end of file
