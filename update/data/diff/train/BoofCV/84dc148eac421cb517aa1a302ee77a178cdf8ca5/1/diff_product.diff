diff --git a/old_product.java b/new_product.java
index 6fcf5a6..61bafbf 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,16 +6,40 @@ public boolean process( I frame ) {
 
 		totalFramesProcessed++;
 
-		if( !tracker.foundModel() ) {
+		List<PointTrack> tracks = tracker.getActiveTracks(null);
+
+		if( tracks.size() == 0 )
+			return false;
+
+		List<AssociatedPair> pairs = new ArrayList<AssociatedPair>();
+		for( PointTrack t : tracks ) {
+			pairs.add((AssociatedPair)t.getCookie());
+		}
+
+		// fit the motion model to the feature tracks
+		if( !modelMatcher.process((List)pairs) ) {
 			return false;
 		}
 
-		keyToCurr.set(tracker.getModel());
+		keyToCurr.set(modelMatcher.getModel());
 
-		// mark that the track is in the inlier set
-		for( AssociatedPair p : tracker.getMatchSet() ) {
+		// mark that the track is in the inlier set and compute the containment rectangle
+		contRect.x0 = contRect.y0 = Double.MAX_VALUE;
+		contRect.x1 = contRect.y1 = -Double.MAX_VALUE;
+		for( AssociatedPair p : modelMatcher.getMatchSet() ) {
 			((AssociatedPairTrack)p).lastUsed = totalFramesProcessed;
+
+			Point2D_F64 t = p.p2;
+			if( t.x > contRect.x1 )
+				contRect.x1 = t.x;
+			if( t.y > contRect.y1 )
+				contRect.y1 = t.y;
+			if( t.x < contRect.x0 )
+				contRect.x0 = t.x;
+			if( t.y < contRect.y0 )
+				contRect.y0 = t.y;
 		}
+		contFraction = contRect.area()/(frame.width*frame.height);
 
 		// Update the motion
 		worldToKey.concat(keyToCurr, worldToCurr);
