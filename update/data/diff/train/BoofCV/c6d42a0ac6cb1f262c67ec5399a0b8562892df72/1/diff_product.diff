diff --git a/old_product.java b/new_product.java
index 069038e..c212462 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,24 +1,24 @@
-private void optimize( Point2D_F64 a , Point2D_F64 b , LineGeneral2D_F64 foundLocal ) {
+protected void optimize( Point2D_F64 a , Point2D_F64 b , LineGeneral2D_F64 foundLocal ) {
 
 		float slopeX = (float)(b.x - a.x);
 		float slopeY = (float)(b.y - a.y);
+		float r = (float)Math.sqrt(slopeX*slopeX + slopeY*slopeY);
+		// vector of unit length pointing in direction of the slope
+		float unitX = slopeX/r;
+		float unitY = slopeY/r;
 
 		// define the line segment which points will be sampled along.
 		// don't sample too close to the corner since the line because less clear there and it can screw up results
-		float x0 = (float)a.x + slopeX*lineBorder;
-		float y0 = (float)a.y + slopeY*lineBorder;
+		float x0 = (float)a.x + unitX*lineBorder;
+		float y0 = (float)a.y + unitY*lineBorder;
 
 		// truncate the slope
-		slopeX *= (1.0f-2.0f*lineBorder);
-		slopeY *= (1.0f-2.0f*lineBorder);
+		slopeX -= 2.0f*unitX*lineBorder;
+		slopeY -= 2.0f*unitY*lineBorder;
 
 		// normalized tangent of sample distance length
-		float tanX = -slopeY;
-		float tanY = slopeX;
-
-		float r = (float)Math.sqrt(tanX*tanX + tanY*tanY);
-		tanX = tanX/r;
-		tanY = tanY/r;
+		float tanX = -unitY;
+		float tanY = unitX;
 
 		// set up inputs into line fitting
 		computePointsAndWeights(slopeX, slopeY, x0, y0, tanX, tanY);
