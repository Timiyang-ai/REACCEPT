diff --git a/old_product.java b/new_product.java
index 347cc06..ebf9b21 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,13 +1,9 @@
 public static boolean optimizedParam( List<List<Point2D_F64>> observations ,
 										  List<Point2D_F64> grid ,
-										  boolean assumeZeroSkew ,
-										  ParametersZhang99 initial ,
-										  ParametersZhang99 found ,
+										  Zhang99Parameters initial ,
+										  Zhang99Parameters found ,
 										  UnconstrainedLeastSquares optimizer )
 	{
-		Zhang99OptimizationFunction func = new Zhang99OptimizationFunction(
-				initial.createNew(),assumeZeroSkew , grid,observations);
-
 		if( optimizer == null ) {
 //			optimizer = FactoryOptimization.leastSquaresTrustRegion(1,
 //					RegionStepType.DOG_LEG_FTF,true);
@@ -16,7 +12,15 @@ public static boolean optimizedParam( List<List<Point2D_F64>> observations ,
 		}
 
 		double model[] = new double[ initial.size() ];
-		initial.convertToParam(assumeZeroSkew,model);
+		initial.convertToParam(model);
+
+		Zhang99OptimizationFunction func = new Zhang99OptimizationFunction(
+				initial.createNew(), grid,observations);
+
+// Both the numerical and analytical Jacobian appear to provide the same results, but the
+// unit test tolerance is so crude that I trust the numerical Jacobian more
+//		Zhang99OptimizationJacobian jacobian = new Zhang99OptimizationJacobian(
+//				initial.assumeZeroSkew,initial.distortion.length,observations.size(),grid);
 
 		optimizer.setFunction(func,null);
 		optimizer.initialize(model,1e-10,1e-25*observations.size());
@@ -26,7 +30,7 @@ public static boolean optimizedParam( List<List<Point2D_F64>> observations ,
 		}
 
 		double param[] = optimizer.getParameters();
-		found.setFromParam(assumeZeroSkew,param);
+		found.setFromParam(param);
 
 		return true;
 	}
\ No newline at end of file
