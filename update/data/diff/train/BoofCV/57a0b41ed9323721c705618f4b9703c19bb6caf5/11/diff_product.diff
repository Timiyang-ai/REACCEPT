diff --git a/old_product.java b/new_product.java
index 92e9017..b33e4b5 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,19 +1,19 @@
-public static <T extends ImageSingleBand>
-	ImageUInt8 threshold( T input , ImageUInt8 output ,
-						  double threshold , boolean down )
+public static <T extends ImageGray>
+	GrayU8 threshold(T input , GrayU8 output ,
+					 double threshold , boolean down )
 	{
-		if( input instanceof ImageFloat32 ) {
-			return ThresholdImageOps.threshold((ImageFloat32)input,output,(float)threshold,down);
-		} else if( input instanceof ImageUInt8 ) {
-			return ThresholdImageOps.threshold((ImageUInt8)input,output,(int)threshold,down);
-		} else if( input instanceof ImageUInt16) {
-			return ThresholdImageOps.threshold((ImageUInt16)input,output,(int)threshold,down);
-		} else if( input instanceof ImageSInt16) {
-			return ThresholdImageOps.threshold((ImageSInt16)input,output,(int)threshold,down);
-		} else if( input instanceof ImageSInt32 ) {
-			return ThresholdImageOps.threshold((ImageSInt32)input,output,(int)threshold,down);
-		} else if( input instanceof ImageFloat64 ) {
-			return ThresholdImageOps.threshold((ImageFloat64)input,output,threshold,down);
+		if( input instanceof GrayF32) {
+			return ThresholdImageOps.threshold((GrayF32)input,output,(float)threshold,down);
+		} else if( input instanceof GrayU8) {
+			return ThresholdImageOps.threshold((GrayU8)input,output,(int)threshold,down);
+		} else if( input instanceof GrayU16) {
+			return ThresholdImageOps.threshold((GrayU16)input,output,(int)threshold,down);
+		} else if( input instanceof GrayS16) {
+			return ThresholdImageOps.threshold((GrayS16)input,output,(int)threshold,down);
+		} else if( input instanceof GrayS32) {
+			return ThresholdImageOps.threshold((GrayS32)input,output,(int)threshold,down);
+		} else if( input instanceof GrayF64) {
+			return ThresholdImageOps.threshold((GrayF64)input,output,threshold,down);
 		} else {
 			throw new IllegalArgumentException("Unknown image type: "+input.getClass().getSimpleName());
 		}
