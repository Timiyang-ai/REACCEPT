diff --git a/old_test.java b/new_test.java
index 32a84d3..c47fc72 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,28 +1,29 @@
 @Test
-	public void standard_F32() {
+	public void daubJ_F32_forward() {
 		for( int i = 4; i <= 4; i += 2 ) {
 
-			WaveletCoefficient_F32 desc = FactoryWaveletDaub.standard_F32(i);
+			// test forward coefficients for the expected properties
+			WlCoef_F32 forwardCoef = FactoryWaveletDaub.daubJ_F32(i).forward;
 
-			double sumScaling = UtilWavelet.sumCoefficients(desc.scaling);
-			double sumWavelet = UtilWavelet.sumCoefficients(desc.wavelet);
+			double sumScaling = UtilWavelet.sumCoefficients(forwardCoef.scaling);
+			double sumWavelet = UtilWavelet.sumCoefficients(forwardCoef.wavelet);
 
 			assertEquals(Math.sqrt(2),sumScaling,1e-4);
 			assertEquals(0,sumWavelet,1e-4);
 
-			double energyScaling = UtilWavelet.computeEnergy(desc.scaling);
-			double energyWavelet = UtilWavelet.computeEnergy(desc.wavelet);
+			double energyScaling = UtilWavelet.computeEnergy(forwardCoef.scaling);
+			double energyWavelet = UtilWavelet.computeEnergy(forwardCoef.wavelet);
 
 			assertEquals(1,energyScaling,1e-4);
 			assertEquals(1,energyWavelet,1e-4);
 
 			int polyOrder = i/2-1;
 
-			checkPolySumToZero(desc.wavelet, polyOrder,0);
+			checkPolySumToZero(forwardCoef.wavelet, polyOrder,0);
 
 			for( int offset = 0; offset <= 4; offset += 2 ) {
-				checkBiorthogonal(offset,desc.scaling,desc.offsetScaling,desc.scaling,desc.offsetScaling);
-				checkBiorthogonal(offset,desc.wavelet,desc.offsetWavelet,desc.wavelet,desc.offsetWavelet);
+				checkBiorthogonal(offset,forwardCoef.scaling,forwardCoef.offsetScaling,forwardCoef.scaling,forwardCoef.offsetScaling);
+				checkBiorthogonal(offset,forwardCoef.wavelet,forwardCoef.offsetWavelet,forwardCoef.wavelet,forwardCoef.offsetWavelet);
 			}
 		}
 	}
\ No newline at end of file
