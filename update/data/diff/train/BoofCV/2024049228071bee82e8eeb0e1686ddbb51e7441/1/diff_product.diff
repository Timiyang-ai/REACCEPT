diff --git a/old_product.java b/new_product.java
index 2be734e..a298dfb 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,28 +1,28 @@
-public static WaveletCoefficient_F32 standard_F32( int J ) {
+public static WaveletDescription<WlCoef_F32> daubJ_F32( int J ) {
 		if( J != 4 ) {
 			throw new IllegalArgumentException("Only 4 is currently supported");
 		}
 
-		WaveletCoefficient_F32 ret = new WaveletCoefficient_F32();
+		WlCoef_F32 coef = new WlCoef_F32();
 
-		ret.border = new BorderIndex1D_Wrap();
-		ret.offsetScaling = 0;
-		ret.offsetWavelet = 0;
+		coef.offsetScaling = 0;
+		coef.offsetWavelet = 0;
 
-		ret.scaling = new float[4];
-		ret.wavelet = new float[4];
+		coef.scaling = new float[4];
+		coef.wavelet = new float[4];
 
 		double sqrt3 = Math.sqrt(3);
 		double div = 4.0*Math.sqrt(2);
-		ret.scaling[0] = (float)((1+sqrt3)/div);
-		ret.scaling[1] = (float)((3+sqrt3)/div);
-		ret.scaling[2] = (float)((3-sqrt3)/div);
-		ret.scaling[3] = (float)((1-sqrt3)/div);
+		coef.scaling[0] = (float)((1+sqrt3)/div);
+		coef.scaling[1] = (float)((3+sqrt3)/div);
+		coef.scaling[2] = (float)((3-sqrt3)/div);
+		coef.scaling[3] = (float)((1-sqrt3)/div);
 
-		ret.wavelet[0] = ret.scaling[3];
-		ret.wavelet[1] = -ret.scaling[2];
-		ret.wavelet[2] = ret.scaling[1];
-		ret.wavelet[3] = -ret.scaling[0];
+		coef.wavelet[0] = coef.scaling[3];
+		coef.wavelet[1] = -coef.scaling[2];
+		coef.wavelet[2] = coef.scaling[1];
+		coef.wavelet[3] = -coef.scaling[0];
 
-		return ret;
+		return new WaveletDescription<WlCoef_F32>(new BorderIndex1D_Wrap(),
+		coef,new WlBorderCoefStandard<WlCoef_F32>(coef));
 	}
\ No newline at end of file
