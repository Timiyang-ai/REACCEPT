diff --git a/old_product.java b/new_product.java
index b4843b2..042cdc8 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,30 +1,27 @@
-public void computeDescriptor( int cx , int cy , TupleDesc_F64 desc ) {
+public void computeDescriptor( int cx , int cy , TupleDesc_F64 desc  ) {
 
 		desc.fill(0);
 
 		int widthPixels = widthSubregion*widthGrid;
 		int radius = widthPixels/2;
 
-		ImageFloat32 image = null;
-
 		for (int i = 0; i < widthPixels; i++) {
-			int pixelIndex = (cy-radius+i)*image.stride + (cx-radius);
+			int angleIndex = (cy-radius+i)*savedAngle.width + (cx-radius);
 
 			float subY = i/(float)widthSubregion;
 
-			for (int j = 0; j < widthPixels; j++, pixelIndex++ ) {
+			for (int j = 0; j < widthPixels; j++, angleIndex++ ) {
 				float subX = j/(float)widthSubregion;
 
-				float spacialDX = imageDerivX.getF(pixelIndex);
-				float spacialDY = imageDerivY.getF(pixelIndex);
-
-				double angle = UtilAngle.domain2PI(Math.atan2(spacialDX,spacialDY));
+				double angle = savedAngle.data[angleIndex];
 
 				float weightGaussian = gaussianWeight[i*widthPixels+j];
-				float weightGradient = (float)Math.sqrt(spacialDX*spacialDX + spacialDY*spacialDY);
+				float weightGradient = savedMagnitude.data[angleIndex];
 
 				// trilinear interpolation intro descriptor
 				trilinearInterpolation(weightGaussian*weightGradient,subX,subY,angle,desc);
 			}
 		}
+
+		massageDescriptor(desc);
 	}
\ No newline at end of file
