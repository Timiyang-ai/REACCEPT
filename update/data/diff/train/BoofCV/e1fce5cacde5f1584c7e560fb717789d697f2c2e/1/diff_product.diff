diff --git a/old_product.java b/new_product.java
index 9a3efdc..661f561 100644
--- a/old_product.java
+++ b/new_product.java
@@ -6,6 +6,7 @@ public boolean process( T input , ImageUInt8 binary ) {
 		FastQueue<Polygon2D_F64> found = detectorSquare.getFound();
 
 		List<List<SquareNode>> clusters = s2c.process(found.toList());
+
 		c2g.process(clusters);
 		List<SquareGrid> grids = c2g.getGrids();
 
@@ -16,15 +17,11 @@ public boolean process( T input , ImageUInt8 binary ) {
 		for (int i = 0; i < grids.size(); i++) {
 			SquareGrid g = grids.get(i);
 
-			if( (g.columns == innerCols && g.rows == innerRows) ||
-					(g.columns == innerRows && g.rows == innerCols)) {
-				if( inner != null )
-					return false;
+			if( inner == null && ((g.columns == innerCols && g.rows == innerRows) ||
+					(g.columns == innerRows && g.rows == innerCols))) {
 				inner = g;
-			} else if( (g.columns == outerCols && g.rows == outerRows) ||
-					(g.columns == outerRows && g.rows == outerCols)) {
-				if( outer != null )
-					return false;
+			} else if( outer == null && ((g.columns == outerCols && g.rows == outerRows) ||
+					(g.columns == outerRows && g.rows == outerCols))) {
 				outer = g;
 			}
 		}
@@ -41,23 +38,28 @@ public boolean process( T input , ImageUInt8 binary ) {
 			tools.transpose(outer);
 		}
 
+		// make sure the grids are in counter clockwise order
+		if( tools.checkFlip(inner)) {
+			tools.flipRows(inner);
+		}
+		if( tools.checkFlip(outer)) {
+			tools.flipRows(outer);
+		}
+
 		// find a corner to align the two grids by
 		tools.boundingPolygon(inner, innerPolygon);
-		outerOrigins.clear();
-		listPossibleZeroNodes(outer, outerOrigins);
-		selectSeedZero(outerOrigins,inner, innerPolygon);
-		// now align the grids
+		selectZeroSeed(inner, outer, innerPolygon);
+		// now align the two grids with adjacent zeros
 		forceToZero(seedInner, inner);
 		forceToZero(seedOuter, outer);
 
 		// create one big grid for easier processing
-		createUber(outer, inner, uberGrid);
+		createUber(inner, outer, uberGrid);
 
 		// put it into canonical order
-		putIntoCanonical(uberGrid,inner,outer);
-		tools.orderSquareCorners(inner);
-		tools.orderSquareCorners(outer);
+		putIntoCanonical(uberGrid);
+		orderUberCorners(uberGrid);
 
 		// now extract the calibration points
-		return getCalibrationPoints(uberGrid);
+		return computeCalibrationPoints(uberGrid);
 	}
\ No newline at end of file
