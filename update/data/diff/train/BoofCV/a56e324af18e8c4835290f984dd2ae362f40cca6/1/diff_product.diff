diff --git a/old_product.java b/new_product.java
index 8238796..cb1d9b5 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,33 +1,29 @@
-public static void computeNormalization(List<Point2D_F64> points, DMatrixRMaj N )
+public static void computeNormalization(List<Point2D_F64> points, NormalizationPoint2D normalize )
 	{
-		double meanX1 = 0;
-		double meanY1 = 0;
+		double meanX = 0;
+		double meanY = 0;
 
 		for( Point2D_F64 p : points ) {
-			meanX1 += p.x;
-			meanY1 += p.y;
+			meanX += p.x;
+			meanY += p.y;
 		}
 
-		meanX1 /= points.size();
-		meanY1 /= points.size();
+		meanX /= points.size();
+		meanY /= points.size();
 
-		double stdX1 = 0;
-		double stdY1 = 0;
+		double stdX = 0;
+		double stdY = 0;
 
 		for( Point2D_F64 p : points ) {
-			double dx = p.x - meanX1;
-			double dy = p.y - meanY1;
-			stdX1 += dx*dx;
-			stdY1 += dy*dy;
+			double dx = p.x - meanX;
+			double dy = p.y - meanY;
+			stdX += dx*dx;
+			stdY += dy*dy;
 		}
 
-		stdX1 = Math.sqrt(stdX1/points.size());
-		stdY1 = Math.sqrt(stdY1/points.size());
-		N.zero();
+		normalize.meanX = meanX;
+		normalize.meanY = meanY;
 
-		N.set(0, 0, 1.0 / stdX1);
-		N.set(1, 1, 1.0 / stdY1);
-		N.set(0, 2, -meanX1 / stdX1);
-		N.set(1, 2, -meanY1 / stdY1);
-		N.set(2, 2, 1.0);
+		normalize.stdX = Math.sqrt(stdX/points.size());
+		normalize.stdY = Math.sqrt(stdY/points.size());
 	}
\ No newline at end of file
