diff --git a/old_product.java b/new_product.java
index 1d29f1d..d73704e 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,33 +1,27 @@
-public void process( SiftImageScaleSpace ss ) {
-		// set up data structures
-		foundPoints.reset();
-		this.ss = ss;
-		octavePixelOffset = 0;
+public void process( ImageFloat32 input ) {
 
-		// extract features in each octave
-		for( int octave = 0; octave < ss.actualOctaves; octave++ ) {
-			// start processing at the second DOG since it needs the scales above and below
-			int indexDOG = octave*(ss.numScales-1)+1;
-			int indexScale = octave*ss.numScales+1;
+		scaleSpace.initialize(input);
+		detections.reset();
 
-			currentPixelScale = ss.pixelScale[octave];
+		do {
+			// scale from octave to input image
+			pixelScaleToInput = scaleSpace.pixelScaleCurrentToInput();
 
-			ss.storage.reshape( ss.scale[indexScale].width , ss.scale[indexScale].height );
+			// detect features in the image
+			for (int j = 1; j < scaleSpace.getNumScales()+1; j++) {
 
-			for( int scale = 1; scale < ss.numScales-2; scale++ , indexScale++,indexDOG++ ) {
+				// not really sure how to compute the scale for features found at a particular DoG image
+				// using the average resulted in less visually appealing circles in a test image
+				sigmaLower  = scaleSpace.computeSigmaScale( j - 1);
+				sigmaTarget = scaleSpace.computeSigmaScale( j    );
+				sigmaUpper  = scaleSpace.computeSigmaScale( j + 1);
 
-				// use the scale-space image as input for derivatives
-				derivXX.setImage(ss.scale[indexScale]);
-				derivXY.setImage(ss.scale[indexScale]);
-				derivYY.setImage(ss.scale[indexScale]);
+				// grab the local DoG scale space images
+				dogLower  = scaleSpace.getDifferenceOfGaussian(j-1);
+				dogTarget = scaleSpace.getDifferenceOfGaussian(j  );
+				dogUpper  = scaleSpace.getDifferenceOfGaussian(j+1);
 
-				// the current scale factor being considered
-				currentSigma = ss.computeScaleSigma(octave,scale);
-
-				detectFeatures(indexDOG);
+				detectFeatures(j);
 			}
-
-			// when the images are sub-sampled between octaves the sampling starts at pixel 1 in (x,y)
-			octavePixelOffset += currentPixelScale;
-		}
+		} while( scaleSpace.computeNextOctave() );
 	}
\ No newline at end of file
