diff --git a/old_test.java b/new_test.java
index 5a7c563..ef94428 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,29 +4,29 @@
 
 		SimpleMatrix E = SimpleMatrix.wrap(constructE(x,y,z,w));
 
-		RowMatrix_F64 A = new RowMatrix_F64(10,10);
-		RowMatrix_F64 B = new RowMatrix_F64(10,10);
+		DMatrixRMaj A = new DMatrixRMaj(10,10);
+		DMatrixRMaj B = new DMatrixRMaj(10,10);
 
 		HelperNister5 alg = new HelperNister5();
 		alg.setNullSpace(X,Y,Z,W);
 		alg.setupA1(A);
 		alg.setupA2(B);
 
-		RowMatrix_F64 Y1 = new RowMatrix_F64(10,1);
-		RowMatrix_F64 Y2 = new RowMatrix_F64(10,1);
+		DMatrixRMaj Y1 = new DMatrixRMaj(10,1);
+		DMatrixRMaj Y2 = new DMatrixRMaj(10,1);
 
-		CommonOps_R64.mult(A,createCoefsA(x,y,z),Y1);
-		CommonOps_R64.mult(B,createCoefsB(x, y, z),Y2);
+		CommonOps_DDRM.mult(A,createCoefsA(x,y,z),Y1);
+		CommonOps_DDRM.mult(B,createCoefsB(x, y, z),Y2);
 
-		RowMatrix_F64 Y = new RowMatrix_F64(10,1);
+		DMatrixRMaj Y = new DMatrixRMaj(10,1);
 
-		CommonOps_R64.add(Y1,Y2,Y);
+		CommonOps_DDRM.add(Y1,Y2,Y);
 
 		// compute the constraints equations
 		SimpleMatrix EEt = E.mult(E.transpose());
 		SimpleMatrix EEtE = EEt.mult(E);
 		SimpleMatrix aE = E.scale(-0.5*EEt.trace());
-		RowMatrix_F64 eq2 = EEtE.plus(aE).matrix_F64();
+		DMatrixRMaj eq2 = EEtE.plus(aE).matrix_F64();
 
 		// check the solution
 		assertEquals(E.determinant(),Y.data[0],1e-8);
