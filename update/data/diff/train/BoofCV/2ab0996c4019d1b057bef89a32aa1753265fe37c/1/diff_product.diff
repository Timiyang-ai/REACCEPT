diff --git a/old_product.java b/new_product.java
index 447af78..61b5095 100644
--- a/old_product.java
+++ b/new_product.java
@@ -3,8 +3,11 @@ void scorePath(int x0 , int y0 , int dx , int dy ) {
 		GrayU16 costXD = costYXD.getBand(y0);
 		int idxCost = costXD.getIndex(0,x0);   // C(0,0)
 
-		for (int d = 0; d < lengthD; d++) {
-			workCostLr[d] = costXD.data[idxCost+d]; // Lr(0,d) = C(0,d)
+		{
+			final int localLengthD = Math.min(x0-disparityMin+1,this.lengthD);
+			for (int d = 0; d < localLengthD; d++) {
+				workCostLr[d] = costXD.data[idxCost + d]; // Lr(0,d) = C(0,d)
+			}
 		}
 
 		// Compute the cost of rest of the path recursively
@@ -12,16 +15,17 @@ void scorePath(int x0 , int y0 , int dx , int dy ) {
 		int x = x0 + dx;
 		int y = y0 + dy;
 
-		final int lengthD = this.lengthD;
-
 		for (int i = 1; i < lengthPath; i++, x += dx, y += dy) {
 			// Read results from the previous location along the path
-			int idxLr = (i-1)*lengthD;
+			int idxLrPrev = (i-1)*lengthD;
+
+			// Don't consider disparity values that go outside the right image
+			final int prevLengthD = Math.min(x-1-disparityMin+1,this.lengthD);
 
 			// find the minimum path cost for all D in the previous point in path
 			int minLrPrev = Integer.MAX_VALUE;
-			for (int d = 0; d < lengthD; d++) {
-				int cost = workCostLr[idxLr+d] & 0xFFFF; // Lr(i,d)
+			for (int d = 0; d < prevLengthD; d++) {
+				int cost = workCostLr[idxLrPrev+d] & 0xFFFF; // Lr(i,d)
 				if( cost < minLrPrev )
 					minLrPrev = cost;
 			}
@@ -30,12 +34,14 @@ void scorePath(int x0 , int y0 , int dx , int dy ) {
 			costXD = costYXD.getBand(y);
 			idxCost = costXD.getIndex(0,x);
 
+			final int localLengthD = Math.min(x-disparityMin+1,this.lengthD); // todo make common function
+
 			// Score the inner portion of disparity first to avoid bounds checks
-			computeCostInnerD(costXD, idxCost, idxLr, minLrPrev);
+			computeCostInnerD(costXD, idxCost, idxLrPrev, minLrPrev, localLengthD);
 
 			// Now handle the borders
-			computeCostBorderD(idxCost,idxLr,0,costXD,minLrPrev);
-			computeCostBorderD(idxCost,idxLr,lengthD-1,costXD,minLrPrev);
+			computeCostBorderD(idxCost,idxLrPrev,0,costXD,minLrPrev, localLengthD);
+			computeCostBorderD(idxCost,idxLrPrev,localLengthD-1,costXD,minLrPrev, localLengthD);
 		}
 
 		saveWorkToAggregated(x0,y0,dx,dy,lengthPath);
