diff --git a/old_product.java b/new_product.java
index c987cad..9e3cd4a 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,4 @@
-void scorePath(int x0 , int y0 , int dx , int dy ) {
+void scorePath(int x0 , int y0 , int dx , int dy , short[] workCostLr) {
 		// there is no previous disparity score so simply fill the cost for d=0
 
 		{
@@ -33,11 +33,11 @@ void scorePath(int x0 , int y0 , int dx , int dy ) {
 			int idxLrPrev = (i-1)*lengthD;
 
 			// Score the inner portion of disparity first to avoid bounds checks
-			computeCostInnerD(costXD, idxCost, idxLrPrev, lengthLocalD);
+			computeCostInnerD(costXD, idxCost, idxLrPrev, lengthLocalD, workCostLr);
 
 			// Now handle the borders at d=0 and d=N-1
-			computeCostBorderD(idxCost,idxLrPrev,0,costXD, lengthLocalD);
-			computeCostBorderD(idxCost,idxLrPrev,lengthLocalD-1,costXD, lengthLocalD);
+			computeCostBorderD(idxCost,idxLrPrev,0,costXD, lengthLocalD, workCostLr);
+			computeCostBorderD(idxCost,idxLrPrev,lengthLocalD-1,costXD, lengthLocalD, workCostLr);
 
 			// The modified equation 13. Cost Equation 12 - min[k] Lr(p,k)
 			int minCost = Integer.MAX_VALUE;
@@ -51,5 +51,5 @@ void scorePath(int x0 , int y0 , int dx , int dy ) {
 
 		}
 
-		saveWorkToAggregated(x0,y0,dx,dy,lengthPath);
+		saveWorkToAggregated(x0,y0,dx,dy,lengthPath, workCostLr);
 	}
\ No newline at end of file
