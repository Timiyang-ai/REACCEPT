diff --git a/old_product.java b/new_product.java
index e3889a2..edd904a 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,4 +1,4 @@
-private void computeRawDescriptor(double c_x, double c_y, double sigma, double orientation) {
+void computeRawDescriptor(double c_x, double c_y, double sigma, double orientation) {
 		double c = Math.cos(orientation);
 		double s = Math.sin(orientation);
 
@@ -19,6 +19,8 @@ private void computeRawDescriptor(double c_x, double c_y, double sigma, double o
 				double x = sampleToPixels*(sampleX-sampleRadius);
 
 				// pixel coordinate in the image that is to be sampled.  Note the rounding
+				// If the pixel coordinate is -1 < x < 0 then it will round to 0 instead of -1, but the rounding
+				// method below is WAY faster than Math.round() so this is a small loss.
 				int pixelX = (int)(x*c - y*s + c_x + 0.5);
 				int pixelY = (int)(x*s + y*c + c_y + 0.5);
 
@@ -28,7 +30,10 @@ private void computeRawDescriptor(double c_x, double c_y, double sigma, double o
 					float spacialDX = imageDerivX.unsafe_get(pixelX, pixelY);
 					float spacialDY = imageDerivY.unsafe_get(pixelX, pixelY);
 
-					double angle = UtilAngle.domain2PI(Math.atan2(spacialDY,spacialDX));
+					double adjDX =  c*spacialDX + s*spacialDY;
+					double adjDY = -s*spacialDX + c*spacialDY;
+
+					double angle = UtilAngle.domain2PI(Math.atan2(adjDY,adjDX));
 
 					float weightGaussian = gaussianWeight[sampleY*sampleWidth+sampleX];
 					float weightGradient = (float)Math.sqrt(spacialDX*spacialDX + spacialDY*spacialDY);
