diff --git a/old_test.java b/new_test.java
index a2155f4..381eb78 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,18 +1,13 @@
 @Test
     public void testGetProject() {
         // Create 2 projects, one being prefix of the other.
-        Project foo = new Project();
-        foo.setPath("/foo");
-        foo.setName("Project foo");
-
-        Project bar = new Project();
-        bar.setPath("/foo-bar");
-        bar.setName("Project foo-bar");
+        Project foo = new Project("Project foo", "/foo");
+        Project bar = new Project("Project foo-bar", "/foo-bar");
 
         // Make the runtime environment aware of these two projects.
-        List<Project> projects = new ArrayList<>();
-        projects.add(foo);
-        projects.add(bar);
+        HashMap<String,Project> projects = new HashMap<>();
+        projects.put("foo", foo);
+        projects.put("bar", bar);
         RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         env.setProjects(projects);
 
@@ -23,13 +18,4 @@
         assertEquals(bar, Project.getProject("/foo-bar/ha.c"));
         assertNull(Project.getProject("/foof"));
         assertNull(Project.getProject("/foof/ha.c"));
-
-        // Make sure that the matching is not dependent on list ordering.
-        Collections.reverse(projects);
-        assertEquals(foo, Project.getProject("/foo"));
-        assertEquals(bar, Project.getProject("/foo-bar"));
-        assertEquals(foo, Project.getProject("/foo/blah.c"));
-        assertEquals(bar, Project.getProject("/foo-bar/ha.c"));
-        assertNull(Project.getProject("/foof"));
-        assertNull(Project.getProject("/foof/ha.c"));
     }
\ No newline at end of file
