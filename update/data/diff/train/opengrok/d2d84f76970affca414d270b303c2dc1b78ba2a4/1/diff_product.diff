diff --git a/old_product.java b/new_product.java
index 4d6d3e1..f333484 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,28 +1,18 @@
 public static Project getProject(String path) {
-        String lpath = path;
-
-        Comparator<Project> cmp = new Comparator<Project>() {
-            @Override
-            public int compare(Project p1, Project p2) {
-                return p1.getPath().compareTo(p2.getPath());
-            }
-        };
-
-        if (File.separatorChar != '/') {
-            lpath = path.replace(File.separatorChar, '/');
-        }
-
         // Try to match each project path as prefix of the given path.
-        // This needs to be done from the longest project to the shortest
-        // otherwise we could get project mismatches.
-        RuntimeEnvironment env = RuntimeEnvironment.getInstance();
-        List<Project> sortedProjects = new ArrayList<> (env.getProjects());
-        sortedProjects.sort(cmp);
-        Collections.reverse(sortedProjects);
+        final RuntimeEnvironment env = RuntimeEnvironment.getInstance();
         if (env.hasProjects()) {
-            for (Project proj : sortedProjects) {
-                if (lpath.indexOf(proj.getPath()) == 0) {
-                    return proj;
+            final String lpath = path.replace(File.separatorChar, '/');
+            for (Project p : env.getProjects()) {
+                String pp = p.getPath();
+                // Check if the project's path is a prefix of the given
+                // path. It has to be an exact match, or the project's path
+                // must be immediately followed by a separator. "/foo" is
+                // a prefix for "/foo" and "/foo/bar", but not for "/foof".
+                if (lpath.startsWith(pp) &&
+                        (pp.length() == lpath.length() ||
+                         lpath.charAt(pp.length()) == '/')) {
+                    return p;
                 }
             }
         }
