diff --git a/old_test.java b/new_test.java
index 128d5e9..bb4fd15 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,5 +1,5 @@
 @Test
-    public void testBuildPresentationXDOM()
+    public void testBuildPresentationXDOM() throws Exception
     {
         final DocumentReference reference = new DocumentReference("wiki", "Space", "Page");
         final DocumentModelBridge mockDocumentModelBridge = getMockery().mock(DocumentModelBridge.class);
@@ -7,32 +7,22 @@
         getMockery().checking(new Expectations()
         {
             {
-                try {
-                    oneOf(mockDocumentAccessBridge).getDocument(reference);
-                    will(returnValue(mockDocumentModelBridge));
-                } catch (Exception e) {
-                    Assert.fail(e.getMessage());
-                }
+                oneOf(mockDocumentAccessBridge).getDocument(reference);
+                will(returnValue(mockDocumentModelBridge));
 
                 oneOf(mockDocumentModelBridge).getSyntax();
                 will(returnValue(Syntax.XWIKI_2_0));
 
-                try {
-                    oneOf(mockXHTMLParser).parse(with(aNonNull(StringReader.class)));
-                    will(returnValue(galleryContent));
-                } catch (ParseException e) {
-                    Assert.fail(e.getMessage());
-                }
+                oneOf(mockXHTMLParser).parse(with(aNonNull(StringReader.class)));
+                will(returnValue(galleryContent));
+
+                oneOf(mockDefaultStringEntityReferenceSerializer).serialize(reference);
+                will(returnValue("foo"));
             }
         });
 
-        XDOM xdom = null;
-        try {
-            xdom = presentationBuilder.buildPresentationXDOM("some HTML", reference);
-        } catch (OfficeImporterException e) {
-            Assert.fail(e.getMessage());
-        }
-        Assert.assertNotNull(xdom);
+        XDOM xdom = presentationBuilder.buildPresentationXDOM("some HTML", reference);
+        Assert.assertEquals("foo", xdom.getMetaData().getMetaData(MetaData.BASE));
 
         List<ExpandedMacroBlock> macros =
             xdom.getBlocks(new ClassBlockMatcher(ExpandedMacroBlock.class), Block.Axes.CHILD);
