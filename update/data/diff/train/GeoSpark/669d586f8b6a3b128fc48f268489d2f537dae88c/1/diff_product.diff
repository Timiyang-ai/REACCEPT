diff --git a/old_product.java b/new_product.java
index 726bc32..3429b31 100644
--- a/old_product.java
+++ b/new_product.java
@@ -1,17 +1,33 @@
 @Override
-	public boolean intersects(Geometry g) {
-		// short-circuit test
-		if (! getEnvelopeInternal().covers(g.getEnvelopeInternal()))
-			return false;
-		// optimization for rectangle arguments
-		if (isRectangle()) {
-			// since we have already tested that the test envelope is covered
-			return true;
-		}
-		double x1,x2,y1,y2;
-		x1=g.getEnvelopeInternal().getMinX();
-		x2=g.getEnvelopeInternal().getMaxX();
-		y1=g.getEnvelopeInternal().getMinY();
-		y2=g.getEnvelopeInternal().getMaxY();	
-		return covers(x1,y1)||covers(x1,y2)||covers(x2,y2)||covers(x2,y1);
-	}
\ No newline at end of file
+    public boolean intersects(Geometry other) {
+        // short-circuit test
+        Envelope otherEnvelope = other.getEnvelopeInternal();
+        if (! getEnvelopeInternal().intersects(otherEnvelope)) {
+            return false;
+        }
+
+        if (other instanceof Point) {
+            return covers((Point) other);
+        }
+
+        if (other instanceof LineString) {
+            return intersects((LineString) other);
+        }
+
+        if (other instanceof Polygon) {
+            return intersects((Polygon) other);
+        }
+
+        if (other instanceof GeometryCollection) {
+            GeometryCollection collection = (GeometryCollection) other;
+            for (int i=0; i<collection.getNumGeometries(); i++) {
+                if (intersects(collection.getGeometryN(i))) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        throw new IllegalArgumentException("Circle.intersects() doesn't support geometry type " +
+            other.getGeometryType());
+    }
\ No newline at end of file
