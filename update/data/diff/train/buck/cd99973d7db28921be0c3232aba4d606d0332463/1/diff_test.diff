diff --git a/old_test.java b/new_test.java
index ddcf28d..0f5ee77 100644
--- a/old_test.java
+++ b/new_test.java
@@ -24,7 +24,7 @@
             .setDeps(ImmutableSortedSet.of(c))
             .build());
 
-    BuildRule a = ruleResolver.addToIndex(
+    AndroidResource a = ruleResolver.addToIndex(
         AndroidResourceRuleBuilder.newBuilder()
             .setBuildTarget(BuildTargetFactory.newInstance("//:a"))
             .setRes(Paths.get("res_a"))
@@ -33,7 +33,7 @@
             .build());
 
     AndroidPackageableCollector collector = new AndroidPackageableCollector();
-    collector.addPackageables(ImmutableList.of(((AndroidPackageable) a.getBuildable())));
+    collector.addPackageables(ImmutableList.<AndroidPackageable>of(a));
 
     // Note that a topological sort for a DAG is not guaranteed to be unique, but we order nodes
     // within the same depth of the search.
@@ -56,18 +56,13 @@
         .build(ruleResolver);
 
     ImmutableSortedSet<BuildRule> declaredDeps = ImmutableSortedSet.of(a, c);
-    BuildRule e = AndroidBinaryBuilder.newBuilder()
-        .setBuildTarget(BuildTargetFactory.newInstance("//:e"))
+    AndroidBinary androidBinary = (AndroidBinary) AndroidBinaryBuilder
+        .createBuilder(BuildTargetFactory.newInstance("//:e"))
         .setManifest(new TestSourcePath("AndroidManfiest.xml"))
         .setTarget("Google Inc.:Google APIs:16")
-        .setKeystore((Keystore) keystore.getBuildable())
+        .setKeystore((Keystore) keystore)
         .setOriginalDeps(declaredDeps)
         .build(ruleResolver);
-    AndroidBinary androidBinary = ((AndroidBinary) e.getBuildable());
-    androidBinary.getEnhancedDeps(
-        ruleResolver,
-        declaredDeps,
-        ImmutableSortedSet.of(keystore));
 
     assertEquals(
         String.format("Android resources should be topologically sorted."),
