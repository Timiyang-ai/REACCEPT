diff --git a/old_test.java b/new_test.java
index f169f59..3f396b7 100644
--- a/old_test.java
+++ b/new_test.java
@@ -1,51 +1,51 @@
 @Test
-    public void testHexDigitM0ToBools() {
+    public void testHexDigitMsb0ToBoolArray() {
         assertBoolArrayEquals(
-            new boolean[]{false, false, false, false}, Conversion.hexDigitM0ToBools('0'));
+            new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('0'));
         assertBoolArrayEquals(
-            new boolean[]{false, false, false, true}, Conversion.hexDigitM0ToBools('1'));
+            new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('1'));
         assertBoolArrayEquals(
-            new boolean[]{false, false, true, false}, Conversion.hexDigitM0ToBools('2'));
+            new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('2'));
         assertBoolArrayEquals(
-            new boolean[]{false, false, true, true}, Conversion.hexDigitM0ToBools('3'));
+            new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('3'));
         assertBoolArrayEquals(
-            new boolean[]{false, true, false, false}, Conversion.hexDigitM0ToBools('4'));
+            new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('4'));
         assertBoolArrayEquals(
-            new boolean[]{false, true, false, true}, Conversion.hexDigitM0ToBools('5'));
+            new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('5'));
         assertBoolArrayEquals(
-            new boolean[]{false, true, true, false}, Conversion.hexDigitM0ToBools('6'));
+            new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('6'));
         assertBoolArrayEquals(
-            new boolean[]{false, true, true, true}, Conversion.hexDigitM0ToBools('7'));
+            new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('7'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, false, false}, Conversion.hexDigitM0ToBools('8'));
+            new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('8'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, false, true}, Conversion.hexDigitM0ToBools('9'));
+            new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('9'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('A'));
+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('A'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('a'));
+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('a'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('B'));
+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('B'));
         assertBoolArrayEquals(
-            new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('b'));
+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('b'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('C'));
+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('C'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('c'));
+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('c'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('D'));
+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('D'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('d'));
+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('d'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('E'));
+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('E'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('e'));
+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('e'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('F'));
+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('F'));
         assertBoolArrayEquals(
-            new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('f'));
+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('f'));
         try {
-            Conversion.hexDigitM0ToBools('G');
+            Conversion.hexDigitMsb0ToBoolArray('G');
             fail("Thrown " + IllegalArgumentException.class.getName() + " expected");
         } catch (final IllegalArgumentException e) {
             // OK
