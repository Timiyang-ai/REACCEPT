diff --git a/old_test.java b/new_test.java
index a6a3bbe..d0c5b77 100644
--- a/old_test.java
+++ b/new_test.java
@@ -4,17 +4,17 @@
         final Object dflt = BAR;
         assertSame(dflt, ObjectUtils.defaultIfNull(null, dflt), "dflt was not returned when o was null");
         assertSame(o, ObjectUtils.defaultIfNull(o, dflt), "dflt was returned when o was not null");
-        assertSame(dflt, ObjectUtils.defaultIfNull(null, () -> dflt), "dflt was not returned when o was null");
-        assertSame(o, ObjectUtils.defaultIfNull(o, () -> dflt), "dflt was returned when o was not null");
-        assertSame(o, ObjectUtils.defaultIfNull(FOO, () -> dflt), "dflt was returned when o was not null");
-        assertSame(o, ObjectUtils.defaultIfNull("foo", () -> dflt), "dflt was returned when o was not null");
+        assertSame(dflt, ObjectUtils.getIfNull(null, () -> dflt), "dflt was not returned when o was null");
+        assertSame(o, ObjectUtils.getIfNull(o, () -> dflt), "dflt was returned when o was not null");
+        assertSame(o, ObjectUtils.getIfNull(FOO, () -> dflt), "dflt was returned when o was not null");
+        assertSame(o, ObjectUtils.getIfNull("foo", () -> dflt), "dflt was returned when o was not null");
         MutableInt callsCounter = new MutableInt(0);
         Supplier<Object> countingDefaultSupplier = () -> {
             callsCounter.increment();
             return dflt;
         };
-        ObjectUtils.defaultIfNull(o, countingDefaultSupplier);
+        ObjectUtils.getIfNull(o, countingDefaultSupplier);
         assertEquals(0, callsCounter.getValue());
-        ObjectUtils.defaultIfNull(null, countingDefaultSupplier);
+        ObjectUtils.getIfNull(null, countingDefaultSupplier);
         assertEquals(1, callsCounter.getValue());
     }
\ No newline at end of file
