[
    {
        "focal_src": "void messageForConsole(String msg, Boolean verbose); ",
        "focal_tgt": "void messageForConsole(MessageType type, String msg); ",
        "test_src": "@Test public void testMessageForConsole() { System.out.println(\"messageForConsole\"); String msg = \"\"; Boolean verbose = null; GUIBackend instance = new GUIBackend(); instance.messageForConsole(msg, verbose); fail(\"The test case is a prototype.\"); } ",
        "test_tgt": "@Test public void testMessageForConsole() { System.out.println(\"messageForConsole\"); String msg = \"\"; Boolean verbose = null; GUIBackend instance = new GUIBackend(); fail(\"The test case is a prototype.\"); } ",
        "label": 1,
        "focal_db": [
            3858390,
            "winder/Universal-G-Code-Sender",
            "/data/comment_repos/winder@Universal-G-Code-Sender",
            "450791279d0fd5d18e6e45d83a9bd8119f4bab8f",
            "f8875ccf647795fbfd0309b10c7baae2fb720a5f",
            "ugs-core/src/com/willwinder/universalgcodesender/listeners/ControllerListener.java",
            "aeefd74192c3005c4e0182082e8ca5e808307240",
            "ugs-core/src/com/willwinder/universalgcodesender/listeners/ControllerListener.java",
            "void messageForConsole(String msg, Boolean verbose);",
            "/**\n * A console message from the controller.\n */\n",
            "void messageForConsole(MessageType type, String msg);",
            "/**\n * A console message from the controller.\n */\n"
        ],
        "test_db": [
            3858399,
            "winder/Universal-G-Code-Sender",
            "/data/comment_repos/winder@Universal-G-Code-Sender",
            "450791279d0fd5d18e6e45d83a9bd8119f4bab8f",
            "1336a118bd51a465c6f28f47778fd86dc5970470",
            "ugs-core/test/com/willwinder/universalgcodesender/model/GUIBackendTest.java",
            "2757d56e689e302949af329294e4520923fe64b4",
            "ugs-core/test/com/willwinder/universalgcodesender/model/GUIBackendTest.java",
            "@Test\n    public void testMessageForConsole() {\n        System.out.println(\"messageForConsole\");\n        String msg = \"\";\n        Boolean verbose = null;\n        GUIBackend instance = new GUIBackend();\n        instance.messageForConsole(msg, verbose);\n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }",
            "/**\n * Test of messageForConsole method, of class GUIBackend.\n */\n",
            "@Test\n    public void testMessageForConsole() {\n        System.out.println(\"messageForConsole\");\n        String msg = \"\";\n        Boolean verbose = null;\n        GUIBackend instance = new GUIBackend();\n        //instance.messageForConsole(msg, verbose);\n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }",
            "/**\n * Test of messageForConsole method, of class GUIBackend.\n */\n"
        ],
        "edit_seq": [
            [
                "void",
                "void",
                "equal"
            ],
            [
                "message",
                "message",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "For",
                "For",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Console",
                "Console",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "",
                "Message",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Type",
                "insert"
            ],
            [
                "",
                "type",
                "insert"
            ],
            [
                "",
                ",",
                "insert"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "msg",
                "msg",
                "equal"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "Boolean",
                "",
                "delete"
            ],
            [
                "verbose",
                "",
                "delete"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "private Item drop(final QueryContext ctx)throws QueryException { ctx.updates.add(new DBDrop(checkData(ctx), info, ctx), ctx); return null; } ",
        "focal_tgt": "private Item drop(final QueryContext ctx)throws QueryException { checkCreate(ctx); final String name = string(checkStr(expr[0], ctx)); if( ! Databases.validName(name))throw BXDB_NAME.get(info, name); if( ! ctx.context.globalopts.dbexists(name))throw BXDB_WHICH.get(info, name); ctx.updates.add(new DBDrop(name, info, ctx), ctx); return null; } ",
        "test_src": "@Test public void drop() { final String dbname = NAME + \"DBCreate\"; query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\")); query(_DB_DROP.args(dbname)); query(_DB_EXISTS.args(dbname), \"false\"); error(_DB_DROP.args(dbname), Err.BXDB_OPEN); } ",
        "test_tgt": "@Test public void drop() { final String dbname = NAME + \"DBCreate\"; query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\")); query(_DB_DROP.args(dbname)); query(_DB_EXISTS.args(dbname), \"false\"); error(_DB_DROP.args(dbname), Err.BXDB_WHICH); } ",
        "label": 1,
        "focal_db": [
            4634716,
            "BaseXdb/basex",
            "/data/local_comment_repos/BaseXdb@basex",
            "f5f62ee7300020f0ff060191ba18ea62ff6fc059",
            "d7d83f0678337cde736cfc861b27282918cd1990",
            "basex-core/src/main/java/org/basex/query/func/FNDb.java",
            "34117b730b4b8b30b43704cb23ebad378bc0179b",
            "basex-core/src/main/java/org/basex/query/func/FNDb.java",
            "private Item drop(final QueryContext ctx) throws QueryException {\n    ctx.updates.add(new DBDrop(checkData(ctx), info, ctx), ctx);\n    return null;\n  }",
            "/**\n * Performs the drop function.\n * @param ctx query context\n * @return {@code null}\n * @throws QueryException query exception\n */\n",
            "private Item drop(final QueryContext ctx) throws QueryException {\n    checkCreate(ctx);\n\n    final String name = string(checkStr(expr[0], ctx));\n    if(!Databases.validName(name)) throw BXDB_NAME.get(info, name);\n    if(!ctx.context.globalopts.dbexists(name)) throw BXDB_WHICH.get(info, name);\n    ctx.updates.add(new DBDrop(name, info, ctx), ctx);\n    return null;\n  }",
            "/**\n * Performs the drop function.\n * @param ctx query context\n * @return {@code null}\n * @throws QueryException query exception\n */\n"
        ],
        "test_db": [
            4634742,
            "BaseXdb/basex",
            "/data/local_comment_repos/BaseXdb@basex",
            "f5f62ee7300020f0ff060191ba18ea62ff6fc059",
            "88db2df68cda38d54f0ab18a20ff2329d088f495",
            "basex-core/src/test/java/org/basex/query/func/FNDbTest.java",
            "b0be5a692796bd9ccd87833f862621b9c08d0c5c",
            "basex-core/src/test/java/org/basex/query/func/FNDbTest.java",
            "@Test\n  public void drop() {\n    // non-existing DB name\n    final String dbname = NAME + \"DBCreate\";\n\n    // drop existing DB\n    query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\"));\n    query(_DB_DROP.args(dbname));\n    query(_DB_EXISTS.args(dbname), \"false\");\n\n    // try to drop non-existing DB\n    error(_DB_DROP.args(dbname), Err.BXDB_OPEN);\n  }",
            "/**\n * Test method.\n */\n",
            "@Test\n  public void drop() {\n    // non-existing DB name\n    final String dbname = NAME + \"DBCreate\";\n\n    // drop existing DB\n    query(_DB_CREATE.args(dbname, \"<dummy/>\", \"doc.xml\"));\n    query(_DB_DROP.args(dbname));\n    query(_DB_EXISTS.args(dbname), \"false\");\n\n    // try to drop non-existing DB\n    error(_DB_DROP.args(dbname), Err.BXDB_WHICH);\n  }",
            "/**\n * Test method.\n */\n"
        ],
        "edit_seq": [
            [
                "private",
                "private",
                "equal"
            ],
            [
                "Item",
                "Item",
                "equal"
            ],
            [
                "drop",
                "drop",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "final",
                "final",
                "equal"
            ],
            [
                "Query",
                "Query",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Context",
                "Context",
                "equal"
            ],
            [
                "ctx",
                "ctx",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "Query",
                "Query",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "",
                "check",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Create",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "ctx",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "final",
                "insert"
            ],
            [
                "",
                "String",
                "insert"
            ],
            [
                "",
                "name",
                "insert"
            ],
            [
                "",
                "=",
                "insert"
            ],
            [
                "",
                "string",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "check",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Str",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "expr",
                "insert"
            ],
            [
                "",
                "[",
                "insert"
            ],
            [
                "",
                "0",
                "insert"
            ],
            [
                "",
                "]",
                "insert"
            ],
            [
                "",
                ",",
                "insert"
            ],
            [
                "",
                "ctx",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "if",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "!",
                "insert"
            ],
            [
                "",
                "Databases",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "valid",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Name",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "name",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "throw",
                "insert"
            ],
            [
                "",
                "BXDB",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "_",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "NAME",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "get",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "info",
                "insert"
            ],
            [
                "",
                ",",
                "insert"
            ],
            [
                "",
                "name",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "if",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "!",
                "insert"
            ],
            [
                "",
                "ctx",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "context",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "globalopts",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "dbexists",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "name",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "throw",
                "insert"
            ],
            [
                "",
                "BXDB",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "_",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "WHICH",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "get",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "info",
                "insert"
            ],
            [
                "",
                ",",
                "insert"
            ],
            [
                "",
                "name",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "ctx",
                "ctx",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "updates",
                "updates",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "add",
                "add",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "DB",
                "DB",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Drop",
                "Drop",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "check",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Data",
                "name",
                "replace"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "ctx",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "info",
                "info",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "ctx",
                "ctx",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "ctx",
                "ctx",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "public static void fetchFile(URL url, File outputPath)throws DownloadFailedException { HttpURLConnection conn = null; try { conn = Downloader.getConnection(url); conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\"); conn.connect(); } catch(IOException ex) { try { if(conn != null) { conn.disconnect(); } } finally { conn = null; } throw new DownloadFailedException(\"Error downloading file.\", ex); } final String encoding = conn.getContentEncoding(); BufferedOutputStream writer = null; InputStream reader = null; try { if(encoding != null && \"gzip\".equalsIgnoreCase(encoding)) { reader = new GZIPInputStream(conn.getInputStream()); } else if(encoding != null && \"deflate\".equalsIgnoreCase(encoding)) { reader = new InflaterInputStream(conn.getInputStream()); } else { reader = conn.getInputStream(); } writer = new BufferedOutputStream(new FileOutputStream(outputPath)); final byte[]buffer = new byte[4096]; int bytesRead; while((bytesRead = reader.read(buffer)) > 0) { writer.write(buffer, 0, bytesRead); } } catch(Exception ex) { throw new DownloadFailedException(\"Error saving downloaded file.\", ex); } finally { if(writer != null) { try { writer.close(); } catch(Exception ex) { Logger.getLogger(Downloader.class.getName()).log(Level.FINEST, \"Error closing the writer in Downloader.\", ex); } } if(reader != null) { try { reader.close(); } catch(Exception ex) { Logger.getLogger(Downloader.class.getName()).log(Level.FINEST, \"Error closing the reader in Downloader.\", ex); } } try { conn.disconnect(); } finally { conn = null; } } } ",
        "focal_tgt": "public static void fetchFile(URL url, File outputPath)throws DownloadFailedException { fetchFile(url, outputPath, false); } ",
        "test_src": "@Test public void testFetchFile()throws Exception { URL url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL)); File outputPath = new File(\"target/downloaded_cve.xml\"); Downloader.fetchFile(url, outputPath); } ",
        "test_tgt": "@Test public void testFetchFile()throws Exception { URL url = new URL(Settings.getString(Settings.KEYS.CPE_URL)); String outputPath = \"target/downloaded_cpe.xml\"; Downloader.fetchFile(url, outputPath, true); url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL)); outputPath = \"target/downloaded_cve.xml\"; Downloader.fetchFile(url, outputPath, false); } ",
        "label": 1,
        "focal_db": [
            2440898,
            "jeremylong/DependencyCheck",
            "/data/comment_repos/jeremylong@DependencyCheck",
            "3f4c1e7029b6da4096634b3e4e20268290904b06",
            "c7816b124cd189acc39578a92fae9e9d716dc727",
            "dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Downloader.java",
            "3680b79416908a2d711c31d2ec3274413fd410a5",
            "dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Downloader.java",
            "public static void fetchFile(URL url, File outputPath) throws DownloadFailedException {\n        HttpURLConnection conn = null;\n        try {\n            conn = Downloader.getConnection(url);\n            conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n            conn.connect();\n        } catch (IOException ex) {\n            try {\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } finally {\n                conn = null;\n            }\n            throw new DownloadFailedException(\"Error downloading file.\", ex);\n        }\n        final String encoding = conn.getContentEncoding();\n\n        BufferedOutputStream writer = null;\n        InputStream reader = null;\n        try {\n            if (encoding != null && \"gzip\".equalsIgnoreCase(encoding)) {\n                reader = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && \"deflate\".equalsIgnoreCase(encoding)) {\n                reader = new InflaterInputStream(conn.getInputStream());\n            } else {\n                reader = conn.getInputStream();\n            }\n\n            writer = new BufferedOutputStream(new FileOutputStream(outputPath));\n            final byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = reader.read(buffer)) > 0) {\n                writer.write(buffer, 0, bytesRead);\n            }\n        } catch (Exception ex) {\n            throw new DownloadFailedException(\"Error saving downloaded file.\", ex);\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (Exception ex) {\n                    Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,\n                            \"Error closing the writer in Downloader.\", ex);\n                }\n            }\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (Exception ex) {\n                    Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,\n                            \"Error closing the reader in Downloader.\", ex);\n                }\n            }\n            try {\n                conn.disconnect();\n            } finally {\n                conn = null;\n            }\n        }\n    }",
            "/**\n * Retrieves a file from a given URL and saves it to the outputPath.\n *\n * @param url the URL of the file to download.\n * @param outputPath the path to the save the file to.\n * @throws DownloadFailedException is thrown if there is an error downloading the file.\n */\n",
            "public static void fetchFile(URL url, File outputPath) throws DownloadFailedException {\n        HttpURLConnection conn = null;\n        try {\n            conn = URLConnectionFactory.createHttpURLConnection(url);\n            conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n            conn.connect();\n        } catch (IOException ex) {\n            try {\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } finally {\n                conn = null;\n            }\n            throw new DownloadFailedException(\"Error downloading file.\", ex);\n        }\n        final String encoding = conn.getContentEncoding();\n\n        BufferedOutputStream writer = null;\n        InputStream reader = null;\n        try {\n            if (encoding != null && \"gzip\".equalsIgnoreCase(encoding)) {\n                reader = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && \"deflate\".equalsIgnoreCase(encoding)) {\n                reader = new InflaterInputStream(conn.getInputStream());\n            } else {\n                reader = conn.getInputStream();\n            }\n\n            writer = new BufferedOutputStream(new FileOutputStream(outputPath));\n            final byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = reader.read(buffer)) > 0) {\n                writer.write(buffer, 0, bytesRead);\n            }\n        } catch (Exception ex) {\n            throw new DownloadFailedException(\"Error saving downloaded file.\", ex);\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (Exception ex) {\n                    Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,\n                            \"Error closing the writer in Downloader.\", ex);\n                }\n            }\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (Exception ex) {\n                    Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,\n                            \"Error closing the reader in Downloader.\", ex);\n                }\n            }\n            try {\n                conn.disconnect();\n            } finally {\n                conn = null;\n            }\n        }\n    }",
            "/**\n * Retrieves a file from a given URL and saves it to the outputPath.\n *\n * @param url the URL of the file to download.\n * @param outputPath the path to the save the file to.\n * @throws DownloadFailedException is thrown if there is an error downloading the file.\n */\n"
        ],
        "test_db": [
            2441880,
            "jeremylong/DependencyCheck",
            "/data/comment_repos/jeremylong@DependencyCheck",
            "72e15c94c5a5016ac1c1d135be626260d29f22e0",
            "55bd4abe5bf7c712232666a6f63bd9fee7ba9389",
            "dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DownloaderIntegrationTest.java",
            "7677ef523d81616c3325b2146f667b2294350ddb",
            "dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DownloaderIntegrationTest.java",
            "@Test\n    public void testFetchFile() throws Exception {\n\n//        Settings.setString(Settings.KEYS.CONNECTION_TIMEOUT, \"1000\");\n\n//        Settings.setString(Settings.KEYS.PROXY_PORT, \"8080\");\n//        Settings.setString(Settings.KEYS.PROXY_URL, \"127.0.0.1\");\n\n\n//        Removed as the actual CPE is no longer used.\n//        URL url = new URL(Settings.getString(Settings.KEYS.CPE_URL));\n//        String outputPath = \"target/downloaded_cpe.xml\";\n//        Downloader.fetchFile(url, outputPath, true);\n\n        URL url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL));\n        File outputPath = new File(\"target/downloaded_cve.xml\");\n        Downloader.fetchFile(url, outputPath);\n\n    }",
            "/**\n * Test of fetchFile method, of class Downloader.\n *\n * @throws Exception thrown when an exception occurs.\n */\n",
            "@Test\n    public void testFetchFile() throws Exception {\n\n//        Settings.setString(Settings.KEYS.CONNECTION_TIMEOUT, \"1000\");\n\n//        Settings.setString(Settings.KEYS.PROXY_PORT, \"8080\");\n//        Settings.setString(Settings.KEYS.PROXY_URL, \"127.0.0.1\");\n\n        URL url = new URL(Settings.getString(Settings.KEYS.CPE_URL));\n        String outputPath = \"target/downloaded_cpe.xml\";\n        Downloader.fetchFile(url, outputPath, true);\n\n        url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL));\n        outputPath = \"target/downloaded_cve.xml\";\n        Downloader.fetchFile(url, outputPath, false);\n\n    }",
            "/**\n * Test of fetchFile method, of class Downloader.\n *\n * @throws Exception thrown when an exception occurs.\n */\n"
        ],
        "edit_seq": [
            [
                "public",
                "public",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "void",
                "void",
                "equal"
            ],
            [
                "fetch",
                "fetch",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "URL",
                "URL",
                "equal"
            ],
            [
                "url",
                "url",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "output",
                "output",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "Download",
                "Download",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Failed",
                "Failed",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "Http",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "URL",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Connection",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "Downloader",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "fetch",
                "replace"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Connection",
                "File",
                "replace"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "url",
                "url",
                "equal"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "set",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Request",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Property",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Accept",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "-",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Encoding",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "gzip",
                "output",
                "replace"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                ",",
                "Path",
                "replace"
            ],
            [
                "deflate",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ")",
                ",",
                "replace"
            ],
            [
                ";",
                "false",
                "replace"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "connect",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "catch",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "IO",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "if",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                "!=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "disconnect",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "finally",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "throw",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "Download",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Failed",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Error",
                "",
                "delete"
            ],
            [
                "downloading",
                "",
                "delete"
            ],
            [
                "file",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "final",
                "",
                "delete"
            ],
            [
                "String",
                "",
                "delete"
            ],
            [
                "encoding",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Content",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Encoding",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "Buffered",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Output",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "if",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "encoding",
                "",
                "delete"
            ],
            [
                "!=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                "&&",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "gzip",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "equals",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Ignore",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Case",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "encoding",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "GZIP",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "else",
                "",
                "delete"
            ],
            [
                "if",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "encoding",
                "",
                "delete"
            ],
            [
                "!=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                "&&",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "deflate",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "equals",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Ignore",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Case",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "encoding",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "Inflater",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "else",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Input",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "Buffered",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Output",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "File",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Output",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Stream",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "output",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Path",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "final",
                "",
                "delete"
            ],
            [
                "byte",
                "",
                "delete"
            ],
            [
                "[",
                "",
                "delete"
            ],
            [
                "]",
                "",
                "delete"
            ],
            [
                "buffer",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "byte",
                "",
                "delete"
            ],
            [
                "[",
                "",
                "delete"
            ],
            [
                "4096",
                "",
                "delete"
            ],
            [
                "]",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "int",
                "",
                "delete"
            ],
            [
                "bytes",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Read",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "while",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "bytes",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Read",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "read",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "buffer",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ">",
                "",
                "delete"
            ],
            [
                "0",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "write",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "buffer",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "0",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "bytes",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Read",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "catch",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "throw",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "Download",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Failed",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Error",
                "",
                "delete"
            ],
            [
                "saving",
                "",
                "delete"
            ],
            [
                "downloaded",
                "",
                "delete"
            ],
            [
                "file",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "finally",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "if",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                "!=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "close",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "catch",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "Logger",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Logger",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Downloader",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "class",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Name",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "log",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Level",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "FINEST",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Error",
                "",
                "delete"
            ],
            [
                "closing",
                "",
                "delete"
            ],
            [
                "the",
                "",
                "delete"
            ],
            [
                "writer",
                "",
                "delete"
            ],
            [
                "in",
                "",
                "delete"
            ],
            [
                "Downloader",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "if",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "!=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "close",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "catch",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "Logger",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Logger",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Downloader",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "class",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Name",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "log",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "Level",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "FINEST",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Error",
                "",
                "delete"
            ],
            [
                "closing",
                "",
                "delete"
            ],
            [
                "the",
                "",
                "delete"
            ],
            [
                "reader",
                "",
                "delete"
            ],
            [
                "in",
                "",
                "delete"
            ],
            [
                "Downloader",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "try",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "disconnect",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "finally",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "conn",
                "",
                "delete"
            ],
            [
                "=",
                "",
                "delete"
            ],
            [
                "null",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ]
        ]
    },
    {
        "focal_src": "public static Model readPom(File file)throws AnalysisException { try { final PomParser parser = new PomParser(); final Model model = parser.parse(file); if(model == null) { throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath())); } return model; } catch(PomParseException ex) { LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(IOException ex) { LOGGER.warn(\"Unable to parse pom '{}'(IO Exception)\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(Throwable ex) { LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } } ",
        "focal_tgt": "public static Model readPom(File file)throws AnalysisException { try { final PomParser parser = new PomParser(); final Model model = parser.parse(file); if(model == null) { throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath())); } return model; } catch(AnalysisException ex) { throw ex; } catch(PomParseException ex) { LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } catch(Throwable ex) { LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath()); LOGGER.debug(\"\", ex); throw new AnalysisException(ex); } } ",
        "test_src": "@Test public void testReadPom_File()throws Exception { File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\"); String expResult = \"Direct Web Remoting\"; Model result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\"); expResult = \"Main\"; result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); } ",
        "test_tgt": "@Test public void testReadPom_File()throws Exception { File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\"); String expResult = \"Direct Web Remoting\"; Model result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); expResult = \"get ahead\"; assertEquals(expResult, result.getOrganization()); expResult = \"http://getahead.ltd.uk/dwr\"; assertEquals(expResult, result.getOrganizationUrl()); file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\"); expResult = \"Main\"; result = PomUtils.readPom(file); assertEquals(expResult, result.getName()); } ",
        "label": 1,
        "focal_db": [
            2437873,
            "jeremylong/DependencyCheck",
            "/data/comment_repos/jeremylong@DependencyCheck",
            "2ea0eb3c640c866f771f655de0097449f7935abf",
            "6f3aa49879f64ce4d4208b102efe4a70c3074b67",
            "dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomUtils.java",
            "4a6d2e8fcfde23520d11c989fdf5fd99b507a53e",
            "dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomUtils.java",
            "public static Model readPom(File file) throws AnalysisException {\n        try {\n            final PomParser parser = new PomParser();\n            final Model model = parser.parse(file);\n            if (model == null) {\n                throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath()));\n            }\n            return model;\n        } catch (PomParseException ex) {\n            LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath());\n            LOGGER.debug(\"\", ex);\n            throw new AnalysisException(ex);\n        } catch (IOException ex) {\n            LOGGER.warn(\"Unable to parse pom '{}'(IO Exception)\", file.getPath());\n            LOGGER.debug(\"\", ex);\n            throw new AnalysisException(ex);\n        } catch (Throwable ex) {\n            LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath());\n            LOGGER.debug(\"\", ex);\n            throw new AnalysisException(ex);\n        }\n    }",
            "/**\n * Reads in the specified POM and converts it to a Model.\n *\n * @param file the pom.xml file\n * @return returns a\n * @throws AnalysisException is thrown if there is an exception extracting\n * or parsing the POM {@link Model} object\n */\n",
            "public static Model readPom(File file) throws AnalysisException {\n        try {\n            final PomParser parser = new PomParser();\n            final Model model = parser.parse(file);\n            if (model == null) {\n                throw new AnalysisException(String.format(\"Unable to parse pom '%s'\", file.getPath()));\n            }\n            return model;\n        } catch (AnalysisException ex) {\n            throw ex;\n        } catch (PomParseException ex) {\n            LOGGER.warn(\"Unable to parse pom '{}'\", file.getPath());\n            LOGGER.debug(\"\", ex);\n            throw new AnalysisException(ex);\n        } catch (Throwable ex) {\n            LOGGER.warn(\"Unexpected error during parsing of the pom '{}'\", file.getPath());\n            LOGGER.debug(\"\", ex);\n            throw new AnalysisException(ex);\n        }\n    }",
            "/**\n * Reads in the specified POM and converts it to a Model.\n *\n * @param file the pom.xml file\n * @return returns an object representation of the POM\n * @throws AnalysisException is thrown if there is an exception extracting\n * or parsing the POM {@link Model} object\n */\n"
        ],
        "test_db": [
            2437875,
            "jeremylong/DependencyCheck",
            "/data/comment_repos/jeremylong@DependencyCheck",
            "2ea0eb3c640c866f771f655de0097449f7935abf",
            "f16c057241434373c5c022d1b84774ff6061c2a8",
            "dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java",
            "3b5c285bffa320ff78684ba415b98222cff45ea1",
            "dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java",
            "@Test\n    public void testReadPom_File() throws Exception {\n        File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\");\n        String expResult = \"Direct Web Remoting\";\n        Model result = PomUtils.readPom(file);\n        assertEquals(expResult, result.getName());\n        \n        file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\");\n        expResult = \"Main\";\n        result = PomUtils.readPom(file);\n        assertEquals(expResult, result.getName());\n    }",
            "/**\n * Test of readPom method, of class PomUtils.\n */\n",
            "@Test\n    public void testReadPom_File() throws Exception {\n        File file = BaseTest.getResourceAsFile(this, \"dwr-pom.xml\");\n        String expResult = \"Direct Web Remoting\";\n        Model result = PomUtils.readPom(file);\n        assertEquals(expResult, result.getName());\n\n        expResult = \"get ahead\";\n        assertEquals(expResult, result.getOrganization());\n        expResult = \"http://getahead.ltd.uk/dwr\";\n        assertEquals(expResult, result.getOrganizationUrl());\n\n        file = BaseTest.getResourceAsFile(this, \"jmockit-1.26.pom\");\n        expResult = \"Main\";\n        result = PomUtils.readPom(file);\n        assertEquals(expResult, result.getName());\n    }",
            "/**\n * Test of readPom method, of class PomUtils.\n *\n * @throws java.lang.Exception thrown when the test fails due to an\n * exception\n */\n"
        ],
        "edit_seq": [
            [
                "public",
                "public",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "Model",
                "Model",
                "equal"
            ],
            [
                "read",
                "read",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Pom",
                "Pom",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "Analysis",
                "Analysis",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "try",
                "try",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "final",
                "final",
                "equal"
            ],
            [
                "Pom",
                "Pom",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Parser",
                "Parser",
                "equal"
            ],
            [
                "parser",
                "parser",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "Pom",
                "Pom",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Parser",
                "Parser",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "final",
                "final",
                "equal"
            ],
            [
                "Model",
                "Model",
                "equal"
            ],
            [
                "model",
                "model",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "parser",
                "parser",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "parse",
                "parse",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "if",
                "if",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "model",
                "model",
                "equal"
            ],
            [
                "==",
                "==",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "throw",
                "throw",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "Analysis",
                "Analysis",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "format",
                "format",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "Unable",
                "Unable",
                "equal"
            ],
            [
                "to",
                "to",
                "equal"
            ],
            [
                "parse",
                "parse",
                "equal"
            ],
            [
                "pom",
                "pom",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "%",
                "%",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "s",
                "s",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "model",
                "model",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "catch",
                "catch",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "",
                "Analysis",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Exception",
                "insert"
            ],
            [
                "",
                "ex",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "{",
                "insert"
            ],
            [
                "",
                "throw",
                "insert"
            ],
            [
                "",
                "ex",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "}",
                "insert"
            ],
            [
                "",
                "catch",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "Pom",
                "Pom",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Parse",
                "Parse",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "LOGGER",
                "LOGGER",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "warn",
                "warn",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "Unable",
                "Unable",
                "equal"
            ],
            [
                "to",
                "to",
                "equal"
            ],
            [
                "parse",
                "parse",
                "equal"
            ],
            [
                "pom",
                "pom",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "file",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "get",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Path",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "LOGGER",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "debug",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "throw",
                "",
                "delete"
            ],
            [
                "new",
                "",
                "delete"
            ],
            [
                "Analysis",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "catch",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "IO",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "ex",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "LOGGER",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "warn",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                "Unable",
                "",
                "delete"
            ],
            [
                "to",
                "",
                "delete"
            ],
            [
                "parse",
                "",
                "delete"
            ],
            [
                "pom",
                "",
                "delete"
            ],
            [
                "'",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "{",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "}",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "'",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "IO",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                "\"",
                "",
                "delete"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "LOGGER",
                "LOGGER",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "debug",
                "debug",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "throw",
                "throw",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "Analysis",
                "Analysis",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "catch",
                "catch",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "Throwable",
                "Throwable",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "LOGGER",
                "LOGGER",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "warn",
                "warn",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "Unexpected",
                "Unexpected",
                "equal"
            ],
            [
                "error",
                "error",
                "equal"
            ],
            [
                "during",
                "during",
                "equal"
            ],
            [
                "parsing",
                "parsing",
                "equal"
            ],
            [
                "of",
                "of",
                "equal"
            ],
            [
                "the",
                "the",
                "equal"
            ],
            [
                "pom",
                "pom",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "'",
                "'",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "LOGGER",
                "LOGGER",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "debug",
                "debug",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "throw",
                "throw",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "Analysis",
                "Analysis",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "ex",
                "ex",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "@PUT@Consumes(MediaType.MULTIPART_FORM_DATA)@Produces(MediaType.APPLICATION_JSON)public Response uploadFile(@FormDataParam(\"file\")InputStream uploadedInputStream, @FormDataParam(\"file\")FormDataContentDisposition contentDisposition, @FormDataParam(\"path\")String path)throws IOException, Exception { if( ! path.endsWith(\"/\"))path = path + \"/\"; String filePath = path + contentDisposition.getFileName(); uploadFile(filePath, uploadedInputStream); return Response.ok(HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath))).build(); } ",
        "focal_tgt": "@PUT@Consumes(MediaType.MULTIPART_FORM_DATA)@Produces(MediaType.APPLICATION_JSON)public Response uploadFile(@FormDataParam(\"file\")InputStream uploadedInputStream, @FormDataParam(\"file\")FormDataContentDisposition contentDisposition, @FormDataParam(\"path\")String path)throws Exception { if( ! path.endsWith(\"/\"))path = path + \"/\"; String filePath = path + contentDisposition.getFileName(); uploadFile(filePath, uploadedInputStream); return Response.ok(HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath))).build(); } ",
        "test_src": "@Ignore@Test public void testUploadFile()throws Exception { Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\"); Assert.assertEquals(200, response.getStatus()); Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\", httpHeaders, uriInfo); JSONArray statuses = (JSONArray)listdir.getEntity(); System.out.println(statuses.size()); Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo); Assert.assertEquals(200, response2.getStatus()); } ",
        "test_tgt": "@Test public void testUploadFile()throws Exception { Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\"); Assert.assertEquals(200, response.getStatus()); Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\"); JSONArray statuses = (JSONArray)listdir.getEntity(); System.out.println(statuses.size()); Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo); Assert.assertEquals(200, response2.getStatus()); } ",
        "label": 1,
        "focal_db": [
            424236,
            "apache/ambari",
            "/data/comment_repos/apache@ambari",
            "ba392ad73cf452ca72f9164083bad88e69c4710b",
            "fdcd0f283d14df3da5262ec2fa5f0c7da33f7582",
            "contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java",
            "27c23e1b36ed766ca3cadc7feec31300180afc8e",
            "contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java",
            "@PUT\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response uploadFile(\n        @FormDataParam(\"file\") InputStream uploadedInputStream,\n        @FormDataParam(\"file\") FormDataContentDisposition contentDisposition,\n        @FormDataParam(\"path\") String path) throws IOException, Exception {\n        if (!path.endsWith(\"/\"))\n            path = path + \"/\";\n        String filePath = path + contentDisposition.getFileName();\n        uploadFile(filePath, uploadedInputStream);\n        return Response.ok(\n            HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath)))\n            .build();\n    }",
            "",
            "@PUT\n  @Consumes(MediaType.MULTIPART_FORM_DATA)\n  @Produces(MediaType.APPLICATION_JSON)\n  public Response uploadFile(\n      @FormDataParam(\"file\") InputStream uploadedInputStream,\n      @FormDataParam(\"file\") FormDataContentDisposition contentDisposition,\n      @FormDataParam(\"path\") String path) throws Exception {\n    if (!path.endsWith(\"/\"))\n      path = path + \"/\";\n    String filePath = path + contentDisposition.getFileName();\n    uploadFile(filePath, uploadedInputStream);\n    return Response.ok(\n        HdfsApi.fileStatusToJSON(getApi(context).getFileStatus(filePath)))\n        .build();\n  }",
            "/**\n * Upload file\n * @param uploadedInputStream file input stream\n * @param contentDisposition content disposition\n * @param path path\n * @return file status\n * @throws Exception\n */\n"
        ],
        "test_db": [
            424238,
            "apache/ambari",
            "/data/comment_repos/apache@ambari",
            "ba392ad73cf452ca72f9164083bad88e69c4710b",
            "e74d5b2bd4954c0df2a0e52713de8a5f78f6273e",
            "contrib/views/files/src/test/java/org/apache/ambari/view/filebrowser/FilebrowserTest.java",
            "ba5f3163a869139a8d298cff8a22e262e007c187",
            "contrib/views/files/src/test/java/org/apache/ambari/view/filebrowser/FilebrowserTest.java",
            "@Ignore\n    @Test\n    public void testUploadFile() throws Exception {\n        Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\");\n        Assert.assertEquals(200, response.getStatus());\n        Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\", httpHeaders,\n            uriInfo);\n        JSONArray statuses = (JSONArray) listdir.getEntity();\n        System.out.println(statuses.size());\n        Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo);\n        Assert.assertEquals(200, response2.getStatus());\n    }",
            "// TODO : fix test!!!\n",
            "@Test\n  public void testUploadFile() throws Exception {\n    Response response = uploadFile(\"/tmp/\", \"testUpload\", \".tmp\", \"Hello world\");\n    Assert.assertEquals(200, response.getStatus());\n    Response listdir = fileBrowserService.fileOps().listdir(\"/tmp\");\n    JSONArray statuses = (JSONArray) listdir.getEntity();\n    System.out.println(statuses.size());\n    Response response2 = fileBrowserService.download().browse(\"/tmp/testUpload.tmp\", false, httpHeaders, uriInfo);\n    Assert.assertEquals(200, response2.getStatus());\n  }",
            ""
        ],
        "edit_seq": [
            [
                "@",
                "@",
                "equal"
            ],
            [
                "PUT",
                "PUT",
                "equal"
            ],
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Consumes",
                "Consumes",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "Media",
                "Media",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Type",
                "Type",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "MULTIPART",
                "MULTIPART",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "_",
                "_",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "FORM",
                "FORM",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "_",
                "_",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "DATA",
                "DATA",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Produces",
                "Produces",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "Media",
                "Media",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Type",
                "Type",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "APPLICATION",
                "APPLICATION",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "_",
                "_",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "JSON",
                "JSON",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "public",
                "public",
                "equal"
            ],
            [
                "Response",
                "Response",
                "equal"
            ],
            [
                "upload",
                "upload",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Form",
                "Form",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Data",
                "Data",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Param",
                "Param",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "Input",
                "Input",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Stream",
                "Stream",
                "equal"
            ],
            [
                "uploaded",
                "uploaded",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Input",
                "Input",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Stream",
                "Stream",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Form",
                "Form",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Data",
                "Data",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Param",
                "Param",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "Form",
                "Form",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Data",
                "Data",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Content",
                "Content",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Disposition",
                "Disposition",
                "equal"
            ],
            [
                "content",
                "content",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Disposition",
                "Disposition",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Form",
                "Form",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Data",
                "Data",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Param",
                "Param",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "IO",
                "",
                "delete"
            ],
            [
                "<con>",
                "",
                "delete"
            ],
            [
                "Exception",
                "",
                "delete"
            ],
            [
                ",",
                "",
                "delete"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "if",
                "if",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "!",
                "!",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "ends",
                "ends",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "With",
                "With",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "+",
                "+",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "+",
                "+",
                "equal"
            ],
            [
                "content",
                "content",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Disposition",
                "Disposition",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Name",
                "Name",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "upload",
                "upload",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "uploaded",
                "uploaded",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Input",
                "Input",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Stream",
                "Stream",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "Response",
                "Response",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "ok",
                "ok",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "Hdfs",
                "Hdfs",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Api",
                "Api",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Status",
                "Status",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "To",
                "To",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "JSON",
                "JSON",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Api",
                "Api",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "context",
                "context",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Status",
                "Status",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "file",
                "file",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "build",
                "build",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "public static String getGroupFromGrpcClient() { try { User user = AuthenticatedClientUser.get(); if(user == null) { return \"\"; } return CommonUtils.getPrimaryGroupName(user.getName()); } catch(IOException e) { return \"\"; } } ",
        "focal_tgt": "public static String getGroupFromGrpcClient(AlluxioConfiguration conf) { try { User user = AuthenticatedClientUser.get(conf); if(user == null) { return \"\"; } return CommonUtils.getPrimaryGroupName(user.getName(), conf); } catch(IOException e) { return \"\"; } } ",
        "test_src": "@Test public void getGroupFromGrpcClient()throws Exception { Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName()); Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient()); Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName()); Configuration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS, IdentityUserGroupsMapping.class.getName()); AuthenticatedClientUser.set(\"test_client_user\"); Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient()); } ",
        "test_tgt": "@Test public void getGroupFromGrpcClient()throws Exception { mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName()); Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient(mConfiguration)); mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName()); mConfiguration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS, IdentityUserGroupsMapping.class.getName()); AuthenticatedClientUser.set(\"test_client_user\"); Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient(mConfiguration)); } ",
        "label": 1,
        "focal_db": [
            237961,
            "Alluxio/alluxio",
            "/data/comment_repos/Alluxio@alluxio",
            "c1daabcbd9a604557d7ca3d05d3d8a63f95d2885",
            "501e33f07d5d81e8d60c41618f91664671e1f73e",
            "core/common/src/main/java/alluxio/util/SecurityUtils.java",
            "604ef888bb96f3907866a413d7b976b776f595d7",
            "core/common/src/main/java/alluxio/util/SecurityUtils.java",
            "public static String getGroupFromGrpcClient() {\n    try {\n      User user = AuthenticatedClientUser.get();\n      if (user == null) {\n        return \"\";\n      }\n      return CommonUtils.getPrimaryGroupName(user.getName());\n    } catch (IOException e) {\n      return \"\";\n    }\n  }",
            "/**\n * @return the group fetched from the gRPC client, or empty string if the fetch fails or\n *         authentication is disabled\n */\n",
            "public static String getGroupFromGrpcClient(AlluxioConfiguration conf) {\n    try {\n      User user = AuthenticatedClientUser.get(conf);\n      if (user == null) {\n        return \"\";\n      }\n      return CommonUtils.getPrimaryGroupName(user.getName(), conf);\n    } catch (IOException e) {\n      return \"\";\n    }\n  }",
            "/**\n * @param conf Alluxio configuration\n * @return the group fetched from the gRPC client, or empty string if the fetch fails or\n *         authentication is disabled\n */\n"
        ],
        "test_db": [
            238019,
            "Alluxio/alluxio",
            "/data/comment_repos/Alluxio@alluxio",
            "c1daabcbd9a604557d7ca3d05d3d8a63f95d2885",
            "e33b7f59d68d7bd409ca6dab88e4b4199982fc34",
            "core/common/src/test/java/alluxio/util/SecurityUtilsTest.java",
            "43ac1d7dc8c8c3bfb0b120930f8c5ff0f62e480d",
            "core/common/src/test/java/alluxio/util/SecurityUtilsTest.java",
            "@Test\n  public void getGroupFromGrpcClient() throws Exception {\n    // When security is not enabled, user and group are not set\n    Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName());\n    Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient());\n\n    Configuration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName());\n    Configuration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS,\n        IdentityUserGroupsMapping.class.getName());\n    AuthenticatedClientUser.set(\"test_client_user\");\n    Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient());\n  }",
            "/**\n * Tests the {@link SecurityUtils#getGroupFromGrpcClient()} ()} method.\n */\n",
            "@Test\n  public void getGroupFromGrpcClient() throws Exception {\n    // When security is not enabled, user and group are not set\n    mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.NOSASL.getAuthName());\n    Assert.assertEquals(\"\", SecurityUtils.getGroupFromGrpcClient(mConfiguration));\n\n    mConfiguration.set(PropertyKey.SECURITY_AUTHENTICATION_TYPE, AuthType.SIMPLE.getAuthName());\n    mConfiguration.set(PropertyKey.SECURITY_GROUP_MAPPING_CLASS,\n        IdentityUserGroupsMapping.class.getName());\n    AuthenticatedClientUser.set(\"test_client_user\");\n    Assert.assertEquals(\"test_client_user\", SecurityUtils.getGroupFromGrpcClient(mConfiguration));\n  }",
            "/**\n * Tests the {@link SecurityUtils#getGroupFromGrpcClient()} ()} method.\n */\n"
        ],
        "edit_seq": [
            [
                "public",
                "public",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Group",
                "Group",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "From",
                "From",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Grpc",
                "Grpc",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Client",
                "Client",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "",
                "Alluxio",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Configuration",
                "insert"
            ],
            [
                "",
                "conf",
                "insert"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "try",
                "try",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "User",
                "User",
                "equal"
            ],
            [
                "user",
                "user",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "Authenticated",
                "Authenticated",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Client",
                "Client",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "User",
                "User",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "",
                "conf",
                "insert"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "if",
                "if",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "user",
                "user",
                "equal"
            ],
            [
                "==",
                "==",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "Common",
                "Common",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Utils",
                "Utils",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Primary",
                "Primary",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Group",
                "Group",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Name",
                "Name",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "user",
                "user",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Name",
                "Name",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "",
                ",",
                "insert"
            ],
            [
                "",
                "conf",
                "insert"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "catch",
                "catch",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "IO",
                "IO",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "e",
                "e",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "public Response putBucketMaxAge(String bucket, long maxAge)throws QiniuException { String url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge); Response res = post(url, null); if( ! res.isOK()) { throw new QiniuException(res); } res.close(); return res; } ",
        "focal_tgt": "public Response putBucketMaxAge(String bucket, long maxAge)throws QiniuException { String url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge); Response res = post(url, null); if( ! res.isOK()) { throw new QiniuException(res); } return res; } ",
        "test_src": "@Test public void testPutBucketMaxAge() { Client client = new Client(); Response response; try { long maxAges[] = { Integer.MIN_VALUE, - 54321, - 1, 0, 1, 8, 1234567, Integer.MAX_VALUE }; for(int i = 0; i < maxAges.length; i ++ ) { long maxAge = maxAges[i]; System.out.println(\"maxAge=\" + maxAge); response = bucketManager.putBucketMaxAge(TestConfig.testBucket_z0, maxAge); Assert.assertEquals(200, response.statusCode); response = client.get(TestConfig.testUrl_z0); String value = respHeader(TestConfig.testUrl_z0, \"Cache-Control\"); System.out.println(value); } } catch(IOException e) { if(e instanceof QiniuException) { Assert.fail(((QiniuException)e).response.toString()); } } } ",
        "test_tgt": "@Test public void testPutBucketMaxAge() { String[]buckets = new String[] { TestConfig.testBucket_z0, TestConfig.testBucket_na0 }; for(String bucket : buckets) { final long maxAges[] = { Integer.MIN_VALUE, - 54321, - 1, 0, 1, 8, 1234567, 11111111, Integer.MAX_VALUE }; try { for(long maxAge : maxAges) { Response response = bucketManager.putBucketMaxAge(bucket, maxAge); Assert.assertEquals(200, response.statusCode); BucketInfo bucketInfo = bucketManager.getBucketInfo(bucket); long expect = maxAge; long actual = bucketInfo.getMaxAge(); System.out.println(\"expect=\" + expect); System.out.println(\"actual=\" + actual); Assert.assertEquals(expect, actual); } } catch(QiniuException e) { Assert.fail(e.response.toString()); } } } ",
        "label": 1,
        "focal_db": [
            3319206,
            "qiniu/java-sdk",
            "/data/comment_repos/qiniu@java-sdk",
            "ee908cdb20416e321d13cb82c3fa721dd4953fad",
            "dd1d20aac40c711275728ef4bf5b7d1e5bf587a4",
            "src/main/java/com/qiniu/storage/BucketManager.java",
            "9b9540b0659581c88722fbd4f47e4f58d7191efa",
            "src/main/java/com/qiniu/storage/BucketManager.java",
            "public Response putBucketMaxAge(String bucket, long maxAge) throws QiniuException {\n    \tString url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge);\n    \tResponse res = post(url, null);\n        if (!res.isOK()) {\n            throw new QiniuException(res);\n        }\n        res.close();\n        return res;\n    }",
            "/**\n * \u8bbe\u7f6eBucket\u7684cache-control: max-age\u5c5e\u6027<br>\n * maxAge\u4e3a0\u6216\u8005\u8d1f\u6570\u8868\u793a\u4e3a\u9ed8\u8ba4\u503c\uff0831536000\uff09\n * @param bucket\n * @param maxAge\n * @return\n * @throws QiniuException\n */\n",
            "public Response putBucketMaxAge(String bucket, long maxAge) throws QiniuException {\n    \tString url = String.format(\"%s/maxAge?bucket=%s&maxAge=%d\", configuration.ucHost(), bucket, maxAge);\n    \tResponse res = post(url, null);\n        if (!res.isOK()) {\n            throw new QiniuException(res);\n        }\n        return res;\n    }",
            "/**\n * \u8bbe\u7f6eBucket\u7684cache-control: max-age\u5c5e\u6027<br>\n * maxAge\u4e3a0\u6216\u8005\u8d1f\u6570\u8868\u793a\u4e3a\u9ed8\u8ba4\u503c\uff0831536000\uff09\n * @param bucket\n * @param maxAge\n * @return\n * @throws QiniuException\n */\n"
        ],
        "test_db": [
            3319218,
            "qiniu/java-sdk",
            "/data/comment_repos/qiniu@java-sdk",
            "ee908cdb20416e321d13cb82c3fa721dd4953fad",
            "b438d9f4714ca3242985385c8f347a71eeb9e215",
            "src/test/java/test/com/qiniu/storage/BucketTest.java",
            "3ba5680c6432a056109d97e906668ece4e5cf95b",
            "src/test/java/test/com/qiniu/storage/BucketTest.java",
            "@Test\n    // TODO\n    public void testPutBucketMaxAge() {\n    \tClient client = new Client();\n    \tResponse response;\n    \ttry {\n    \t\tlong maxAges[] = {Integer.MIN_VALUE, -54321, -1, 0, 1, 8, 1234567, Integer.MAX_VALUE};\n    \t\tfor (int i = 0; i < maxAges.length; i ++) {\n    \t\t\tlong maxAge = maxAges[i];\n    \t\t\tSystem.out.println(\"maxAge=\" + maxAge);\n    \t\t\tresponse = bucketManager.putBucketMaxAge(TestConfig.testBucket_z0, maxAge);\n    \t\t\tAssert.assertEquals(200, response.statusCode);\n    \t\t\t\n        \t\tresponse = client.get(TestConfig.testUrl_z0);\n        \t\tString value = respHeader(TestConfig.testUrl_z0, \"Cache-Control\");\n        \t\tSystem.out.println(value);\n//        \t\tif (maxAge <= 0) {\n//        \t\t\tAssert.assertEquals(31536000, value);\n//        \t\t} else {\n//        \t\t\tAssert.assertEquals(maxAge, value);\n//        \t\t}\n    \t\t}\n    \t} catch (IOException e) {\n    \t\tif (e instanceof QiniuException) {\n    \t\t\tAssert.fail(((QiniuException) e).response.toString());\n    \t\t}\n    \t}\n    }",
            "/**\n * \u6d4b\u8bd5\u8bbe\u7f6emax-age\u5c5e\u6027\n */\n",
            "@Test\n    public void testPutBucketMaxAge() {\n    \tString[] buckets = new String[]{TestConfig.testBucket_z0, TestConfig.testBucket_na0};\n    \tfor (String bucket : buckets) {\n    \t\tfinal long maxAges[] = {Integer.MIN_VALUE, -54321, -1, 0, 1, 8, 1234567, 11111111, Integer.MAX_VALUE};\n    \t\ttry {\n    \t\t\tfor (long maxAge : maxAges) {\n    \t\t\t\t// \u8bbe\u7f6emax-age\n    \t\t\t\tResponse response = bucketManager.putBucketMaxAge(bucket, maxAge);\n    \t\t\t\tAssert.assertEquals(200, response.statusCode);\n    \t\t\t\t// \u83b7\u53d6max-age\n    \t\t\t\tBucketInfo bucketInfo = bucketManager.getBucketInfo(bucket);\n    \t\t\t\tlong expect = maxAge;\n    \t\t\t\tlong actual = bucketInfo.getMaxAge();\n            \t\tSystem.out.println(\"expect=\" + expect);\n            \t\tSystem.out.println(\"actual=\" + actual);\n            \t\tAssert.assertEquals(expect, actual);\n    \t\t\t}\n    \t\t} catch (QiniuException e) {\n    \t\t\tAssert.fail(e.response.toString());\n    \t\t}\n    \t}\n    }",
            "/**\n * \u6d4b\u8bd5\u8bbe\u7f6emax-age\u5c5e\u6027\n */\n"
        ],
        "edit_seq": [
            [
                "public",
                "public",
                "equal"
            ],
            [
                "Response",
                "Response",
                "equal"
            ],
            [
                "put",
                "put",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Bucket",
                "Bucket",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Max",
                "Max",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Age",
                "Age",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "bucket",
                "bucket",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "long",
                "long",
                "equal"
            ],
            [
                "max",
                "max",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Age",
                "Age",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "Qiniu",
                "Qiniu",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "url",
                "url",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "format",
                "format",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "%",
                "%",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "s",
                "s",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "max",
                "max",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Age",
                "Age",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "?",
                "?",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "bucket",
                "bucket",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "%",
                "%",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "s",
                "s",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "&",
                "&",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "max",
                "max",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Age",
                "Age",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "%",
                "%",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "d",
                "d",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "configuration",
                "configuration",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "uc",
                "uc",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Host",
                "Host",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "bucket",
                "bucket",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "max",
                "max",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Age",
                "Age",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "Response",
                "Response",
                "equal"
            ],
            [
                "res",
                "res",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "post",
                "post",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "url",
                "url",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "if",
                "if",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "!",
                "!",
                "equal"
            ],
            [
                "res",
                "res",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "is",
                "is",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "OK",
                "OK",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "throw",
                "throw",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "Qiniu",
                "Qiniu",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "res",
                "res",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "res",
                "",
                "delete"
            ],
            [
                ".",
                "",
                "delete"
            ],
            [
                "close",
                "",
                "delete"
            ],
            [
                "(",
                "",
                "delete"
            ],
            [
                ")",
                "",
                "delete"
            ],
            [
                ";",
                "",
                "delete"
            ],
            [
                "return",
                "return",
                "equal"
            ],
            [
                "res",
                "res",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "@Override protected void executeDMLUpdates()throws AmbariException, SQLException { removeNagiosService(); addNewConfigurationsFromXml(); updateHiveDatabaseType(); setSecurityType(); } ",
        "focal_tgt": "@Override protected void executeDMLUpdates()throws AmbariException, SQLException { removeNagiosService(); addNewConfigurationsFromXml(); updateDfsClusterAdmintistratorsProperty(); updateHiveDatabaseType(); setSecurityType(); } ",
        "test_src": "@Test public void testExecuteDMLUpdates()throws Exception { Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\"); Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\"); Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\"); Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\"); UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class).addMockedMethod(removeNagiosService).addMockedMethod(updateHiveDatabaseType).addMockedMethod(addNewConfigurationsFromXml).addMockedMethod(setSecurityType).createMock(); upgradeCatalog.removeNagiosService(); expectLastCall().once(); upgradeCatalog.addNewConfigurationsFromXml(); expectLastCall(); upgradeCatalog.updateHiveDatabaseType(); expectLastCall().once(); upgradeCatalog.setSecurityType(); expectLastCall().once(); replay(upgradeCatalog); upgradeCatalog.executeDMLUpdates(); verify(upgradeCatalog); } ",
        "test_tgt": "@Test public void testExecuteDMLUpdates()throws Exception { Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\"); Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\"); Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\"); Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\"); Method updateDfsClusterAdmintistratorsProperty = UpgradeCatalog200.class.getDeclaredMethod(\"updateDfsClusterAdmintistratorsProperty\"); UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class).addMockedMethod(removeNagiosService).addMockedMethod(updateHiveDatabaseType).addMockedMethod(addNewConfigurationsFromXml).addMockedMethod(setSecurityType).addMockedMethod(updateDfsClusterAdmintistratorsProperty).createMock(); upgradeCatalog.removeNagiosService(); expectLastCall().once(); upgradeCatalog.addNewConfigurationsFromXml(); expectLastCall(); upgradeCatalog.updateDfsClusterAdmintistratorsProperty(); expectLastCall(); upgradeCatalog.updateHiveDatabaseType(); expectLastCall().once(); upgradeCatalog.setSecurityType(); expectLastCall().once(); replay(upgradeCatalog); upgradeCatalog.executeDMLUpdates(); verify(upgradeCatalog); } ",
        "label": 1,
        "focal_db": [
            421188,
            "apache/ambari",
            "/data/comment_repos/apache@ambari",
            "edfd9ab1fbddeaacffdaa608ba60a088e9e8f3f4",
            "70e5f78072edb08177025e572ae58a569486f657",
            "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog200.java",
            "9b647fdcb442216dd41c5d2421fa4201e71180dd",
            "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog200.java",
            "@Override\n  protected void executeDMLUpdates() throws AmbariException, SQLException {\n    // remove NAGIOS to make way for the new embedded alert framework\n    removeNagiosService();\n    addNewConfigurationsFromXml();\n    updateHiveDatabaseType();\n    setSecurityType();\n  }",
            "/**\n * {@inheritDoc}\n */\n",
            "@Override\n  protected void executeDMLUpdates() throws AmbariException, SQLException {\n    // remove NAGIOS to make way for the new embedded alert framework\n    removeNagiosService();\n    addNewConfigurationsFromXml();\n    updateHiveDatabaseType();\n    setSecurityType();\n    addMissingConfigs();\n  }",
            "/**\n * {@inheritDoc}\n */\n"
        ],
        "test_db": [
            421369,
            "apache/ambari",
            "/data/comment_repos/apache@ambari",
            "a0284cc33fa9a22359953103c0516222acb3757e",
            "d6f9e6ef8999fd2931f15070463f69aedb854627",
            "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog200Test.java",
            "b935c29db31810fbe08c88835a880f00f9b27911",
            "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog200Test.java",
            "@Test\n  public void testExecuteDMLUpdates() throws Exception {\n    Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\");\n    Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\");\n    Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod\n        (\"addNewConfigurationsFromXml\");\n    Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\");\n\n    UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class)\n        .addMockedMethod(removeNagiosService)\n        .addMockedMethod(updateHiveDatabaseType)\n        .addMockedMethod(addNewConfigurationsFromXml)\n        .addMockedMethod(setSecurityType)\n        .createMock();\n\n    upgradeCatalog.removeNagiosService();\n    expectLastCall().once();\n    upgradeCatalog.addNewConfigurationsFromXml();\n    expectLastCall();\n    upgradeCatalog.updateHiveDatabaseType();\n    expectLastCall().once();\n    upgradeCatalog.setSecurityType();\n    expectLastCall().once();\n\n    replay(upgradeCatalog);\n\n    upgradeCatalog.executeDMLUpdates();\n\n    verify(upgradeCatalog);\n  }",
            "/**\n * Tests that each DML method is invoked.\n *\n * @throws Exception\n */\n",
            "@Test\n  public void testExecuteDMLUpdates() throws Exception {\n    Method removeNagiosService = UpgradeCatalog200.class.getDeclaredMethod(\"removeNagiosService\");\n    Method updateHiveDatabaseType = UpgradeCatalog200.class.getDeclaredMethod(\"updateHiveDatabaseType\");\n    Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod\n        (\"addNewConfigurationsFromXml\");\n    Method setSecurityType = UpgradeCatalog200.class.getDeclaredMethod(\"setSecurityType\");\n    Method updateDfsClusterAdmintistratorsProperty = UpgradeCatalog200.class.getDeclaredMethod(\"updateDfsClusterAdmintistratorsProperty\");\n\n    UpgradeCatalog200 upgradeCatalog = createMockBuilder(UpgradeCatalog200.class)\n        .addMockedMethod(removeNagiosService)\n        .addMockedMethod(updateHiveDatabaseType)\n        .addMockedMethod(addNewConfigurationsFromXml)\n        .addMockedMethod(setSecurityType)\n        .addMockedMethod(updateDfsClusterAdmintistratorsProperty)\n        .createMock();\n\n    upgradeCatalog.removeNagiosService();\n    expectLastCall().once();\n    upgradeCatalog.addNewConfigurationsFromXml();\n    expectLastCall();\n\n    upgradeCatalog.updateDfsClusterAdmintistratorsProperty();\n    expectLastCall();\n    \n    upgradeCatalog.updateHiveDatabaseType();\n    expectLastCall().once();\n    upgradeCatalog.setSecurityType();\n    expectLastCall().once();\n\n    replay(upgradeCatalog);\n\n    upgradeCatalog.executeDMLUpdates();\n\n    verify(upgradeCatalog);\n  }",
            "/**\n * Tests that each DML method is invoked.\n *\n * @throws Exception\n */\n"
        ],
        "edit_seq": [
            [
                "@",
                "@",
                "equal"
            ],
            [
                "Override",
                "Override",
                "equal"
            ],
            [
                "protected",
                "protected",
                "equal"
            ],
            [
                "void",
                "void",
                "equal"
            ],
            [
                "execute",
                "execute",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "DML",
                "DML",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Updates",
                "Updates",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "Ambari",
                "Ambari",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "SQL",
                "SQL",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "remove",
                "remove",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Nagios",
                "Nagios",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Service",
                "Service",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "add",
                "add",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "New",
                "New",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Configurations",
                "Configurations",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "From",
                "From",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Xml",
                "Xml",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "",
                "update",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Dfs",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Cluster",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Admintistrators",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Property",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "update",
                "update",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Hive",
                "Hive",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Database",
                "Database",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Type",
                "Type",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "set",
                "set",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Security",
                "Security",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Type",
                "Type",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    },
    {
        "focal_src": "void notifyCreditAvailable(RemoteInputChannel inputChannel) { } ",
        "focal_tgt": "void notifyCreditAvailable(final RemoteInputChannel inputChannel) { ctx.executor().execute(new Runnable() { @Override public void run() { ctx.pipeline().fireUserEventTriggered(inputChannel); } }); } ",
        "test_src": "@Test public void testNotifyCreditAvailable()throws Exception { final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32); final SingleInputGate inputGate = createSingleInputGate(); final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate); final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate); inputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1); inputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2); try { final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6); inputGate.setBufferPool(bufferPool); final int numExclusiveBuffers = 2; inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers); final CreditBasedClientHandler handler = new CreditBasedClientHandler(); final EmbeddedChannel channel = new EmbeddedChannel(handler); inputChannel1.requestSubpartition(0); inputChannel2.requestSubpartition(0); handler.addInputChannel(inputChannel1); handler.addInputChannel(inputChannel2); final BufferResponse bufferResponse1 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1); final BufferResponse bufferResponse2 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2); handler.notifyCreditAvailable(inputChannel1); handler.notifyCreditAvailable(inputChannel2); assertEquals(2, inputChannel1.getUnannouncedCredit()); assertEquals(2, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertTrue(channel.isWritable()); Object readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(2, ((AddCredit)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(2, ((AddCredit)readFromOutbound).credit); assertNull(channel.readOutbound()); final int highWaterMark = channel.config().getWriteBufferHighWaterMark(); ByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark); channel.write(channelBlockingBuffer); final BufferResponse bufferResponse3 = createBufferResponse(TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3); handler.notifyCreditAvailable(inputChannel1); assertEquals(1, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertFalse(channel.isWritable()); assertNull(channel.readOutbound()); channel.flush(); assertSame(channelBlockingBuffer, channel.readOutbound()); assertTrue(channel.isWritable()); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(1, ((AddCredit)readFromOutbound).credit); assertEquals(0, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); assertNull(channel.readOutbound()); } finally { inputGate.releaseAllResources(); networkBufferPool.destroyAllBufferPools(); networkBufferPool.destroy(); } } ",
        "test_tgt": "@Test public void testNotifyCreditAvailable()throws Exception { final PartitionRequestClientHandler handler = new PartitionRequestClientHandler(); final EmbeddedChannel channel = new EmbeddedChannel(handler); final PartitionRequestClient client = new PartitionRequestClient(channel, handler, mock(ConnectionID.class), mock(PartitionRequestClientFactory.class)); final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32); final SingleInputGate inputGate = createSingleInputGate(); final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate, client); final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate, client); try { final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6); inputGate.setBufferPool(bufferPool); final int numExclusiveBuffers = 2; inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers); inputChannel1.requestSubpartition(0); inputChannel2.requestSubpartition(0); assertTrue(channel.isWritable()); Object readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(PartitionRequest.class)); assertEquals(inputChannel1.getInputChannelId(), ((PartitionRequest)readFromOutbound).receiverId); assertEquals(2, ((PartitionRequest)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(PartitionRequest.class)); assertEquals(inputChannel2.getInputChannelId(), ((PartitionRequest)readFromOutbound).receiverId); assertEquals(2, ((PartitionRequest)readFromOutbound).credit); final BufferResponse bufferResponse1 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1); final BufferResponse bufferResponse2 = createBufferResponse(TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2); assertEquals(2, inputChannel1.getUnannouncedCredit()); assertEquals(2, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(inputChannel1.getInputChannelId(), ((AddCredit)readFromOutbound).receiverId); assertEquals(2, ((AddCredit)readFromOutbound).credit); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(inputChannel2.getInputChannelId(), ((AddCredit)readFromOutbound).receiverId); assertEquals(2, ((AddCredit)readFromOutbound).credit); assertNull(channel.readOutbound()); ByteBuf channelBlockingBuffer = blockChannel(channel); final BufferResponse bufferResponse3 = createBufferResponse(TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1); handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3); assertEquals(1, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); channel.runPendingTasks(); assertFalse(channel.isWritable()); assertNull(channel.readOutbound()); channel.flush(); assertSame(channelBlockingBuffer, channel.readOutbound()); assertTrue(channel.isWritable()); readFromOutbound = channel.readOutbound(); assertThat(readFromOutbound, instanceOf(AddCredit.class)); assertEquals(1, ((AddCredit)readFromOutbound).credit); assertEquals(0, inputChannel1.getUnannouncedCredit()); assertEquals(0, inputChannel2.getUnannouncedCredit()); assertNull(channel.readOutbound()); } finally { inputGate.releaseAllResources(); networkBufferPool.destroyAllBufferPools(); networkBufferPool.destroy(); } } ",
        "label": 1,
        "focal_db": [
            624692,
            "apache/flink",
            "/data/comment_repos/apache@flink",
            "a9fdbc4be2a7b2c10d524f92927534a15edf9b3e",
            "94687291d7b8767e6a010722798bcbaf90e5710d",
            "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandler.java",
            "5299e22a27eb37e6fe1217b371201cce8bad7e62",
            "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandler.java",
            "void notifyCreditAvailable(RemoteInputChannel inputChannel) {\n\t}",
            "/**\n * This class would be replaced by CreditBasedClientHandler in the final,\n * so we only implement this method in CreditBasedClientHandler.\n */\n",
            "void notifyCreditAvailable(final RemoteInputChannel inputChannel) {\n\t\tctx.executor().execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tctx.pipeline().fireUserEventTriggered(inputChannel);\n\t\t\t}\n\t\t});\n\t}",
            "/**\n * The credit begins to announce after receiving the sender's backlog from buffer response.\n * Than means it should only happen after some interactions with the channel to make sure\n * the context will not be null.\n *\n * @param inputChannel The input channel with unannounced credits.\n */\n"
        ],
        "test_db": [
            624699,
            "apache/flink",
            "/data/comment_repos/apache@flink",
            "a9fdbc4be2a7b2c10d524f92927534a15edf9b3e",
            "fff0e2229871d091a9a09cafb7fc683a06588c3b",
            "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandlerTest.java",
            "cc670e1d7633ac6f148f5435255d62af6cbb5b46",
            "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientHandlerTest.java",
            "@Test\n\tpublic void testNotifyCreditAvailable() throws Exception {\n\t\tfinal NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32);\n\t\tfinal SingleInputGate inputGate = createSingleInputGate();\n\t\tfinal RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate);\n\t\tfinal RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate);\n\t\tinputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1);\n\t\tinputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2);\n\t\ttry {\n\t\t\tfinal BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6);\n\t\t\tinputGate.setBufferPool(bufferPool);\n\t\t\tfinal int numExclusiveBuffers = 2;\n\t\t\tinputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers);\n\n\t\t\tfinal CreditBasedClientHandler handler = new CreditBasedClientHandler();\n\t\t\tfinal EmbeddedChannel channel = new EmbeddedChannel(handler);\n\n\t\t\t// The PartitionRequestClient is tied to PartitionRequestClientHandler currently, so we\n\t\t\t// have to add input channels in CreditBasedClientHandler explicitly\n\t\t\tinputChannel1.requestSubpartition(0);\n\t\t\tinputChannel2.requestSubpartition(0);\n\t\t\thandler.addInputChannel(inputChannel1);\n\t\t\thandler.addInputChannel(inputChannel2);\n\n\t\t\t// The buffer response will take one available buffer from input channel, and it will trigger\n\t\t\t// requesting (backlog + numExclusiveBuffers -  numAvailableBuffers) floating buffers\n\t\t\tfinal BufferResponse bufferResponse1 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1);\n\t\t\tfinal BufferResponse bufferResponse2 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2);\n\n\t\t\t// The PartitionRequestClient is tied to PartitionRequestClientHandler currently, so we\n\t\t\t// have to notify credit available in CreditBasedClientHandler explicitly\n\t\t\thandler.notifyCreditAvailable(inputChannel1);\n\t\t\thandler.notifyCreditAvailable(inputChannel2);\n\n\t\t\tassertEquals(2, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(2, inputChannel2.getUnannouncedCredit());\n\n\t\t\tchannel.runPendingTasks();\n\n\t\t\t// The two input channels should notify credits via writable channel\n\t\t\tassertTrue(channel.isWritable());\n\t\t\tObject readFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(2, ((AddCredit) readFromOutbound).credit);\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(2, ((AddCredit) readFromOutbound).credit);\n\t\t\tassertNull(channel.readOutbound());\n\n\t\t\tfinal int highWaterMark = channel.config().getWriteBufferHighWaterMark();\n\t\t\t// Set the writer index to the high water mark to ensure that all bytes are written\n\t\t\t// to the wire although the buffer is \"empty\".\n\t\t\tByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark);\n\t\t\tchannel.write(channelBlockingBuffer);\n\n\t\t\t// Trigger notify credits available via buffer response on the condition of un-writable channel\n\t\t\tfinal BufferResponse bufferResponse3 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3);\n\t\t\thandler.notifyCreditAvailable(inputChannel1);\n\n\t\t\tassertEquals(1, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(0, inputChannel2.getUnannouncedCredit());\n\n\t\t\tchannel.runPendingTasks();\n\n\t\t\t// The input channel will not notify credits via un-writable channel\n\t\t\tassertFalse(channel.isWritable());\n\t\t\tassertNull(channel.readOutbound());\n\n\t\t\t// Flush the buffer to make the channel writable again\n\t\t\tchannel.flush();\n\t\t\tassertSame(channelBlockingBuffer, channel.readOutbound());\n\n\t\t\t// The input channel should notify credits via channel's writability changed event\n\t\t\tassertTrue(channel.isWritable());\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(1, ((AddCredit) readFromOutbound).credit);\n\t\t\tassertEquals(0, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(0, inputChannel2.getUnannouncedCredit());\n\n\t\t\t// no more messages\n\t\t\tassertNull(channel.readOutbound());\n\t\t} finally {\n\t\t\t// Release all the buffer resources\n\t\t\tinputGate.releaseAllResources();\n\n\t\t\tnetworkBufferPool.destroyAllBufferPools();\n\t\t\tnetworkBufferPool.destroy();\n\t\t}\n\t}",
            "/**\n * Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,\n * and verifies the behaviour of credit notification by triggering channel's writability changed.\n */\n",
            "@Test\n\tpublic void testNotifyCreditAvailable() throws Exception {\n\t\tfinal PartitionRequestClientHandler handler = new PartitionRequestClientHandler();\n\t\tfinal EmbeddedChannel channel = new EmbeddedChannel(handler);\n\t\tfinal PartitionRequestClient client = new PartitionRequestClient(\n\t\t\tchannel, handler, mock(ConnectionID.class), mock(PartitionRequestClientFactory.class));\n\n\t\tfinal NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32);\n\t\tfinal SingleInputGate inputGate = createSingleInputGate();\n\t\tfinal RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate, client);\n\t\tfinal RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate, client);\n\t\ttry {\n\t\t\tfinal BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6);\n\t\t\tinputGate.setBufferPool(bufferPool);\n\t\t\tfinal int numExclusiveBuffers = 2;\n\t\t\tinputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers);\n\n\t\t\tinputChannel1.requestSubpartition(0);\n\t\t\tinputChannel2.requestSubpartition(0);\n\n\t\t\t// The two input channels should send partition requests\n\t\t\tassertTrue(channel.isWritable());\n\t\t\tObject readFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(PartitionRequest.class));\n\t\t\tassertEquals(inputChannel1.getInputChannelId(), ((PartitionRequest) readFromOutbound).receiverId);\n\t\t\tassertEquals(2, ((PartitionRequest) readFromOutbound).credit);\n\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(PartitionRequest.class));\n\t\t\tassertEquals(inputChannel2.getInputChannelId(), ((PartitionRequest) readFromOutbound).receiverId);\n\t\t\tassertEquals(2, ((PartitionRequest) readFromOutbound).credit);\n\n\t\t\t// The buffer response will take one available buffer from input channel, and it will trigger\n\t\t\t// requesting (backlog + numExclusiveBuffers - numAvailableBuffers) floating buffers\n\t\t\tfinal BufferResponse bufferResponse1 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1);\n\t\t\tfinal BufferResponse bufferResponse2 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2);\n\n\t\t\tassertEquals(2, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(2, inputChannel2.getUnannouncedCredit());\n\n\t\t\tchannel.runPendingTasks();\n\n\t\t\t// The two input channels should notify credits availability via the writable channel\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(inputChannel1.getInputChannelId(), ((AddCredit) readFromOutbound).receiverId);\n\t\t\tassertEquals(2, ((AddCredit) readFromOutbound).credit);\n\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(inputChannel2.getInputChannelId(), ((AddCredit) readFromOutbound).receiverId);\n\t\t\tassertEquals(2, ((AddCredit) readFromOutbound).credit);\n\t\t\tassertNull(channel.readOutbound());\n\n\t\t\tByteBuf channelBlockingBuffer = blockChannel(channel);\n\n\t\t\t// Trigger notify credits availability via buffer response on the condition of an un-writable channel\n\t\t\tfinal BufferResponse bufferResponse3 = createBufferResponse(\n\t\t\t\tTestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1);\n\t\t\thandler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3);\n\n\t\t\tassertEquals(1, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(0, inputChannel2.getUnannouncedCredit());\n\n\t\t\tchannel.runPendingTasks();\n\n\t\t\t// The input channel will not notify credits via un-writable channel\n\t\t\tassertFalse(channel.isWritable());\n\t\t\tassertNull(channel.readOutbound());\n\n\t\t\t// Flush the buffer to make the channel writable again\n\t\t\tchannel.flush();\n\t\t\tassertSame(channelBlockingBuffer, channel.readOutbound());\n\n\t\t\t// The input channel should notify credits via channel's writability changed event\n\t\t\tassertTrue(channel.isWritable());\n\t\t\treadFromOutbound = channel.readOutbound();\n\t\t\tassertThat(readFromOutbound, instanceOf(AddCredit.class));\n\t\t\tassertEquals(1, ((AddCredit) readFromOutbound).credit);\n\t\t\tassertEquals(0, inputChannel1.getUnannouncedCredit());\n\t\t\tassertEquals(0, inputChannel2.getUnannouncedCredit());\n\n\t\t\t// no more messages\n\t\t\tassertNull(channel.readOutbound());\n\t\t} finally {\n\t\t\t// Release all the buffer resources\n\t\t\tinputGate.releaseAllResources();\n\n\t\t\tnetworkBufferPool.destroyAllBufferPools();\n\t\t\tnetworkBufferPool.destroy();\n\t\t}\n\t}",
            "/**\n * Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,\n * and verifies the behaviour of credit notification by triggering channel's writability changed.\n */\n"
        ],
        "edit_seq": [
            [
                "void",
                "void",
                "equal"
            ],
            [
                "notify",
                "notify",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Credit",
                "Credit",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Available",
                "Available",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "",
                "final",
                "insert"
            ],
            [
                "Remote",
                "Remote",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Input",
                "Input",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Channel",
                "Channel",
                "equal"
            ],
            [
                "input",
                "input",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Channel",
                "Channel",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "",
                "ctx",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "executor",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "execute",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "new",
                "insert"
            ],
            [
                "",
                "Runnable",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "{",
                "insert"
            ],
            [
                "",
                "@",
                "insert"
            ],
            [
                "",
                "Override",
                "insert"
            ],
            [
                "",
                "public",
                "insert"
            ],
            [
                "",
                "void",
                "insert"
            ],
            [
                "",
                "run",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "{",
                "insert"
            ],
            [
                "",
                "ctx",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "pipeline",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "fire",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "User",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Event",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Triggered",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "input",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Channel",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "",
                "}",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "}",
                "insert"
            ]
        ]
    },
    {
        "focal_src": "public void doDynamic(StaplerRequest req, StaplerResponse rsp)throws IOException, ServletException { String path = req.getRestOfPath(); if(path.length() == 0)path = \"/\"; String requestPath = req.getRequestURI().substring(req.getContextPath().length()); boolean staticLink = requestPath.startsWith(\"/static/\"); long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : - 1; try { rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires); } catch(URISyntaxException x) { throw new IOException(x); } } ",
        "focal_tgt": "public void doDynamic(StaplerRequest req, StaplerResponse rsp)throws IOException, ServletException { String path = req.getRestOfPath(); if(path.startsWith(\"/META-INF/\") || path.startsWith(\"/WEB-INF/\")) { throw HttpResponses.notFound(); } if(path.length() == 0)path = \"/\"; String requestPath = req.getRequestURI().substring(req.getContextPath().length()); boolean staticLink = requestPath.startsWith(\"/static/\"); long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : - 1; try { rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires); } catch(URISyntaxException x) { throw new IOException(x); } } ",
        "test_src": "@Test public void doDynamic()throws Exception { r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\"); r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); } ",
        "test_tgt": "@Test public void doDynamic()throws Exception { r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\"); r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/WEB-INF/licenses.xml\", HttpServletResponse.SC_NOT_FOUND); r.createWebClient().assertFails(\"plugin/credentials/META-INF/MANIFEST.MF\", HttpServletResponse.SC_NOT_FOUND); } ",
        "label": 1,
        "focal_db": [
            5831862,
            "jenkinsci/jenkins",
            "/data/local_comment_repos/jenkinsci@jenkins",
            "f0a29b562e14d837912c6b35fa4e81478563813a",
            "a5bda87da6a5acd370655e46ced5074c7b67c804",
            "core/src/main/java/hudson/Plugin.java",
            "core/src/main/java/hudson/Plugin.java",
            "core/src/main/java/hudson/Plugin.java",
            "public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {\n        String path = req.getRestOfPath();\n\n        if(path.length()==0)\n            path = \"/\";\n\n        // Stapler routes requests like the \"/static/.../foo/bar/zot\" to be treated like \"/foo/bar/zot\"\n        // and this is used to serve long expiration header, by using Jenkins.VERSION_HASH as \"...\"\n        // to create unique URLs. Recognize that and set a long expiration header.\n        String requestPath = req.getRequestURI().substring(req.getContextPath().length());\n        boolean staticLink = requestPath.startsWith(\"/static/\");\n\n        long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : -1;\n\n        // use serveLocalizedFile to support automatic locale selection\n        try {\n            rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires);\n        } catch (URISyntaxException x) {\n            throw new IOException(x);\n        }\n    }",
            "/**\n * This method serves static resources in the plugin under <tt>hudson/plugin/SHORTNAME</tt>.\n */\n",
            "public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {\n        String path = req.getRestOfPath();\n\n        if (path.startsWith(\"/META-INF/\") || path.startsWith(\"/WEB-INF/\")) {\n            throw HttpResponses.notFound();\n        }\n\n        if(path.length()==0)\n            path = \"/\";\n\n        // Stapler routes requests like the \"/static/.../foo/bar/zot\" to be treated like \"/foo/bar/zot\"\n        // and this is used to serve long expiration header, by using Jenkins.VERSION_HASH as \"...\"\n        // to create unique URLs. Recognize that and set a long expiration header.\n        String requestPath = req.getRequestURI().substring(req.getContextPath().length());\n        boolean staticLink = requestPath.startsWith(\"/static/\");\n\n        long expires = staticLink ? TimeUnit2.DAYS.toMillis(365) : -1;\n\n        // use serveLocalizedFile to support automatic locale selection\n        try {\n            rsp.serveLocalizedFile(req, wrapper.baseResourceURL.toURI().resolve(new URI(null, '.' + path, null)).toURL(), expires);\n        } catch (URISyntaxException x) {\n            throw new IOException(x);\n        }\n    }",
            "/**\n * This method serves static resources in the plugin under <tt>hudson/plugin/SHORTNAME</tt>.\n */\n"
        ],
        "test_db": [
            5831860,
            "jenkinsci/jenkins",
            "/data/local_comment_repos/jenkinsci@jenkins",
            "a623c8e30d38685e5372649f439472fcf548c7ca",
            "17f827a358dee53e1fa6a88bd67c9f88e626d6ee",
            "test/src/test/java/hudson/PluginTest.java",
            "test/src/test/java/hudson/PluginTest.java",
            "test/src/test/java/hudson/PluginTest.java",
            "@Test public void doDynamic() throws Exception {\n        r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\");\n        /* Collapsed somewhere before it winds up in restOfPath:\n        r.createWebClient().assertFails(\"plugin/credentials/images/../images/24x24/credentials.png\", HttpServletResponse.SC_BAD_REQUEST);\n        */\n        r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // IAE from TokenList.<init>\n        r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); // SECURITY-131\n        r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); // just checking\n    }",
            "// @Issue(\"SECURITY-131\")\n",
            "@Issue(\"SECURITY-131\")\n    @Test public void doDynamic() throws Exception {\n        r.createWebClient().goTo(\"plugin/credentials/images/24x24/credentials.png\", \"image/png\");\n        /* Collapsed somewhere before it winds up in restOfPath:\n        r.createWebClient().assertFails(\"plugin/credentials/images/../images/24x24/credentials.png\", HttpServletResponse.SC_BAD_REQUEST);\n        */\n        r.createWebClient().assertFails(\"plugin/credentials/images/%2E%2E/images/24x24/credentials.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // IAE from TokenList.<init>\n        r.createWebClient().assertFails(\"plugin/credentials/images/%252E%252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); // SECURITY-131\n        r.createWebClient().assertFails(\"plugin/credentials/images/%25252E%25252E/images/24x24/credentials.png\", HttpServletResponse.SC_NOT_FOUND); // just checking\n    }",
            ""
        ],
        "edit_seq": [
            [
                "public",
                "public",
                "equal"
            ],
            [
                "void",
                "void",
                "equal"
            ],
            [
                "do",
                "do",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Dynamic",
                "Dynamic",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "Stapler",
                "Stapler",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Request",
                "Request",
                "equal"
            ],
            [
                "req",
                "req",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "Stapler",
                "Stapler",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Response",
                "Response",
                "equal"
            ],
            [
                "rsp",
                "rsp",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "throws",
                "throws",
                "equal"
            ],
            [
                "IO",
                "IO",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "Servlet",
                "Servlet",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "req",
                "req",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Rest",
                "Rest",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Of",
                "Of",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "",
                "if",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "path",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "starts",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "With",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "\"",
                "insert"
            ],
            [
                "",
                "/",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "META",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "-",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "INF",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "/",
                "insert"
            ],
            [
                "",
                "\"",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "||",
                "insert"
            ],
            [
                "",
                "path",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "starts",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "With",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                "\"",
                "insert"
            ],
            [
                "",
                "/",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "WEB",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "-",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "INF",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "/",
                "insert"
            ],
            [
                "",
                "\"",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                "{",
                "insert"
            ],
            [
                "",
                "throw",
                "insert"
            ],
            [
                "",
                "Http",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Responses",
                "insert"
            ],
            [
                "",
                ".",
                "insert"
            ],
            [
                "",
                "not",
                "insert"
            ],
            [
                "",
                "<con>",
                "insert"
            ],
            [
                "",
                "Found",
                "insert"
            ],
            [
                "",
                "(",
                "insert"
            ],
            [
                "",
                ")",
                "insert"
            ],
            [
                "",
                ";",
                "insert"
            ],
            [
                "",
                "}",
                "insert"
            ],
            [
                "if",
                "if",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "length",
                "length",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "==",
                "==",
                "equal"
            ],
            [
                "0",
                "0",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "String",
                "String",
                "equal"
            ],
            [
                "request",
                "request",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "req",
                "req",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Request",
                "Request",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "URI",
                "URI",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "substring",
                "substring",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "req",
                "req",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "get",
                "get",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Context",
                "Context",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "length",
                "length",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "boolean",
                "boolean",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Link",
                "Link",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "request",
                "request",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Path",
                "Path",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "starts",
                "starts",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "With",
                "With",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "/",
                "/",
                "equal"
            ],
            [
                "\"",
                "\"",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "long",
                "long",
                "equal"
            ],
            [
                "expires",
                "expires",
                "equal"
            ],
            [
                "=",
                "=",
                "equal"
            ],
            [
                "static",
                "static",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Link",
                "Link",
                "equal"
            ],
            [
                "?",
                "?",
                "equal"
            ],
            [
                "Time",
                "Time",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Unit2",
                "Unit2",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "DAYS",
                "DAYS",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "to",
                "to",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Millis",
                "Millis",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "365",
                "365",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ":",
                ":",
                "equal"
            ],
            [
                "-",
                "-",
                "equal"
            ],
            [
                "1",
                "1",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "try",
                "try",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "rsp",
                "rsp",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "serve",
                "serve",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Localized",
                "Localized",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "File",
                "File",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "req",
                "req",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "wrapper",
                "wrapper",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "base",
                "base",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Resource",
                "Resource",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "URL",
                "URL",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "to",
                "to",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "URI",
                "URI",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "resolve",
                "resolve",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "URI",
                "URI",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "'.'",
                "'.'",
                "equal"
            ],
            [
                "+",
                "+",
                "equal"
            ],
            [
                "path",
                "path",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "null",
                "null",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ".",
                ".",
                "equal"
            ],
            [
                "to",
                "to",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "URL",
                "URL",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ",",
                ",",
                "equal"
            ],
            [
                "expires",
                "expires",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "catch",
                "catch",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "URI",
                "URI",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Syntax",
                "Syntax",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "x",
                "x",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                "{",
                "{",
                "equal"
            ],
            [
                "throw",
                "throw",
                "equal"
            ],
            [
                "new",
                "new",
                "equal"
            ],
            [
                "IO",
                "IO",
                "equal"
            ],
            [
                "<con>",
                "<con>",
                "equal"
            ],
            [
                "Exception",
                "Exception",
                "equal"
            ],
            [
                "(",
                "(",
                "equal"
            ],
            [
                "x",
                "x",
                "equal"
            ],
            [
                ")",
                ")",
                "equal"
            ],
            [
                ";",
                ";",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ],
            [
                "}",
                "}",
                "equal"
            ]
        ]
    }
]